
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	e0 13 00 20 91 19 00 00 3d 4b 00 00 65 19 00 00     ... ....=K..e...
  10:	65 19 00 00 65 19 00 00 65 19 00 00 00 00 00 00     e...e...e.......
	...
  2c:	6d 16 00 00 65 19 00 00 00 00 00 00 19 16 00 00     m...e...........
  3c:	65 19 00 00                                         e...

00000040 <_irq_vector_table>:
  40:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
  50:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
  60:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
  70:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
  80:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
  90:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
  a0:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
  b0:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
  c0:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
  d0:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
  e0:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................
  f0:	1d 17 00 00 1d 17 00 00 1d 17 00 00 1d 17 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <__data_size+0x163>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <__data_size+0x6d>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <__data_size+0x65>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <__data_size+0x25>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <__data_size+0x25>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <__data_size+0x69>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <__data_size+0x4f>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <__data_size+0x4f>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <__data_size+0x61>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <__data_size+0x25>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <__data_size+0x4f>
     1e2:	b902      	cbnz	r2, 1e6 <__data_size+0x71>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <__data_size+0xd5>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <__data_size+0x15b>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <__data_size+0xa5>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <__data_size+0xa5>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <__data_size+0x15f>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <__data_size+0xd1>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <__data_size+0xd1>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <__data_size+0x53>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <__data_size+0x153>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <__data_size+0x11d>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <__data_size+0x11d>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <__data_size+0x157>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <__data_size+0x149>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <__data_size+0x149>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <__data_size+0x77>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <__data_size+0x11d>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <__data_size+0x149>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <__data_size+0xa5>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <__data_size+0xd1>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <__data_size+0x173>
     2dc:	b10e      	cbz	r6, 2e2 <__data_size+0x16d>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <__data_size+0x61>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <__data_size+0x19b>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <__data_size+0x181>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <__data_size+0x197>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <__data_size+0x261>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <__data_size+0x61>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <__data_size+0x18b>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <__data_size+0x259>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <__data_size+0x1ed>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <__data_size+0x1ed>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <__data_size+0x25d>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <__data_size+0x219>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <__data_size+0x219>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <__data_size+0x233>
     3a2:	d106      	bne.n	3b2 <__data_size+0x23d>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <__data_size+0x23d>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <__data_size+0x261>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <__data_size+0x193>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <__data_size+0x1ed>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <__data_size+0x219>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <__data_size+0x61>
	...

000003dc <button_pressed>:
static struct gpio_callback button_cb_data;

/* Define a callback function. It is like an ISR (and runs in the cotext of an ISR) */
/* that is called when the button is pressed */
void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
     3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     3e0:	491d      	ldr	r1, [pc, #116]	; (458 <CONFIG_FLASH_SIZE+0x58>)
     3e2:	4c1e      	ldr	r4, [pc, #120]	; (45c <CONFIG_FLASH_SIZE+0x5c>)
	int i=0;
	/* Identify the button(s) that was(ere) hit*/
	for(i=0; i<sizeof(buttons_pins); i++){		
     3e4:	2300      	movs	r3, #0
			else if(i==6){
				eventos = SEL;
			}
			/* Return */
			else if(i==7){
				eventos = RET;
     3e6:	2508      	movs	r5, #8
				eventos = SEL;
     3e8:	2607      	movs	r6, #7
				eventos = DOWN;
     3ea:	2706      	movs	r7, #6
				eventos = UP;
     3ec:	f04f 0c05 	mov.w	ip, #5
				eventos = ADD10;
     3f0:	f04f 0e04 	mov.w	lr, #4
				eventos = ADD5;
     3f4:	f04f 0803 	mov.w	r8, #3
				eventos = ADD2;
     3f8:	f04f 0902 	mov.w	r9, #2
				eventos = ADD1;
     3fc:	f04f 0a01 	mov.w	sl, #1
		if(BIT(buttons_pins[i]) & pins) {
     400:	f814 0b01 	ldrb.w	r0, [r4], #1
     404:	fa22 f000 	lsr.w	r0, r2, r0
     408:	07c0      	lsls	r0, r0, #31
     40a:	d502      	bpl.n	412 <CONFIG_FLASH_SIZE+0x12>
			if(i==0){
     40c:	b933      	cbnz	r3, 41c <CONFIG_FLASH_SIZE+0x1c>
				eventos = ADD1;
     40e:	f881 a000 	strb.w	sl, [r1]
	for(i=0; i<sizeof(buttons_pins); i++){		
     412:	3301      	adds	r3, #1
     414:	2b08      	cmp	r3, #8
     416:	d1f3      	bne.n	400 <CONFIG_FLASH_SIZE>
			else{
				eventos = NONE;
			}
		}
	} 
}
     418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			else if(i==1){
     41c:	2b01      	cmp	r3, #1
     41e:	d102      	bne.n	426 <CONFIG_FLASH_SIZE+0x26>
				eventos = ADD2;
     420:	f881 9000 	strb.w	r9, [r1]
     424:	e7f5      	b.n	412 <CONFIG_FLASH_SIZE+0x12>
			else if(i==2){
     426:	2b02      	cmp	r3, #2
     428:	d102      	bne.n	430 <CONFIG_FLASH_SIZE+0x30>
				eventos = ADD5;
     42a:	f881 8000 	strb.w	r8, [r1]
     42e:	e7f0      	b.n	412 <CONFIG_FLASH_SIZE+0x12>
			else if(i==3){
     430:	2b03      	cmp	r3, #3
     432:	d102      	bne.n	43a <CONFIG_FLASH_SIZE+0x3a>
				eventos = ADD10;
     434:	f881 e000 	strb.w	lr, [r1]
     438:	e7eb      	b.n	412 <CONFIG_FLASH_SIZE+0x12>
			else if(i==4){
     43a:	2b04      	cmp	r3, #4
     43c:	d102      	bne.n	444 <CONFIG_FLASH_SIZE+0x44>
				eventos = UP;
     43e:	f881 c000 	strb.w	ip, [r1]
     442:	e7e6      	b.n	412 <CONFIG_FLASH_SIZE+0x12>
			else if(i==5){
     444:	2b05      	cmp	r3, #5
     446:	d101      	bne.n	44c <CONFIG_FLASH_SIZE+0x4c>
				eventos = DOWN;
     448:	700f      	strb	r7, [r1, #0]
     44a:	e7e2      	b.n	412 <CONFIG_FLASH_SIZE+0x12>
			else if(i==6){
     44c:	2b06      	cmp	r3, #6
				eventos = SEL;
     44e:	bf0c      	ite	eq
     450:	700e      	strbeq	r6, [r1, #0]
				eventos = RET;
     452:	700d      	strbne	r5, [r1, #0]
     454:	e7dd      	b.n	412 <CONFIG_FLASH_SIZE+0x12>
     456:	bf00      	nop
     458:	20000bc9 	.word	0x20000bc9
     45c:	00005abe 	.word	0x00005abe

00000460 <main>:


void main(void)
{
     460:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
     464:	4f8f      	ldr	r7, [pc, #572]	; (6a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1bc>)
     466:	4d90      	ldr	r5, [pc, #576]	; (6a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c0>)
     468:	f8d7 9008 	ldr.w	r9, [r7, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     46c:	f8df a23c 	ldr.w	sl, [pc, #572]	; 6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     470:	46a8      	mov	r8, r5
    int i,ret;
    uint32_t pinmask = 0; /* Mask for setting the pins that shall generate interrupts */

	/* Configure the GPIO pins - buttons 1-4 + IOPINS 2,4,28 and 29 for input*/
    for(i=0; i<sizeof(buttons_pins); i++) {
     472:	2400      	movs	r4, #0
		ret = gpio_pin_configure(gpio0_dev, buttons_pins[i], GPIO_INPUT | GPIO_PULL_UP);
     474:	f818 bb01 	ldrb.w	fp, [r8], #1
	struct gpio_driver_data *data =
     478:	693e      	ldr	r6, [r7, #16]
	return api->pin_configure(port, pin, flags);
     47a:	488a      	ldr	r0, [pc, #552]	; (6a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1bc>)
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     47c:	2301      	movs	r3, #1
     47e:	fa03 f20b 	lsl.w	r2, r3, fp
     482:	6833      	ldr	r3, [r6, #0]
     484:	ea23 0302 	bic.w	r3, r3, r2
     488:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
     48a:	4652      	mov	r2, sl
     48c:	f8d9 3000 	ldr.w	r3, [r9]
     490:	4659      	mov	r1, fp
     492:	4798      	blx	r3
		if (ret < 0) {
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,buttons_pins[i], ret);
     494:	3401      	adds	r4, #1
		if (ret < 0) {
     496:	1e03      	subs	r3, r0, #0
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,buttons_pins[i], ret);
     498:	465a      	mov	r2, fp
     49a:	4621      	mov	r1, r4
		if (ret < 0) {
     49c:	da05      	bge.n	4aa <main+0x4a>
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,buttons_pins[i], ret);
     49e:	4884      	ldr	r0, [pc, #528]	; (6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>)

    }



     4a0:	b001      	add	sp, #4
     4a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			printk("Error: gpio_pin_interrupt_configure failed for button %d / pin %d, error:%d", i+1, buttons_pins[i], ret);
     4a6:	f004 ba1c 	b.w	48e2 <printk>
			printk("Success: gpio_pin_configure for button %d/pin %d\n\r", i+1,buttons_pins[i]);
     4aa:	4882      	ldr	r0, [pc, #520]	; (6b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1cc>)
     4ac:	f004 fa19 	bl	48e2 <printk>
    for(i=0; i<sizeof(buttons_pins); i++) {
     4b0:	2c08      	cmp	r4, #8
     4b2:	d1df      	bne.n	474 <main+0x14>
     4b4:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 6a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c0>
	const struct gpio_driver_api *api =
     4b8:	68bf      	ldr	r7, [r7, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     4ba:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 6a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1bc>
	for(i=0; i<sizeof(buttons_pins); i++) {
     4be:	2400      	movs	r4, #0
		ret = gpio_pin_interrupt_configure(gpio0_dev, buttons_pins[i], GPIO_INT_EDGE_TO_ACTIVE );
     4c0:	f81a 8b01 	ldrb.w	r8, [sl], #1
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     4c4:	f04f 0901 	mov.w	r9, #1
     4c8:	6833      	ldr	r3, [r6, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     4ca:	f8d7 c018 	ldr.w	ip, [r7, #24]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     4ce:	fa09 f208 	lsl.w	r2, r9, r8
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
     4d2:	421a      	tst	r2, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
     4d4:	bf0c      	ite	eq
     4d6:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
     4da:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
     4de:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     4e2:	4641      	mov	r1, r8
     4e4:	4658      	mov	r0, fp
     4e6:	47e0      	blx	ip
		if (ret < 0) {
     4e8:	1e03      	subs	r3, r0, #0
			printk("Error: gpio_pin_interrupt_configure failed for button %d / pin %d, error:%d", i+1, buttons_pins[i], ret);
     4ea:	444c      	add	r4, r9
		if (ret < 0) {
     4ec:	da03      	bge.n	4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
			printk("Error: gpio_pin_interrupt_configure failed for button %d / pin %d, error:%d", i+1, buttons_pins[i], ret);
     4ee:	4872      	ldr	r0, [pc, #456]	; (6b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1d0>)
     4f0:	4642      	mov	r2, r8
     4f2:	4621      	mov	r1, r4
     4f4:	e7d4      	b.n	4a0 <main+0x40>
	for(i=0; i<sizeof(buttons_pins); i++) {
     4f6:	2c08      	cmp	r4, #8
     4f8:	d1e2      	bne.n	4c0 <main+0x60>
	pinmask=0;
     4fa:	2300      	movs	r3, #0
	for(i=0; i<sizeof(buttons_pins); i++) {
     4fc:	461a      	mov	r2, r3
		pinmask |= BIT(buttons_pins[i]);
     4fe:	f815 1b01 	ldrb.w	r1, [r5], #1
	for(i=0; i<sizeof(buttons_pins); i++) {
     502:	3201      	adds	r2, #1
		pinmask |= BIT(buttons_pins[i]);
     504:	fa09 f101 	lsl.w	r1, r9, r1
	for(i=0; i<sizeof(buttons_pins); i++) {
     508:	2a08      	cmp	r2, #8
		pinmask |= BIT(buttons_pins[i]);
     50a:	ea43 0301 	orr.w	r3, r3, r1
	for(i=0; i<sizeof(buttons_pins); i++) {
     50e:	d1f6      	bne.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     510:	496a      	ldr	r1, [pc, #424]	; (6bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1d4>)
     512:	4a6b      	ldr	r2, [pc, #428]	; (6c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1d8>)
	callback->pin_mask = pin_mask;
     514:	e9c1 2301 	strd	r2, r3, [r1, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     518:	69fb      	ldr	r3, [r7, #28]
     51a:	b113      	cbz	r3, 522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     51c:	4861      	ldr	r0, [pc, #388]	; (6a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1bc>)
     51e:	2201      	movs	r2, #1
     520:	4798      	blx	r3
        switch(estado){
     522:	4e68      	ldr	r6, [pc, #416]	; (6c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1dc>)
				if(movie_idx < 0 || movie_idx >= num_movie){
     524:	4c68      	ldr	r4, [pc, #416]	; (6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>)
        switch(estado){
     526:	7833      	ldrb	r3, [r6, #0]
     528:	2b03      	cmp	r3, #3
     52a:	d8fc      	bhi.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
     52c:	e8df f003 	tbb	[pc, r3]
     530:	2b5b8b02 	.word	0x2b5b8b02
				if (eventos == ADD1 || eventos == ADD2 || eventos == ADD5 || eventos == ADD10){
     534:	4d65      	ldr	r5, [pc, #404]	; (6cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e4>)
     536:	782b      	ldrb	r3, [r5, #0]
     538:	2b01      	cmp	r3, #1
     53a:	d008      	beq.n	54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
     53c:	782b      	ldrb	r3, [r5, #0]
     53e:	2b02      	cmp	r3, #2
     540:	d005      	beq.n	54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
     542:	782b      	ldrb	r3, [r5, #0]
     544:	2b03      	cmp	r3, #3
     546:	d002      	beq.n	54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
     548:	782b      	ldrb	r3, [r5, #0]
     54a:	2b04      	cmp	r3, #4
     54c:	d102      	bne.n	554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>
					estado = UPDATE_CREDIT;
     54e:	2303      	movs	r3, #3
					estado = MOVIES;
     550:	7033      	strb	r3, [r6, #0]
     552:	e7e8      	b.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
				else if(eventos == RET){
     554:	782b      	ldrb	r3, [r5, #0]
     556:	2b08      	cmp	r3, #8
     558:	d108      	bne.n	56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>
					printk("%d EUR return\n",Credito);
     55a:	4f5d      	ldr	r7, [pc, #372]	; (6d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e8>)
     55c:	485d      	ldr	r0, [pc, #372]	; (6d4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ec>)
     55e:	6839      	ldr	r1, [r7, #0]
     560:	f004 f9bf 	bl	48e2 <printk>
					Credito = 0;
     564:	2300      	movs	r3, #0
     566:	603b      	str	r3, [r7, #0]
				eventos = NONE;
     568:	702b      	strb	r3, [r5, #0]
				break;
     56a:	e7dc      	b.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
				else if(eventos == UP || eventos == DOWN){
     56c:	782b      	ldrb	r3, [r5, #0]
     56e:	2b05      	cmp	r3, #5
     570:	d002      	beq.n	578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>
     572:	782b      	ldrb	r3, [r5, #0]
     574:	2b06      	cmp	r3, #6
     576:	d101      	bne.n	57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>
					estado = MOVIES;
     578:	2302      	movs	r3, #2
     57a:	e7e9      	b.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
				else if(eventos == SEL){
     57c:	782b      	ldrb	r3, [r5, #0]
     57e:	2b07      	cmp	r3, #7
     580:	d1d1      	bne.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
					estado = PAY_CHECK;
     582:	2301      	movs	r3, #1
     584:	e7e4      	b.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
				if (eventos == ADD1){
     586:	4d51      	ldr	r5, [pc, #324]	; (6cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e4>)
     588:	782b      	ldrb	r3, [r5, #0]
     58a:	2b01      	cmp	r3, #1
     58c:	d107      	bne.n	59e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb6>
					Credito += 1;
     58e:	4b50      	ldr	r3, [pc, #320]	; (6d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e8>)
					printk("Credito Atual: %d EUR\n\r",Credito);
     590:	4851      	ldr	r0, [pc, #324]	; (6d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1f0>)
					Credito += 1;
     592:	681a      	ldr	r2, [r3, #0]
     594:	3201      	adds	r2, #1
     596:	601a      	str	r2, [r3, #0]
					printk("Credito Atual: %d EUR\n\r",Credito);
     598:	6819      	ldr	r1, [r3, #0]
     59a:	f004 f9a2 	bl	48e2 <printk>
				if (eventos == ADD2){
     59e:	782b      	ldrb	r3, [r5, #0]
     5a0:	2b02      	cmp	r3, #2
     5a2:	d107      	bne.n	5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>
					Credito += 2;
     5a4:	4b4a      	ldr	r3, [pc, #296]	; (6d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e8>)
					printk("Credito Atual: %d EUR\n\r",Credito);
     5a6:	484c      	ldr	r0, [pc, #304]	; (6d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1f0>)
					Credito += 2;
     5a8:	681a      	ldr	r2, [r3, #0]
     5aa:	3202      	adds	r2, #2
     5ac:	601a      	str	r2, [r3, #0]
					printk("Credito Atual: %d EUR\n\r",Credito);
     5ae:	6819      	ldr	r1, [r3, #0]
     5b0:	f004 f997 	bl	48e2 <printk>
				if (eventos == ADD5){
     5b4:	782b      	ldrb	r3, [r5, #0]
     5b6:	2b03      	cmp	r3, #3
     5b8:	d107      	bne.n	5ca <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe2>
					Credito += 5;
     5ba:	4b45      	ldr	r3, [pc, #276]	; (6d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e8>)
					printk("Credito Atual: %d EUR\n\r",Credito);
     5bc:	4846      	ldr	r0, [pc, #280]	; (6d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1f0>)
					Credito += 5;
     5be:	681a      	ldr	r2, [r3, #0]
     5c0:	3205      	adds	r2, #5
     5c2:	601a      	str	r2, [r3, #0]
					printk("Credito Atual: %d EUR\n\r",Credito);
     5c4:	6819      	ldr	r1, [r3, #0]
     5c6:	f004 f98c 	bl	48e2 <printk>
				if (eventos == ADD10){
     5ca:	782b      	ldrb	r3, [r5, #0]
     5cc:	2b04      	cmp	r3, #4
     5ce:	d107      	bne.n	5e0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf8>
					Credito += 10;
     5d0:	4b3f      	ldr	r3, [pc, #252]	; (6d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e8>)
					printk("Credito Atual: %d EUR\n\r",Credito);
     5d2:	4841      	ldr	r0, [pc, #260]	; (6d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1f0>)
					Credito += 10;
     5d4:	681a      	ldr	r2, [r3, #0]
     5d6:	320a      	adds	r2, #10
     5d8:	601a      	str	r2, [r3, #0]
					printk("Credito Atual: %d EUR\n\r",Credito);
     5da:	6819      	ldr	r1, [r3, #0]
					printk("Saldo: %d EUR\n",Credito);
     5dc:	f004 f981 	bl	48e2 <printk>
				estado = MENU;
     5e0:	2300      	movs	r3, #0
     5e2:	7033      	strb	r3, [r6, #0]
     5e4:	e7c0      	b.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
				if(eventos == UP){
     5e6:	4d39      	ldr	r5, [pc, #228]	; (6cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e4>)
     5e8:	4f39      	ldr	r7, [pc, #228]	; (6d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e8>)
     5ea:	782b      	ldrb	r3, [r5, #0]
     5ec:	483b      	ldr	r0, [pc, #236]	; (6dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1f4>)
     5ee:	493c      	ldr	r1, [pc, #240]	; (6e0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1f8>)
     5f0:	4a3c      	ldr	r2, [pc, #240]	; (6e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fc>)
     5f2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 6e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x200>
     5f6:	2b05      	cmp	r3, #5
     5f8:	d107      	bne.n	60a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x122>
					movie_idx = (movie_idx+1)%(num_movie);
     5fa:	6823      	ldr	r3, [r4, #0]
     5fc:	6800      	ldr	r0, [r0, #0]
     5fe:	3301      	adds	r3, #1
					movie_idx = (movie_idx-1)%(num_movie);
     600:	fb93 fcf0 	sdiv	ip, r3, r0
     604:	fb00 331c 	mls	r3, r0, ip, r3
     608:	e007      	b.n	61a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x132>
				else if(eventos == DOWN && movie_idx == -1){
     60a:	782b      	ldrb	r3, [r5, #0]
     60c:	2b06      	cmp	r3, #6
     60e:	d116      	bne.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     610:	6823      	ldr	r3, [r4, #0]
     612:	3301      	adds	r3, #1
     614:	d113      	bne.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
					movie_idx = num_movie -1;
     616:	6803      	ldr	r3, [r0, #0]
     618:	3b01      	subs	r3, #1
					movie_idx = (movie_idx-1)%(num_movie);
     61a:	6023      	str	r3, [r4, #0]
					printk("Movie %c, %dH00 session \n", Movie[movie_idx],Hora[movie_idx]);
     61c:	6823      	ldr	r3, [r4, #0]
     61e:	4833      	ldr	r0, [pc, #204]	; (6ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x204>)
     620:	5cc9      	ldrb	r1, [r1, r3]
     622:	6823      	ldr	r3, [r4, #0]
     624:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     628:	f004 f95b 	bl	48e2 <printk>
					printk("Custo: %d EUR\n", Preco[movie_idx]);
     62c:	6823      	ldr	r3, [r4, #0]
     62e:	4830      	ldr	r0, [pc, #192]	; (6f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x208>)
     630:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
     634:	f004 f955 	bl	48e2 <printk>
					printk("Saldo: %d EUR\n",Credito);
     638:	6839      	ldr	r1, [r7, #0]
     63a:	482e      	ldr	r0, [pc, #184]	; (6f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20c>)
     63c:	e7ce      	b.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
					movie_idx = (movie_idx-1)%(num_movie);
     63e:	6823      	ldr	r3, [r4, #0]
     640:	6800      	ldr	r0, [r0, #0]
     642:	3b01      	subs	r3, #1
     644:	e7dc      	b.n	600 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x118>
				if(movie_idx < 0 || movie_idx >= num_movie){
     646:	6823      	ldr	r3, [r4, #0]
     648:	2b00      	cmp	r3, #0
     64a:	db04      	blt.n	656 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16e>
     64c:	4b23      	ldr	r3, [pc, #140]	; (6dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1f4>)
     64e:	6822      	ldr	r2, [r4, #0]
     650:	681b      	ldr	r3, [r3, #0]
     652:	429a      	cmp	r2, r3
     654:	db03      	blt.n	65e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x176>
					printk("Não tem nenhum filme selecionado! \n");
     656:	4828      	ldr	r0, [pc, #160]	; (6f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x210>)
					printk("Not enough credit. Ticket not issued! \n");
     658:	f004 f943 	bl	48e2 <printk>
     65c:	e01b      	b.n	696 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ae>
				else if(Credito >= Preco[movie_idx]){
     65e:	6823      	ldr	r3, [r4, #0]
     660:	4f21      	ldr	r7, [pc, #132]	; (6e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x200>)
     662:	4d1b      	ldr	r5, [pc, #108]	; (6d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e8>)
     664:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
     668:	682b      	ldr	r3, [r5, #0]
     66a:	429a      	cmp	r2, r3
     66c:	dc18      	bgt.n	6a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b8>
					printk("Ticket for Movie %c, session %dH00 issued\n",Movie[movie_idx],Hora[movie_idx]);
     66e:	6823      	ldr	r3, [r4, #0]
     670:	4a1b      	ldr	r2, [pc, #108]	; (6e0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1f8>)
     672:	4822      	ldr	r0, [pc, #136]	; (6fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x214>)
     674:	5cd1      	ldrb	r1, [r2, r3]
     676:	4b1b      	ldr	r3, [pc, #108]	; (6e4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fc>)
     678:	6822      	ldr	r2, [r4, #0]
     67a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     67e:	f004 f930 	bl	48e2 <printk>
					Credito = Credito - Preco[movie_idx];
     682:	682b      	ldr	r3, [r5, #0]
     684:	6822      	ldr	r2, [r4, #0]
					printk("Remaining credit: %d EUR\n",Credito);
     686:	481e      	ldr	r0, [pc, #120]	; (700 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x218>)
					Credito = Credito - Preco[movie_idx];
     688:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
     68c:	1a9b      	subs	r3, r3, r2
     68e:	602b      	str	r3, [r5, #0]
					printk("Remaining credit: %d EUR\n",Credito);
     690:	6829      	ldr	r1, [r5, #0]
     692:	f004 f926 	bl	48e2 <printk>
				eventos = NONE;
     696:	4a0d      	ldr	r2, [pc, #52]	; (6cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e4>)
				estado = MENU;
     698:	2300      	movs	r3, #0
     69a:	7033      	strb	r3, [r6, #0]
				eventos = NONE;
     69c:	7013      	strb	r3, [r2, #0]
				break;
     69e:	e742      	b.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
					printk("Not enough credit. Ticket not issued! \n");
     6a0:	4818      	ldr	r0, [pc, #96]	; (704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>)
     6a2:	e7d9      	b.n	658 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x170>
     6a4:	00005518 	.word	0x00005518
     6a8:	00005abe 	.word	0x00005abe
     6ac:	00010010 	.word	0x00010010
     6b0:	0000590c 	.word	0x0000590c
     6b4:	0000594e 	.word	0x0000594e
     6b8:	00005981 	.word	0x00005981
     6bc:	2000030c 	.word	0x2000030c
     6c0:	000003dd 	.word	0x000003dd
     6c4:	20000bc8 	.word	0x20000bc8
     6c8:	20000028 	.word	0x20000028
     6cc:	20000bc9 	.word	0x20000bc9
     6d0:	20000308 	.word	0x20000308
     6d4:	000059cd 	.word	0x000059cd
     6d8:	000059dc 	.word	0x000059dc
     6dc:	2000002c 	.word	0x2000002c
     6e0:	20000170 	.word	0x20000170
     6e4:	20000000 	.word	0x20000000
     6e8:	20000014 	.word	0x20000014
     6ec:	000059f4 	.word	0x000059f4
     6f0:	00005a0e 	.word	0x00005a0e
     6f4:	00005a1d 	.word	0x00005a1d
     6f8:	00005a2c 	.word	0x00005a2c
     6fc:	00005a51 	.word	0x00005a51
     700:	00005a7c 	.word	0x00005a7c
     704:	00005a96 	.word	0x00005a96

00000708 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     708:	680b      	ldr	r3, [r1, #0]
     70a:	3301      	adds	r3, #1
     70c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     70e:	4b01      	ldr	r3, [pc, #4]	; (714 <char_out+0xc>)
     710:	681b      	ldr	r3, [r3, #0]
     712:	4718      	bx	r3
     714:	20000030 	.word	0x20000030

00000718 <__printk_hook_install>:
	_char_out = fn;
     718:	4b01      	ldr	r3, [pc, #4]	; (720 <__printk_hook_install+0x8>)
     71a:	6018      	str	r0, [r3, #0]
}
     71c:	4770      	bx	lr
     71e:	bf00      	nop
     720:	20000030 	.word	0x20000030

00000724 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     724:	b507      	push	{r0, r1, r2, lr}
     726:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     728:	2100      	movs	r1, #0
{
     72a:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     72c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     72e:	4803      	ldr	r0, [pc, #12]	; (73c <vprintk+0x18>)
     730:	a901      	add	r1, sp, #4
     732:	f000 f8e5 	bl	900 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     736:	b003      	add	sp, #12
     738:	f85d fb04 	ldr.w	pc, [sp], #4
     73c:	00000709 	.word	0x00000709

00000740 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     744:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     748:	f019 0808 	ands.w	r8, r9, #8
{
     74c:	4604      	mov	r4, r0
     74e:	4693      	mov	fp, r2
	if (processing) {
     750:	d00d      	beq.n	76e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     752:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     754:	bf0c      	ite	eq
     756:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     75a:	f049 0920 	orrne.w	r9, r9, #32
     75e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     762:	f38b 8811 	msr	BASEPRI, fp
     766:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     76a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     76e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     772:	2902      	cmp	r1, #2
     774:	d107      	bne.n	786 <process_event+0x46>
			evt = process_recheck(mgr);
     776:	4620      	mov	r0, r4
     778:	f004 f8c0 	bl	48fc <process_recheck>
		if (evt == EVT_NOP) {
     77c:	2800      	cmp	r0, #0
     77e:	d0f0      	beq.n	762 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     780:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     782:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     784:	d14e      	bne.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
			res = mgr->last_res;
     786:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     788:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     78a:	2f00      	cmp	r7, #0
     78c:	da15      	bge.n	7ba <process_event+0x7a>
		*clients = mgr->clients;
     78e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     790:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     794:	e9c4 8800 	strd	r8, r8, [r4]
     798:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     79c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     79e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     7a0:	8b21      	ldrh	r1, [r4, #24]
     7a2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     7a6:	45ca      	cmp	sl, r9
     7a8:	d002      	beq.n	7b0 <process_event+0x70>
		if (do_monitors
     7aa:	68a3      	ldr	r3, [r4, #8]
     7ac:	2b00      	cmp	r3, #0
     7ae:	d15a      	bne.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
		    || !sys_slist_is_empty(&clients)
     7b0:	b90d      	cbnz	r5, 7b6 <process_event+0x76>
		    || (transit != NULL)) {
     7b2:	2e00      	cmp	r6, #0
     7b4:	d071      	beq.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     7b6:	2300      	movs	r3, #0
     7b8:	e056      	b.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     7ba:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     7be:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     7c0:	2a01      	cmp	r2, #1
     7c2:	d81e      	bhi.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7c4:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     7c8:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     7ca:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7cc:	b289      	uxth	r1, r1
     7ce:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     7d2:	d10a      	bne.n	7ea <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     7d4:	b13d      	cbz	r5, 7e6 <process_event+0xa6>
     7d6:	8b63      	ldrh	r3, [r4, #26]
     7d8:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     7da:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     7dc:	3301      	adds	r3, #1
     7de:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     7e0:	2a00      	cmp	r2, #0
     7e2:	d1fa      	bne.n	7da <process_event+0x9a>
     7e4:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7e6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     7ea:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     7ec:	4620      	mov	r0, r4
     7ee:	f004 f885 	bl	48fc <process_recheck>
     7f2:	4606      	mov	r6, r0
     7f4:	2800      	cmp	r0, #0
     7f6:	d0d3      	beq.n	7a0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     7f8:	8b23      	ldrh	r3, [r4, #24]
     7fa:	f043 0320 	orr.w	r3, r3, #32
     7fe:	8323      	strh	r3, [r4, #24]
     800:	e7cd      	b.n	79e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     802:	2b04      	cmp	r3, #4
     804:	d10c      	bne.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     806:	f021 0107 	bic.w	r1, r1, #7
     80a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     80c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     80e:	4620      	mov	r0, r4
     810:	f004 f874 	bl	48fc <process_recheck>
     814:	4605      	mov	r5, r0
     816:	2800      	cmp	r0, #0
     818:	d0c1      	beq.n	79e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     81a:	f041 0120 	orr.w	r1, r1, #32
     81e:	8321      	strh	r1, [r4, #24]
     820:	2500      	movs	r5, #0
     822:	e7bc      	b.n	79e <process_event+0x5e>
		} else if (evt == EVT_START) {
     824:	2803      	cmp	r0, #3
     826:	d109      	bne.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
			transit = mgr->transitions->start;
     828:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     82a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     82e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     830:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     834:	8323      	strh	r3, [r4, #24]
}
     836:	2500      	movs	r5, #0
		res = 0;
     838:	462f      	mov	r7, r5
     83a:	e7b1      	b.n	7a0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     83c:	2804      	cmp	r0, #4
     83e:	d106      	bne.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
			transit = mgr->transitions->stop;
     840:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     842:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     846:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     848:	f043 0304 	orr.w	r3, r3, #4
     84c:	e7f2      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
		} else if (evt == EVT_RESET) {
     84e:	2805      	cmp	r0, #5
     850:	d106      	bne.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
			transit = mgr->transitions->reset;
     852:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     854:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     858:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     85a:	f043 0305 	orr.w	r3, r3, #5
     85e:	e7e9      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
     860:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     862:	462e      	mov	r6, r5
     864:	e7e8      	b.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
				   && !sys_slist_is_empty(&mgr->monitors);
     866:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     868:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     86c:	8321      	strh	r1, [r4, #24]
     86e:	f38b 8811 	msr	BASEPRI, fp
     872:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     876:	b9fb      	cbnz	r3, 8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
	while (!sys_slist_is_empty(list)) {
     878:	bb85      	cbnz	r5, 8dc <CONFIG_ISR_STACK_SIZE+0xdc>
			if (transit != NULL) {
     87a:	b116      	cbz	r6, 882 <CONFIG_ISR_STACK_SIZE+0x82>
				transit(mgr, transition_complete);
     87c:	491f      	ldr	r1, [pc, #124]	; (8fc <CONFIG_ISR_STACK_SIZE+0xfc>)
     87e:	4620      	mov	r0, r4
     880:	47b0      	blx	r6
	__asm__ volatile(
     882:	f04f 0320 	mov.w	r3, #32
     886:	f3ef 8b11 	mrs	fp, BASEPRI
     88a:	f383 8812 	msr	BASEPRI_MAX, r3
     88e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     892:	8b23      	ldrh	r3, [r4, #24]
     894:	f023 0308 	bic.w	r3, r3, #8
     898:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     89a:	8b23      	ldrh	r3, [r4, #24]
     89c:	06da      	lsls	r2, r3, #27
     89e:	d525      	bpl.n	8ec <CONFIG_ISR_STACK_SIZE+0xec>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     8a0:	f023 0310 	bic.w	r3, r3, #16
     8a4:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     8a6:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     8a8:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     8ac:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     8b0:	2900      	cmp	r1, #0
     8b2:	f47f af5e 	bne.w	772 <process_event+0x32>
out:
     8b6:	e754      	b.n	762 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     8b8:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     8ba:	2900      	cmp	r1, #0
     8bc:	d0dc      	beq.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
	return node->next;
     8be:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     8c2:	f8d1 b004 	ldr.w	fp, [r1, #4]
     8c6:	463b      	mov	r3, r7
     8c8:	4652      	mov	r2, sl
     8ca:	4620      	mov	r0, r4
     8cc:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     8ce:	f1b9 0f00 	cmp.w	r9, #0
     8d2:	d0d1      	beq.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
     8d4:	4649      	mov	r1, r9
     8d6:	f8d9 9000 	ldr.w	r9, [r9]
     8da:	e7f2      	b.n	8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
     8dc:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     8de:	463b      	mov	r3, r7
     8e0:	4652      	mov	r2, sl
     8e2:	4620      	mov	r0, r4
     8e4:	682d      	ldr	r5, [r5, #0]
     8e6:	f004 f825 	bl	4934 <notify_one>
     8ea:	e7c5      	b.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     8ec:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     8f0:	bf1e      	ittt	ne
     8f2:	f023 0320 	bicne.w	r3, r3, #32
     8f6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     8f8:	2102      	movne	r1, #2
     8fa:	e7d5      	b.n	8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
     8fc:	00004961 	.word	0x00004961

00000900 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     904:	b091      	sub	sp, #68	; 0x44
     906:	468b      	mov	fp, r1
     908:	9002      	str	r0, [sp, #8]
     90a:	4692      	mov	sl, r2
     90c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     90e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     910:	f89a 0000 	ldrb.w	r0, [sl]
     914:	b908      	cbnz	r0, 91a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     916:	4628      	mov	r0, r5
     918:	e35f      	b.n	fda <cbvprintf+0x6da>
		if (*fp != '%') {
     91a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     91c:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     920:	d007      	beq.n	932 <cbvprintf+0x32>
			OUTC('%');
     922:	9b02      	ldr	r3, [sp, #8]
     924:	4659      	mov	r1, fp
     926:	4798      	blx	r3
     928:	2800      	cmp	r0, #0
     92a:	f2c0 8356 	blt.w	fda <cbvprintf+0x6da>
     92e:	3501      	adds	r5, #1
			break;
     930:	e212      	b.n	d58 <cbvprintf+0x458>
		} state = {
     932:	2218      	movs	r2, #24
     934:	2100      	movs	r1, #0
     936:	a80a      	add	r0, sp, #40	; 0x28
     938:	f004 f92c 	bl	4b94 <memset>
	if (*sp == '%') {
     93c:	f89a 3001 	ldrb.w	r3, [sl, #1]
     940:	2b25      	cmp	r3, #37	; 0x25
     942:	d078      	beq.n	a36 <cbvprintf+0x136>
     944:	2200      	movs	r2, #0
     946:	4610      	mov	r0, r2
     948:	4696      	mov	lr, r2
     94a:	4694      	mov	ip, r2
     94c:	4616      	mov	r6, r2
     94e:	4639      	mov	r1, r7
		switch (*sp) {
     950:	f817 3b01 	ldrb.w	r3, [r7], #1
     954:	2b2b      	cmp	r3, #43	; 0x2b
     956:	f000 809d 	beq.w	a94 <cbvprintf+0x194>
     95a:	f200 8094 	bhi.w	a86 <cbvprintf+0x186>
     95e:	2b20      	cmp	r3, #32
     960:	f000 809b 	beq.w	a9a <cbvprintf+0x19a>
     964:	2b23      	cmp	r3, #35	; 0x23
     966:	f000 809b 	beq.w	aa0 <cbvprintf+0x1a0>
     96a:	b12e      	cbz	r6, 978 <cbvprintf+0x78>
     96c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     970:	f046 0604 	orr.w	r6, r6, #4
     974:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     978:	f1bc 0f00 	cmp.w	ip, #0
     97c:	d005      	beq.n	98a <cbvprintf+0x8a>
     97e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     982:	f046 0608 	orr.w	r6, r6, #8
     986:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     98a:	f1be 0f00 	cmp.w	lr, #0
     98e:	d005      	beq.n	99c <cbvprintf+0x9c>
     990:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     994:	f046 0610 	orr.w	r6, r6, #16
     998:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     99c:	b128      	cbz	r0, 9aa <cbvprintf+0xaa>
     99e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     9a2:	f040 0020 	orr.w	r0, r0, #32
     9a6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     9aa:	b12a      	cbz	r2, 9b8 <cbvprintf+0xb8>
     9ac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     9b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     9b4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     9b8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     9bc:	f002 0044 	and.w	r0, r2, #68	; 0x44
     9c0:	2844      	cmp	r0, #68	; 0x44
     9c2:	d103      	bne.n	9cc <cbvprintf+0xcc>
		conv->flag_zero = false;
     9c4:	f36f 1286 	bfc	r2, #6, #1
     9c8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     9cc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     9d0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     9d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     9d6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     9da:	d17b      	bne.n	ad4 <cbvprintf+0x1d4>
		conv->width_star = true;
     9dc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9e0:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     9e4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     9e6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     9ea:	781a      	ldrb	r2, [r3, #0]
     9ec:	2a2e      	cmp	r2, #46	; 0x2e
     9ee:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9f2:	bf0c      	ite	eq
     9f4:	2101      	moveq	r1, #1
     9f6:	2100      	movne	r1, #0
     9f8:	f361 0241 	bfi	r2, r1, #1, #1
     9fc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     a00:	d174      	bne.n	aec <cbvprintf+0x1ec>
	if (*sp == '*') {
     a02:	785a      	ldrb	r2, [r3, #1]
     a04:	2a2a      	cmp	r2, #42	; 0x2a
     a06:	d06a      	beq.n	ade <cbvprintf+0x1de>
	++sp;
     a08:	3301      	adds	r3, #1
	size_t val = 0;
     a0a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     a0c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     a0e:	4618      	mov	r0, r3
     a10:	f810 2b01 	ldrb.w	r2, [r0], #1
     a14:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     a18:	2f09      	cmp	r7, #9
     a1a:	f240 808e 	bls.w	b3a <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     a1e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     a22:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     a24:	f3c2 0040 	ubfx	r0, r2, #1, #1
     a28:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     a2c:	f361 0241 	bfi	r2, r1, #1, #1
     a30:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     a34:	e05a      	b.n	aec <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     a36:	f10a 0702 	add.w	r7, sl, #2
     a3a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     a3e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a42:	07d9      	lsls	r1, r3, #31
     a44:	f140 8149 	bpl.w	cda <cbvprintf+0x3da>
			width = va_arg(ap, int);
     a48:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     a4c:	f1b9 0f00 	cmp.w	r9, #0
     a50:	da07      	bge.n	a62 <cbvprintf+0x162>
				conv->flag_dash = true;
     a52:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     a56:	f042 0204 	orr.w	r2, r2, #4
     a5a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     a5e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     a62:	075a      	lsls	r2, r3, #29
     a64:	f140 8142 	bpl.w	cec <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     a68:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     a6c:	f1b8 0f00 	cmp.w	r8, #0
     a70:	f280 8141 	bge.w	cf6 <cbvprintf+0x3f6>
				conv->prec_present = false;
     a74:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a78:	f36f 0341 	bfc	r3, #1, #1
     a7c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     a80:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     a84:	e137      	b.n	cf6 <cbvprintf+0x3f6>
		switch (*sp) {
     a86:	2b2d      	cmp	r3, #45	; 0x2d
     a88:	d00c      	beq.n	aa4 <cbvprintf+0x1a4>
     a8a:	2b30      	cmp	r3, #48	; 0x30
     a8c:	f47f af6d 	bne.w	96a <cbvprintf+0x6a>
			conv->flag_zero = true;
     a90:	2201      	movs	r2, #1
	} while (loop);
     a92:	e75c      	b.n	94e <cbvprintf+0x4e>
			conv->flag_plus = true;
     a94:	f04f 0c01 	mov.w	ip, #1
     a98:	e759      	b.n	94e <cbvprintf+0x4e>
			conv->flag_space = true;
     a9a:	f04f 0e01 	mov.w	lr, #1
     a9e:	e756      	b.n	94e <cbvprintf+0x4e>
			conv->flag_hash = true;
     aa0:	2001      	movs	r0, #1
     aa2:	e754      	b.n	94e <cbvprintf+0x4e>
		switch (*sp) {
     aa4:	2601      	movs	r6, #1
     aa6:	e752      	b.n	94e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     aa8:	fb0c 0202 	mla	r2, ip, r2, r0
     aac:	3a30      	subs	r2, #48	; 0x30
     aae:	4633      	mov	r3, r6
     ab0:	461e      	mov	r6, r3
     ab2:	f816 0b01 	ldrb.w	r0, [r6], #1
     ab6:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     aba:	2f09      	cmp	r7, #9
     abc:	d9f4      	bls.n	aa8 <cbvprintf+0x1a8>
	if (sp != wp) {
     abe:	4299      	cmp	r1, r3
     ac0:	d093      	beq.n	9ea <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     ac2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     ac6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     ac8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     aca:	f362 0141 	bfi	r1, r2, #1, #1
     ace:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     ad2:	e78a      	b.n	9ea <cbvprintf+0xea>
     ad4:	460b      	mov	r3, r1
	size_t val = 0;
     ad6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     ad8:	f04f 0c0a 	mov.w	ip, #10
     adc:	e7e8      	b.n	ab0 <cbvprintf+0x1b0>
		conv->prec_star = true;
     ade:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     ae2:	f042 0204 	orr.w	r2, r2, #4
     ae6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     aea:	3302      	adds	r3, #2
	switch (*sp) {
     aec:	461f      	mov	r7, r3
     aee:	f817 2b01 	ldrb.w	r2, [r7], #1
     af2:	2a6c      	cmp	r2, #108	; 0x6c
     af4:	d041      	beq.n	b7a <cbvprintf+0x27a>
     af6:	d825      	bhi.n	b44 <cbvprintf+0x244>
     af8:	2a68      	cmp	r2, #104	; 0x68
     afa:	d02b      	beq.n	b54 <cbvprintf+0x254>
     afc:	2a6a      	cmp	r2, #106	; 0x6a
     afe:	d046      	beq.n	b8e <cbvprintf+0x28e>
     b00:	2a4c      	cmp	r2, #76	; 0x4c
     b02:	d04c      	beq.n	b9e <cbvprintf+0x29e>
     b04:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     b06:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     b0a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     b0e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     b12:	2a78      	cmp	r2, #120	; 0x78
     b14:	f200 80d9 	bhi.w	cca <cbvprintf+0x3ca>
     b18:	2a57      	cmp	r2, #87	; 0x57
     b1a:	d84d      	bhi.n	bb8 <cbvprintf+0x2b8>
     b1c:	2a41      	cmp	r2, #65	; 0x41
     b1e:	d003      	beq.n	b28 <cbvprintf+0x228>
     b20:	3a45      	subs	r2, #69	; 0x45
     b22:	2a02      	cmp	r2, #2
     b24:	f200 80d1 	bhi.w	cca <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     b28:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     b2c:	2204      	movs	r2, #4
     b2e:	f362 0302 	bfi	r3, r2, #0, #3
     b32:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     b36:	2301      	movs	r3, #1
			break;
     b38:	e09e      	b.n	c78 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     b3a:	fb06 2101 	mla	r1, r6, r1, r2
     b3e:	3930      	subs	r1, #48	; 0x30
     b40:	4603      	mov	r3, r0
     b42:	e764      	b.n	a0e <cbvprintf+0x10e>
	switch (*sp) {
     b44:	2a74      	cmp	r2, #116	; 0x74
     b46:	d026      	beq.n	b96 <cbvprintf+0x296>
     b48:	2a7a      	cmp	r2, #122	; 0x7a
     b4a:	d1db      	bne.n	b04 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     b4c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     b50:	2206      	movs	r2, #6
     b52:	e00d      	b.n	b70 <cbvprintf+0x270>
		if (*++sp == 'h') {
     b54:	785a      	ldrb	r2, [r3, #1]
     b56:	2a68      	cmp	r2, #104	; 0x68
     b58:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b5c:	d106      	bne.n	b6c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     b5e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     b60:	f361 02c6 	bfi	r2, r1, #3, #4
     b64:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     b68:	1c9f      	adds	r7, r3, #2
     b6a:	e7cc      	b.n	b06 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     b6c:	4613      	mov	r3, r2
     b6e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     b70:	f362 03c6 	bfi	r3, r2, #3, #4
     b74:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     b78:	e7c5      	b.n	b06 <cbvprintf+0x206>
		if (*++sp == 'l') {
     b7a:	785a      	ldrb	r2, [r3, #1]
     b7c:	2a6c      	cmp	r2, #108	; 0x6c
     b7e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b82:	d101      	bne.n	b88 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     b84:	2104      	movs	r1, #4
     b86:	e7eb      	b.n	b60 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     b88:	4613      	mov	r3, r2
     b8a:	2203      	movs	r2, #3
     b8c:	e7f0      	b.n	b70 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     b8e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     b92:	2205      	movs	r2, #5
     b94:	e7ec      	b.n	b70 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     b96:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     b9a:	2207      	movs	r2, #7
     b9c:	e7e8      	b.n	b70 <cbvprintf+0x270>
		conv->unsupported = true;
     b9e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     ba2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     ba6:	f023 0302 	bic.w	r3, r3, #2
     baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     bae:	f043 0302 	orr.w	r3, r3, #2
     bb2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     bb6:	e7a6      	b.n	b06 <cbvprintf+0x206>
	switch (conv->specifier) {
     bb8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     bbc:	2920      	cmp	r1, #32
     bbe:	f200 8084 	bhi.w	cca <cbvprintf+0x3ca>
     bc2:	a001      	add	r0, pc, #4	; (adr r0, bc8 <cbvprintf+0x2c8>)
     bc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     bc8:	00000c8d 	.word	0x00000c8d
     bcc:	00000ccb 	.word	0x00000ccb
     bd0:	00000ccb 	.word	0x00000ccb
     bd4:	00000ccb 	.word	0x00000ccb
     bd8:	00000ccb 	.word	0x00000ccb
     bdc:	00000ccb 	.word	0x00000ccb
     be0:	00000ccb 	.word	0x00000ccb
     be4:	00000ccb 	.word	0x00000ccb
     be8:	00000ccb 	.word	0x00000ccb
     bec:	00000b29 	.word	0x00000b29
     bf0:	00000ccb 	.word	0x00000ccb
     bf4:	00000c8d 	.word	0x00000c8d
     bf8:	00000c4d 	.word	0x00000c4d
     bfc:	00000b29 	.word	0x00000b29
     c00:	00000b29 	.word	0x00000b29
     c04:	00000b29 	.word	0x00000b29
     c08:	00000ccb 	.word	0x00000ccb
     c0c:	00000c4d 	.word	0x00000c4d
     c10:	00000ccb 	.word	0x00000ccb
     c14:	00000ccb 	.word	0x00000ccb
     c18:	00000ccb 	.word	0x00000ccb
     c1c:	00000ccb 	.word	0x00000ccb
     c20:	00000c95 	.word	0x00000c95
     c24:	00000c8d 	.word	0x00000c8d
     c28:	00000cb1 	.word	0x00000cb1
     c2c:	00000ccb 	.word	0x00000ccb
     c30:	00000ccb 	.word	0x00000ccb
     c34:	00000cb1 	.word	0x00000cb1
     c38:	00000ccb 	.word	0x00000ccb
     c3c:	00000c8d 	.word	0x00000c8d
     c40:	00000ccb 	.word	0x00000ccb
     c44:	00000ccb 	.word	0x00000ccb
     c48:	00000c8d 	.word	0x00000c8d
		conv->specifier_cat = SPECIFIER_SINT;
     c4c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     c50:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     c52:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     c56:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     c5a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     c5c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     c60:	bf02      	ittt	eq
     c62:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     c66:	f041 0101 	orreq.w	r1, r1, #1
     c6a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     c6e:	2a63      	cmp	r2, #99	; 0x63
     c70:	d131      	bne.n	cd6 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     c72:	3b00      	subs	r3, #0
     c74:	bf18      	it	ne
     c76:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     c78:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     c7c:	f3c2 0140 	ubfx	r1, r2, #1, #1
     c80:	430b      	orrs	r3, r1
     c82:	f363 0241 	bfi	r2, r3, #1, #1
     c86:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     c8a:	e6d8      	b.n	a3e <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     c8c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     c90:	2002      	movs	r0, #2
     c92:	e7de      	b.n	c52 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     c94:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     c98:	f003 0378 	and.w	r3, r3, #120	; 0x78
     c9c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     ca0:	2103      	movs	r1, #3
     ca2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     ca6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     ca8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     cac:	4143      	adcs	r3, r0
     cae:	e7e3      	b.n	c78 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     cb0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     cb4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     cb6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     cba:	f361 0202 	bfi	r2, r1, #0, #3
     cbe:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     cc2:	bf14      	ite	ne
     cc4:	2301      	movne	r3, #1
     cc6:	2300      	moveq	r3, #0
     cc8:	e7d6      	b.n	c78 <cbvprintf+0x378>
		conv->invalid = true;
     cca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     cce:	f043 0301 	orr.w	r3, r3, #1
     cd2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     cd6:	2300      	movs	r3, #0
     cd8:	e7ce      	b.n	c78 <cbvprintf+0x378>
		} else if (conv->width_present) {
     cda:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     cde:	2a00      	cmp	r2, #0
			width = conv->width_value;
     ce0:	bfb4      	ite	lt
     ce2:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     ce6:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     cea:	e6ba      	b.n	a62 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     cec:	079b      	lsls	r3, r3, #30
     cee:	f57f aec7 	bpl.w	a80 <cbvprintf+0x180>
			precision = conv->prec_value;
     cf2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     cf6:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     cfa:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     cfc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     d00:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     d04:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     d08:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     d0a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     d0e:	d138      	bne.n	d82 <cbvprintf+0x482>
			switch (length_mod) {
     d10:	1ecb      	subs	r3, r1, #3
     d12:	2b04      	cmp	r3, #4
     d14:	d822      	bhi.n	d5c <cbvprintf+0x45c>
     d16:	e8df f003 	tbb	[pc, r3]
     d1a:	0903      	.short	0x0903
     d1c:	2109      	.short	0x2109
     d1e:	21          	.byte	0x21
     d1f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     d20:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     d24:	17da      	asrs	r2, r3, #31
     d26:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     d2a:	e006      	b.n	d3a <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
     d2c:	3407      	adds	r4, #7
     d2e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     d32:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     d36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     d3a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     d3e:	f013 0603 	ands.w	r6, r3, #3
     d42:	d056      	beq.n	df2 <cbvprintf+0x4f2>
			OUTS(sp, fp);
     d44:	9802      	ldr	r0, [sp, #8]
     d46:	463b      	mov	r3, r7
     d48:	4652      	mov	r2, sl
     d4a:	4659      	mov	r1, fp
     d4c:	f003 fed1 	bl	4af2 <outs>
     d50:	2800      	cmp	r0, #0
     d52:	f2c0 8142 	blt.w	fda <cbvprintf+0x6da>
     d56:	4405      	add	r5, r0
			continue;
     d58:	46ba      	mov	sl, r7
     d5a:	e5d9      	b.n	910 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     d5c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     d60:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     d62:	ea4f 72e3 	mov.w	r2, r3, asr #31
     d66:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     d6a:	d105      	bne.n	d78 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
     d6c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     d70:	930a      	str	r3, [sp, #40]	; 0x28
     d72:	2300      	movs	r3, #0
     d74:	930b      	str	r3, [sp, #44]	; 0x2c
     d76:	e7e0      	b.n	d3a <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
     d78:	2902      	cmp	r1, #2
     d7a:	d1de      	bne.n	d3a <cbvprintf+0x43a>
				value->sint = (short)value->sint;
     d7c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     d80:	e7d0      	b.n	d24 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     d82:	2b02      	cmp	r3, #2
     d84:	d123      	bne.n	dce <cbvprintf+0x4ce>
			switch (length_mod) {
     d86:	1ecb      	subs	r3, r1, #3
     d88:	2b04      	cmp	r3, #4
     d8a:	d813      	bhi.n	db4 <cbvprintf+0x4b4>
     d8c:	e8df f003 	tbb	[pc, r3]
     d90:	120a0a03 	.word	0x120a0a03
     d94:	12          	.byte	0x12
     d95:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     d96:	6822      	ldr	r2, [r4, #0]
     d98:	920a      	str	r2, [sp, #40]	; 0x28
     d9a:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     d9c:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     d9e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     da0:	4604      	mov	r4, r0
     da2:	e7ca      	b.n	d3a <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
     da4:	1de0      	adds	r0, r4, #7
     da6:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     daa:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     dae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     db2:	e7f5      	b.n	da0 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
     db4:	f854 3b04 	ldr.w	r3, [r4], #4
     db8:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     dba:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     dbc:	f04f 0300 	mov.w	r3, #0
     dc0:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     dc2:	d0d3      	beq.n	d6c <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
     dc4:	2902      	cmp	r1, #2
     dc6:	d1b8      	bne.n	d3a <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
     dc8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     dcc:	e7d0      	b.n	d70 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
     dce:	2b04      	cmp	r3, #4
     dd0:	d109      	bne.n	de6 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
     dd2:	1de3      	adds	r3, r4, #7
     dd4:	f023 0307 	bic.w	r3, r3, #7
     dd8:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
     de0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     de4:	e7a9      	b.n	d3a <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     de6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     de8:	bf04      	itt	eq
     dea:	f854 3b04 	ldreq.w	r3, [r4], #4
     dee:	930a      	streq	r3, [sp, #40]	; 0x28
     df0:	e7a3      	b.n	d3a <cbvprintf+0x43a>
		switch (conv->specifier) {
     df2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     df6:	2878      	cmp	r0, #120	; 0x78
     df8:	d8ae      	bhi.n	d58 <cbvprintf+0x458>
     dfa:	2862      	cmp	r0, #98	; 0x62
     dfc:	d822      	bhi.n	e44 <cbvprintf+0x544>
     dfe:	2825      	cmp	r0, #37	; 0x25
     e00:	f43f ad8f 	beq.w	922 <cbvprintf+0x22>
     e04:	2858      	cmp	r0, #88	; 0x58
     e06:	d1a7      	bne.n	d58 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
     e08:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     e0c:	9300      	str	r3, [sp, #0]
     e0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     e12:	ab04      	add	r3, sp, #16
     e14:	aa0c      	add	r2, sp, #48	; 0x30
     e16:	f003 fe26 	bl	4a66 <encode_uint>
     e1a:	4682      	mov	sl, r0
			if (precision >= 0) {
     e1c:	f1b8 0f00 	cmp.w	r8, #0
     e20:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     e24:	db0c      	blt.n	e40 <cbvprintf+0x540>
				conv->flag_zero = false;
     e26:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     e2a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     e2e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     e32:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     e34:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     e38:	d902      	bls.n	e40 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
     e3a:	eba8 0303 	sub.w	r3, r8, r3
     e3e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     e40:	4680      	mov	r8, r0
     e42:	e03d      	b.n	ec0 <cbvprintf+0x5c0>
		switch (conv->specifier) {
     e44:	3863      	subs	r0, #99	; 0x63
     e46:	2815      	cmp	r0, #21
     e48:	d886      	bhi.n	d58 <cbvprintf+0x458>
     e4a:	a201      	add	r2, pc, #4	; (adr r2, e50 <cbvprintf+0x550>)
     e4c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     e50:	00000ed1 	.word	0x00000ed1
     e54:	00000f35 	.word	0x00000f35
     e58:	00000d59 	.word	0x00000d59
     e5c:	00000d59 	.word	0x00000d59
     e60:	00000d59 	.word	0x00000d59
     e64:	00000d59 	.word	0x00000d59
     e68:	00000f35 	.word	0x00000f35
     e6c:	00000d59 	.word	0x00000d59
     e70:	00000d59 	.word	0x00000d59
     e74:	00000d59 	.word	0x00000d59
     e78:	00000d59 	.word	0x00000d59
     e7c:	00000f8f 	.word	0x00000f8f
     e80:	00000f5d 	.word	0x00000f5d
     e84:	00000f61 	.word	0x00000f61
     e88:	00000d59 	.word	0x00000d59
     e8c:	00000d59 	.word	0x00000d59
     e90:	00000ea9 	.word	0x00000ea9
     e94:	00000d59 	.word	0x00000d59
     e98:	00000f5d 	.word	0x00000f5d
     e9c:	00000d59 	.word	0x00000d59
     ea0:	00000d59 	.word	0x00000d59
     ea4:	00000f5d 	.word	0x00000f5d
			if (precision >= 0) {
     ea8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     eac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     eb0:	db0a      	blt.n	ec8 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
     eb2:	4641      	mov	r1, r8
     eb4:	4650      	mov	r0, sl
     eb6:	f003 fe59 	bl	4b6c <strnlen>
			bpe = bps + len;
     eba:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     ebe:	2600      	movs	r6, #0
		if (bps == NULL) {
     ec0:	f1ba 0f00 	cmp.w	sl, #0
     ec4:	d10c      	bne.n	ee0 <cbvprintf+0x5e0>
     ec6:	e747      	b.n	d58 <cbvprintf+0x458>
				len = strlen(bps);
     ec8:	4650      	mov	r0, sl
     eca:	f003 fe48 	bl	4b5e <strlen>
     ece:	e7f4      	b.n	eba <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ed2:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     ed6:	2600      	movs	r6, #0
			bps = buf;
     ed8:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
     edc:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     ee0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     ee4:	b106      	cbz	r6, ee8 <cbvprintf+0x5e8>
			nj_len += 1U;
     ee6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     ee8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     eec:	06d0      	lsls	r0, r2, #27
     eee:	d568      	bpl.n	fc2 <cbvprintf+0x6c2>
			nj_len += 2U;
     ef0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     ef2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     ef4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     ef6:	bf48      	it	mi
     ef8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     efa:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     efc:	bf48      	it	mi
     efe:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     f00:	f1b9 0f00 	cmp.w	r9, #0
     f04:	dd76      	ble.n	ff4 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
     f06:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     f0a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     f0e:	f3c2 0380 	ubfx	r3, r2, #2, #1
     f12:	9303      	str	r3, [sp, #12]
     f14:	0753      	lsls	r3, r2, #29
     f16:	d46d      	bmi.n	ff4 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
     f18:	0650      	lsls	r0, r2, #25
     f1a:	d561      	bpl.n	fe0 <cbvprintf+0x6e0>
					if (sign != 0) {
     f1c:	b146      	cbz	r6, f30 <cbvprintf+0x630>
						OUTC(sign);
     f1e:	9b02      	ldr	r3, [sp, #8]
     f20:	4659      	mov	r1, fp
     f22:	4630      	mov	r0, r6
     f24:	4798      	blx	r3
     f26:	2800      	cmp	r0, #0
     f28:	db57      	blt.n	fda <cbvprintf+0x6da>
						sign = 0;
     f2a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     f2c:	3501      	adds	r5, #1
						sign = 0;
     f2e:	461e      	mov	r6, r3
					pad = '0';
     f30:	2330      	movs	r3, #48	; 0x30
     f32:	e056      	b.n	fe2 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
     f34:	071e      	lsls	r6, r3, #28
     f36:	d40f      	bmi.n	f58 <cbvprintf+0x658>
				sign = ' ';
     f38:	f013 0610 	ands.w	r6, r3, #16
     f3c:	bf18      	it	ne
     f3e:	2620      	movne	r6, #32
			sint = value->sint;
     f40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     f44:	2b00      	cmp	r3, #0
     f46:	f6bf af5f 	bge.w	e08 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
     f4a:	4252      	negs	r2, r2
     f4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     f50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     f54:	262d      	movs	r6, #45	; 0x2d
     f56:	e757      	b.n	e08 <cbvprintf+0x508>
				sign = '+';
     f58:	262b      	movs	r6, #43	; 0x2b
     f5a:	e7f1      	b.n	f40 <cbvprintf+0x640>
		switch (conv->specifier) {
     f5c:	2600      	movs	r6, #0
     f5e:	e753      	b.n	e08 <cbvprintf+0x508>
			if (value->ptr != NULL) {
     f60:	980a      	ldr	r0, [sp, #40]	; 0x28
     f62:	b340      	cbz	r0, fb6 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     f64:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     f68:	9300      	str	r3, [sp, #0]
     f6a:	aa0c      	add	r2, sp, #48	; 0x30
     f6c:	ab04      	add	r3, sp, #16
     f6e:	2100      	movs	r1, #0
     f70:	f003 fd79 	bl	4a66 <encode_uint>
				conv->altform_0c = true;
     f74:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     f78:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     f7c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     f80:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     f84:	4682      	mov	sl, r0
				conv->altform_0c = true;
     f86:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     f8a:	2600      	movs	r6, #0
				goto prec_int_pad0;
     f8c:	e746      	b.n	e1c <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
     f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     f90:	2907      	cmp	r1, #7
     f92:	f63f aee1 	bhi.w	d58 <cbvprintf+0x458>
     f96:	e8df f001 	tbb	[pc, r1]
     f9a:	040c      	.short	0x040c
     f9c:	08080c06 	.word	0x08080c06
     fa0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     fa2:	701d      	strb	r5, [r3, #0]
		break;
     fa4:	e6d8      	b.n	d58 <cbvprintf+0x458>
		*(short *)dp = (short)count;
     fa6:	801d      	strh	r5, [r3, #0]
		break;
     fa8:	e6d6      	b.n	d58 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
     faa:	17ea      	asrs	r2, r5, #31
     fac:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     fb0:	e6d2      	b.n	d58 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     fb2:	601d      	str	r5, [r3, #0]
		break;
     fb4:	e6d0      	b.n	d58 <cbvprintf+0x458>
			bps = "(nil)";
     fb6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
     fba:	4606      	mov	r6, r0
			bpe = bps + 5;
     fbc:	f10a 0805 	add.w	r8, sl, #5
     fc0:	e78e      	b.n	ee0 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
     fc2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     fc4:	bf48      	it	mi
     fc6:	3301      	addmi	r3, #1
     fc8:	e793      	b.n	ef2 <cbvprintf+0x5f2>
					OUTC(pad);
     fca:	4618      	mov	r0, r3
     fcc:	9303      	str	r3, [sp, #12]
     fce:	4659      	mov	r1, fp
     fd0:	9b02      	ldr	r3, [sp, #8]
     fd2:	4798      	blx	r3
     fd4:	2800      	cmp	r0, #0
     fd6:	9b03      	ldr	r3, [sp, #12]
     fd8:	da04      	bge.n	fe4 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
     fda:	b011      	add	sp, #68	; 0x44
     fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     fe0:	2320      	movs	r3, #32
     fe2:	444d      	add	r5, r9
     fe4:	464a      	mov	r2, r9
				while (width-- > 0) {
     fe6:	2a00      	cmp	r2, #0
     fe8:	eba5 0109 	sub.w	r1, r5, r9
     fec:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     ff0:	dceb      	bgt.n	fca <cbvprintf+0x6ca>
     ff2:	460d      	mov	r5, r1
		if (sign != 0) {
     ff4:	b136      	cbz	r6, 1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
			OUTC(sign);
     ff6:	9b02      	ldr	r3, [sp, #8]
     ff8:	4659      	mov	r1, fp
     ffa:	4630      	mov	r0, r6
     ffc:	4798      	blx	r3
     ffe:	2800      	cmp	r0, #0
    1000:	dbeb      	blt.n	fda <cbvprintf+0x6da>
    1002:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1004:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1008:	06d9      	lsls	r1, r3, #27
    100a:	d401      	bmi.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    100c:	071a      	lsls	r2, r3, #28
    100e:	d506      	bpl.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
				OUTC('0');
    1010:	9b02      	ldr	r3, [sp, #8]
    1012:	4659      	mov	r1, fp
    1014:	2030      	movs	r0, #48	; 0x30
    1016:	4798      	blx	r3
    1018:	2800      	cmp	r0, #0
    101a:	dbde      	blt.n	fda <cbvprintf+0x6da>
    101c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    101e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1022:	06db      	lsls	r3, r3, #27
    1024:	d507      	bpl.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
				OUTC(conv->specifier);
    1026:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    102a:	9b02      	ldr	r3, [sp, #8]
    102c:	4659      	mov	r1, fp
    102e:	4798      	blx	r3
    1030:	2800      	cmp	r0, #0
    1032:	dbd2      	blt.n	fda <cbvprintf+0x6da>
    1034:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1036:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1038:	442e      	add	r6, r5
    103a:	1b73      	subs	r3, r6, r5
    103c:	2b00      	cmp	r3, #0
    103e:	dc16      	bgt.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
			OUTS(bps, bpe);
    1040:	9802      	ldr	r0, [sp, #8]
    1042:	4643      	mov	r3, r8
    1044:	4652      	mov	r2, sl
    1046:	4659      	mov	r1, fp
    1048:	f003 fd53 	bl	4af2 <outs>
    104c:	2800      	cmp	r0, #0
    104e:	dbc4      	blt.n	fda <cbvprintf+0x6da>
    1050:	4405      	add	r5, r0
		while (width > 0) {
    1052:	44a9      	add	r9, r5
    1054:	eba9 0305 	sub.w	r3, r9, r5
    1058:	2b00      	cmp	r3, #0
    105a:	f77f ae7d 	ble.w	d58 <cbvprintf+0x458>
			OUTC(' ');
    105e:	9b02      	ldr	r3, [sp, #8]
    1060:	4659      	mov	r1, fp
    1062:	2020      	movs	r0, #32
    1064:	4798      	blx	r3
    1066:	2800      	cmp	r0, #0
    1068:	dbb7      	blt.n	fda <cbvprintf+0x6da>
    106a:	3501      	adds	r5, #1
			--width;
    106c:	e7f2      	b.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
				OUTC('0');
    106e:	9b02      	ldr	r3, [sp, #8]
    1070:	4659      	mov	r1, fp
    1072:	2030      	movs	r0, #48	; 0x30
    1074:	4798      	blx	r3
    1076:	2800      	cmp	r0, #0
    1078:	dbaf      	blt.n	fda <cbvprintf+0x6da>
    107a:	3501      	adds	r5, #1
    107c:	e7dd      	b.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    107e:	bf00      	nop
    1080:	00005ac6 	.word	0x00005ac6

00001084 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1084:	b508      	push	{r3, lr}
    1086:	f04f 0220 	mov.w	r2, #32
    108a:	f3ef 8311 	mrs	r3, BASEPRI
    108e:	f382 8812 	msr	BASEPRI_MAX, r2
    1092:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1096:	f000 fdfb 	bl	1c90 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    109a:	4803      	ldr	r0, [pc, #12]	; (10a8 <sys_reboot+0x24>)
    109c:	f003 fc21 	bl	48e2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    10a0:	f000 fa32 	bl	1508 <arch_cpu_idle>
    10a4:	e7fc      	b.n	10a0 <sys_reboot+0x1c>
    10a6:	bf00      	nop
    10a8:	00005acc 	.word	0x00005acc

000010ac <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    10ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    10b0:	4605      	mov	r5, r0
    10b2:	f04f 0320 	mov.w	r3, #32
    10b6:	f3ef 8611 	mrs	r6, BASEPRI
    10ba:	f383 8812 	msr	BASEPRI_MAX, r3
    10be:	f3bf 8f6f 	isb	sy
	return list->head;
    10c2:	4b0e      	ldr	r3, [pc, #56]	; (10fc <pm_state_notify+0x50>)
    10c4:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    10c6:	b19c      	cbz	r4, 10f0 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    10c8:	4f0d      	ldr	r7, [pc, #52]	; (1100 <pm_state_notify+0x54>)
    10ca:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1104 <pm_state_notify+0x58>
    10ce:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    10d2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    10d6:	2d00      	cmp	r5, #0
    10d8:	bf08      	it	eq
    10da:	4613      	moveq	r3, r2
		if (callback) {
    10dc:	b12b      	cbz	r3, 10ea <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    10de:	f898 2014 	ldrb.w	r2, [r8, #20]
    10e2:	fb09 f202 	mul.w	r2, r9, r2
    10e6:	5cb8      	ldrb	r0, [r7, r2]
    10e8:	4798      	blx	r3
	return node->next;
    10ea:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    10ec:	2c00      	cmp	r4, #0
    10ee:	d1f0      	bne.n	10d2 <pm_state_notify+0x26>
	__asm__ volatile(
    10f0:	f386 8811 	msr	BASEPRI, r6
    10f4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    10f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    10fc:	20000318 	.word	0x20000318
    1100:	20000320 	.word	0x20000320
    1104:	200009b8 	.word	0x200009b8

00001108 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1108:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    110a:	2301      	movs	r3, #1
    110c:	f000 001f 	and.w	r0, r0, #31
    1110:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1114:	4b07      	ldr	r3, [pc, #28]	; (1134 <atomic_clear_bit.constprop.0+0x2c>)
    1116:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    111a:	43c0      	mvns	r0, r0
    111c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1120:	e853 2f00 	ldrex	r2, [r3]
    1124:	4002      	ands	r2, r0
    1126:	e843 2100 	strex	r1, r2, [r3]
    112a:	2900      	cmp	r1, #0
    112c:	d1f8      	bne.n	1120 <atomic_clear_bit.constprop.0+0x18>
    112e:	f3bf 8f5b 	dmb	ish
}
    1132:	4770      	bx	lr
    1134:	2000032c 	.word	0x2000032c

00001138 <pm_system_resume>:

void pm_system_resume(void)
{
    1138:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    113a:	4b1a      	ldr	r3, [pc, #104]	; (11a4 <pm_system_resume+0x6c>)
    113c:	7d1c      	ldrb	r4, [r3, #20]
    113e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1142:	f004 031f 	and.w	r3, r4, #31
    1146:	2201      	movs	r2, #1
    1148:	409a      	lsls	r2, r3
    114a:	4b17      	ldr	r3, [pc, #92]	; (11a8 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    114c:	0961      	lsrs	r1, r4, #5
    114e:	43d0      	mvns	r0, r2
    1150:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1154:	e853 1f00 	ldrex	r1, [r3]
    1158:	ea01 0500 	and.w	r5, r1, r0
    115c:	e843 5c00 	strex	ip, r5, [r3]
    1160:	f1bc 0f00 	cmp.w	ip, #0
    1164:	d1f6      	bne.n	1154 <pm_system_resume+0x1c>
    1166:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    116a:	4211      	tst	r1, r2
    116c:	d013      	beq.n	1196 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    116e:	4b0f      	ldr	r3, [pc, #60]	; (11ac <pm_system_resume+0x74>)
    1170:	4d0f      	ldr	r5, [pc, #60]	; (11b0 <pm_system_resume+0x78>)
    1172:	b18b      	cbz	r3, 1198 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1174:	230c      	movs	r3, #12
    1176:	4363      	muls	r3, r4
    1178:	18ea      	adds	r2, r5, r3
    117a:	5ce8      	ldrb	r0, [r5, r3]
    117c:	7851      	ldrb	r1, [r2, #1]
    117e:	f003 fd21 	bl	4bc4 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1182:	2000      	movs	r0, #0
    1184:	f7ff ff92 	bl	10ac <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1188:	230c      	movs	r3, #12
    118a:	435c      	muls	r4, r3
    118c:	192a      	adds	r2, r5, r4
    118e:	2300      	movs	r3, #0
    1190:	512b      	str	r3, [r5, r4]
    1192:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1196:	bd38      	pop	{r3, r4, r5, pc}
    1198:	f383 8811 	msr	BASEPRI, r3
    119c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    11a0:	e7ef      	b.n	1182 <pm_system_resume+0x4a>
    11a2:	bf00      	nop
    11a4:	200009b8 	.word	0x200009b8
    11a8:	20000330 	.word	0x20000330
    11ac:	00004bc5 	.word	0x00004bc5
    11b0:	20000320 	.word	0x20000320

000011b4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    11b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    11b8:	4b32      	ldr	r3, [pc, #200]	; (1284 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    11ba:	4a33      	ldr	r2, [pc, #204]	; (1288 <pm_system_suspend+0xd4>)
    11bc:	7d1c      	ldrb	r4, [r3, #20]
    11be:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    11c2:	0963      	lsrs	r3, r4, #5
    11c4:	ea4f 0983 	mov.w	r9, r3, lsl #2
    11c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    11cc:	4e2f      	ldr	r6, [pc, #188]	; (128c <pm_system_suspend+0xd8>)
    11ce:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    11d2:	f004 081f 	and.w	r8, r4, #31
    11d6:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    11da:	f013 0f01 	tst.w	r3, #1
{
    11de:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    11e0:	d10a      	bne.n	11f8 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    11e2:	4601      	mov	r1, r0
    11e4:	4620      	mov	r0, r4
    11e6:	f000 f869 	bl	12bc <pm_policy_next_state>
		if (info != NULL) {
    11ea:	b128      	cbz	r0, 11f8 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    11ec:	c807      	ldmia	r0, {r0, r1, r2}
    11ee:	230c      	movs	r3, #12
    11f0:	fb03 6304 	mla	r3, r3, r4, r6
    11f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    11f8:	230c      	movs	r3, #12
    11fa:	4363      	muls	r3, r4
    11fc:	18f2      	adds	r2, r6, r3
    11fe:	5cf5      	ldrb	r5, [r6, r3]
    1200:	b92d      	cbnz	r5, 120e <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1202:	4620      	mov	r0, r4
    1204:	f7ff ff80 	bl	1108 <atomic_clear_bit.constprop.0>
		ret = false;
    1208:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    120a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    120e:	1c7b      	adds	r3, r7, #1
    1210:	d00f      	beq.n	1232 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1212:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1216:	481e      	ldr	r0, [pc, #120]	; (1290 <pm_system_suspend+0xdc>)
    1218:	4a1e      	ldr	r2, [pc, #120]	; (1294 <pm_system_suspend+0xe0>)
    121a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    121e:	2100      	movs	r1, #0
    1220:	2300      	movs	r3, #0
    1222:	fbec 0105 	umlal	r0, r1, ip, r5
    1226:	f7fe ff6b 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    122a:	2101      	movs	r1, #1
    122c:	1a38      	subs	r0, r7, r0
    122e:	f004 f90e 	bl	544e <z_set_timeout_expiry>
	k_sched_lock();
    1232:	f002 fd0f 	bl	3c54 <k_sched_lock>
	pm_state_notify(true);
    1236:	2001      	movs	r0, #1
    1238:	f7ff ff38 	bl	10ac <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    123c:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1240:	2301      	movs	r3, #1
    1242:	fa03 f808 	lsl.w	r8, r3, r8
    1246:	4b14      	ldr	r3, [pc, #80]	; (1298 <pm_system_suspend+0xe4>)
    1248:	4499      	add	r9, r3
    124a:	e859 3f00 	ldrex	r3, [r9]
    124e:	ea43 0308 	orr.w	r3, r3, r8
    1252:	e849 3200 	strex	r2, r3, [r9]
    1256:	2a00      	cmp	r2, #0
    1258:	d1f7      	bne.n	124a <pm_system_suspend+0x96>
    125a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    125e:	4b0f      	ldr	r3, [pc, #60]	; (129c <pm_system_suspend+0xe8>)
    1260:	b133      	cbz	r3, 1270 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    1262:	230c      	movs	r3, #12
    1264:	4363      	muls	r3, r4
    1266:	18f2      	adds	r2, r6, r3
    1268:	5cf0      	ldrb	r0, [r6, r3]
    126a:	7851      	ldrb	r1, [r2, #1]
    126c:	f003 fc9e 	bl	4bac <pm_state_set>
	pm_system_resume();
    1270:	f7ff ff62 	bl	1138 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    1274:	4620      	mov	r0, r4
    1276:	f7ff ff47 	bl	1108 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    127a:	f002 febb 	bl	3ff4 <k_sched_unlock>
	bool ret = true;
    127e:	2001      	movs	r0, #1
    1280:	e7c3      	b.n	120a <pm_system_suspend+0x56>
    1282:	bf00      	nop
    1284:	200009b8 	.word	0x200009b8
    1288:	2000032c 	.word	0x2000032c
    128c:	20000320 	.word	0x20000320
    1290:	000f423f 	.word	0x000f423f
    1294:	000f4240 	.word	0x000f4240
    1298:	20000330 	.word	0x20000330
    129c:	00004bad 	.word	0x00004bad

000012a0 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    12a0:	4b05      	ldr	r3, [pc, #20]	; (12b8 <pm_policy_state_lock_is_active+0x18>)
    12a2:	f3bf 8f5b 	dmb	ish
    12a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    12aa:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    12ae:	3800      	subs	r0, #0
    12b0:	bf18      	it	ne
    12b2:	2001      	movne	r0, #1
    12b4:	4770      	bx	lr
    12b6:	bf00      	nop
    12b8:	20000334 	.word	0x20000334

000012bc <pm_policy_next_state>:
{
    12bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12c0:	b085      	sub	sp, #20
    12c2:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    12c4:	a903      	add	r1, sp, #12
    12c6:	f000 f847 	bl	1358 <pm_state_cpu_get_all>
    12ca:	f8df 8080 	ldr.w	r8, [pc, #128]	; 134c <pm_policy_next_state+0x90>
    12ce:	f8df a080 	ldr.w	sl, [pc, #128]	; 1350 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    12d2:	1e44      	subs	r4, r0, #1
    12d4:	b224      	sxth	r4, r4
    12d6:	f04f 0b00 	mov.w	fp, #0
    12da:	1c63      	adds	r3, r4, #1
    12dc:	d104      	bne.n	12e8 <pm_policy_next_state+0x2c>
	return NULL;
    12de:	2600      	movs	r6, #0
}
    12e0:	4630      	mov	r0, r6
    12e2:	b005      	add	sp, #20
    12e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    12e8:	9a03      	ldr	r2, [sp, #12]
    12ea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    12ee:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    12f2:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    12f6:	f7ff ffd3 	bl	12a0 <pm_policy_state_lock_is_active>
    12fa:	4605      	mov	r5, r0
    12fc:	bb10      	cbnz	r0, 1344 <pm_policy_next_state+0x88>
    12fe:	6870      	ldr	r0, [r6, #4]
    1300:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1304:	46c4      	mov	ip, r8
    1306:	4629      	mov	r1, r5
    1308:	fbe0 c109 	umlal	ip, r1, r0, r9
    130c:	4652      	mov	r2, sl
    130e:	465b      	mov	r3, fp
    1310:	4660      	mov	r0, ip
    1312:	f7fe fef5 	bl	100 <__aeabi_uldivmod>
    1316:	9001      	str	r0, [sp, #4]
    1318:	68b0      	ldr	r0, [r6, #8]
    131a:	46c4      	mov	ip, r8
    131c:	4629      	mov	r1, r5
    131e:	fbe0 c109 	umlal	ip, r1, r0, r9
    1322:	465b      	mov	r3, fp
    1324:	4652      	mov	r2, sl
    1326:	4660      	mov	r0, ip
    1328:	f7fe feea 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    132c:	4b09      	ldr	r3, [pc, #36]	; (1354 <pm_policy_next_state+0x98>)
    132e:	681b      	ldr	r3, [r3, #0]
    1330:	1c59      	adds	r1, r3, #1
    1332:	d001      	beq.n	1338 <pm_policy_next_state+0x7c>
    1334:	4283      	cmp	r3, r0
    1336:	d905      	bls.n	1344 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    1338:	1c7a      	adds	r2, r7, #1
    133a:	d0d1      	beq.n	12e0 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    133c:	9b01      	ldr	r3, [sp, #4]
    133e:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1340:	42b8      	cmp	r0, r7
    1342:	d9cd      	bls.n	12e0 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1344:	3c01      	subs	r4, #1
    1346:	b224      	sxth	r4, r4
    1348:	e7c7      	b.n	12da <pm_policy_next_state+0x1e>
    134a:	bf00      	nop
    134c:	000f423f 	.word	0x000f423f
    1350:	000f4240 	.word	0x000f4240
    1354:	20000034 	.word	0x20000034

00001358 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1358:	b908      	cbnz	r0, 135e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    135a:	4b02      	ldr	r3, [pc, #8]	; (1364 <pm_state_cpu_get_all+0xc>)
    135c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    135e:	2000      	movs	r0, #0
    1360:	4770      	bx	lr
    1362:	bf00      	nop
    1364:	00005728 	.word	0x00005728

00001368 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1368:	4801      	ldr	r0, [pc, #4]	; (1370 <nrf_cc3xx_platform_abort_init+0x8>)
    136a:	f003 b90b 	b.w	4584 <nrf_cc3xx_platform_set_abort>
    136e:	bf00      	nop
    1370:	00005728 	.word	0x00005728

00001374 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1374:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1376:	4604      	mov	r4, r0
    1378:	b918      	cbnz	r0, 1382 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    137a:	4b0d      	ldr	r3, [pc, #52]	; (13b0 <mutex_free_platform+0x3c>)
    137c:	480d      	ldr	r0, [pc, #52]	; (13b4 <mutex_free_platform+0x40>)
    137e:	685b      	ldr	r3, [r3, #4]
    1380:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1382:	6861      	ldr	r1, [r4, #4]
    1384:	2908      	cmp	r1, #8
    1386:	d00d      	beq.n	13a4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1388:	f031 0304 	bics.w	r3, r1, #4
    138c:	d00a      	beq.n	13a4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    138e:	f011 0102 	ands.w	r1, r1, #2
    1392:	d008      	beq.n	13a6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1394:	4808      	ldr	r0, [pc, #32]	; (13b8 <mutex_free_platform+0x44>)
    1396:	4621      	mov	r1, r4
    1398:	f003 ff4c 	bl	5234 <k_mem_slab_free>
        mutex->mutex = NULL;
    139c:	2300      	movs	r3, #0
    139e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    13a0:	2300      	movs	r3, #0
    13a2:	6063      	str	r3, [r4, #4]
}
    13a4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    13a6:	6820      	ldr	r0, [r4, #0]
    13a8:	2214      	movs	r2, #20
    13aa:	f003 fbf3 	bl	4b94 <memset>
    13ae:	e7f7      	b.n	13a0 <mutex_free_platform+0x2c>
    13b0:	20000110 	.word	0x20000110
    13b4:	00005af5 	.word	0x00005af5
    13b8:	20000350 	.word	0x20000350

000013bc <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    13bc:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    13be:	b308      	cbz	r0, 1404 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    13c0:	6843      	ldr	r3, [r0, #4]
    13c2:	2b04      	cmp	r3, #4
    13c4:	d110      	bne.n	13e8 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    13c6:	2201      	movs	r2, #1
    13c8:	6803      	ldr	r3, [r0, #0]
    13ca:	f3bf 8f5b 	dmb	ish
    13ce:	e853 1f00 	ldrex	r1, [r3]
    13d2:	2900      	cmp	r1, #0
    13d4:	d103      	bne.n	13de <mutex_lock_platform+0x22>
    13d6:	e843 2000 	strex	r0, r2, [r3]
    13da:	2800      	cmp	r0, #0
    13dc:	d1f7      	bne.n	13ce <mutex_lock_platform+0x12>
    13de:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    13e2:	d10b      	bne.n	13fc <mutex_lock_platform+0x40>
    13e4:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    13e6:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    13e8:	b153      	cbz	r3, 1400 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    13ea:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    13ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    13f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    13f4:	f002 fad4 	bl	39a0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    13f8:	2800      	cmp	r0, #0
    13fa:	d0f3      	beq.n	13e4 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    13fc:	4803      	ldr	r0, [pc, #12]	; (140c <mutex_lock_platform+0x50>)
    13fe:	e7f2      	b.n	13e6 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1400:	4803      	ldr	r0, [pc, #12]	; (1410 <mutex_lock_platform+0x54>)
    1402:	e7f0      	b.n	13e6 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1404:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1408:	e7ed      	b.n	13e6 <mutex_lock_platform+0x2a>
    140a:	bf00      	nop
    140c:	ffff8fe9 	.word	0xffff8fe9
    1410:	ffff8fea 	.word	0xffff8fea

00001414 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1414:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1416:	b1d0      	cbz	r0, 144e <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1418:	6843      	ldr	r3, [r0, #4]
    141a:	2b04      	cmp	r3, #4
    141c:	d111      	bne.n	1442 <mutex_unlock_platform+0x2e>
    141e:	2200      	movs	r2, #0
    1420:	6803      	ldr	r3, [r0, #0]
    1422:	f3bf 8f5b 	dmb	ish
    1426:	e853 1f00 	ldrex	r1, [r3]
    142a:	2901      	cmp	r1, #1
    142c:	d103      	bne.n	1436 <mutex_unlock_platform+0x22>
    142e:	e843 2000 	strex	r0, r2, [r3]
    1432:	2800      	cmp	r0, #0
    1434:	d1f7      	bne.n	1426 <mutex_unlock_platform+0x12>
    1436:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    143a:	4807      	ldr	r0, [pc, #28]	; (1458 <mutex_unlock_platform+0x44>)
    143c:	bf08      	it	eq
    143e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1440:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1442:	b13b      	cbz	r3, 1454 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1444:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1446:	f002 fb23 	bl	3a90 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    144a:	2000      	movs	r0, #0
    144c:	e7f8      	b.n	1440 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    144e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1452:	e7f5      	b.n	1440 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1454:	4801      	ldr	r0, [pc, #4]	; (145c <mutex_unlock_platform+0x48>)
    1456:	e7f3      	b.n	1440 <mutex_unlock_platform+0x2c>
    1458:	ffff8fe9 	.word	0xffff8fe9
    145c:	ffff8fea 	.word	0xffff8fea

00001460 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1460:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1462:	4604      	mov	r4, r0
    1464:	b918      	cbnz	r0, 146e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1466:	4b16      	ldr	r3, [pc, #88]	; (14c0 <mutex_init_platform+0x60>)
    1468:	4816      	ldr	r0, [pc, #88]	; (14c4 <mutex_init_platform+0x64>)
    146a:	685b      	ldr	r3, [r3, #4]
    146c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    146e:	6863      	ldr	r3, [r4, #4]
    1470:	2b04      	cmp	r3, #4
    1472:	d023      	beq.n	14bc <mutex_init_platform+0x5c>
    1474:	2b08      	cmp	r3, #8
    1476:	d021      	beq.n	14bc <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1478:	b9cb      	cbnz	r3, 14ae <mutex_init_platform+0x4e>
    147a:	6823      	ldr	r3, [r4, #0]
    147c:	b9bb      	cbnz	r3, 14ae <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    147e:	4812      	ldr	r0, [pc, #72]	; (14c8 <mutex_init_platform+0x68>)
    1480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1488:	4621      	mov	r1, r4
    148a:	f002 f9b1 	bl	37f0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    148e:	b908      	cbnz	r0, 1494 <mutex_init_platform+0x34>
    1490:	6823      	ldr	r3, [r4, #0]
    1492:	b91b      	cbnz	r3, 149c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1494:	4b0a      	ldr	r3, [pc, #40]	; (14c0 <mutex_init_platform+0x60>)
    1496:	480d      	ldr	r0, [pc, #52]	; (14cc <mutex_init_platform+0x6c>)
    1498:	685b      	ldr	r3, [r3, #4]
    149a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    149c:	6820      	ldr	r0, [r4, #0]
    149e:	2214      	movs	r2, #20
    14a0:	2100      	movs	r1, #0
    14a2:	f003 fb77 	bl	4b94 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    14a6:	6863      	ldr	r3, [r4, #4]
    14a8:	f043 0302 	orr.w	r3, r3, #2
    14ac:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    14ae:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    14b0:	f003 fefe 	bl	52b0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    14b4:	6863      	ldr	r3, [r4, #4]
    14b6:	f043 0301 	orr.w	r3, r3, #1
    14ba:	6063      	str	r3, [r4, #4]
}
    14bc:	bd10      	pop	{r4, pc}
    14be:	bf00      	nop
    14c0:	20000110 	.word	0x20000110
    14c4:	00005af5 	.word	0x00005af5
    14c8:	20000350 	.word	0x20000350
    14cc:	00005b1b 	.word	0x00005b1b

000014d0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    14d0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    14d2:	4906      	ldr	r1, [pc, #24]	; (14ec <nrf_cc3xx_platform_mutex_init+0x1c>)
    14d4:	4806      	ldr	r0, [pc, #24]	; (14f0 <nrf_cc3xx_platform_mutex_init+0x20>)
    14d6:	2340      	movs	r3, #64	; 0x40
    14d8:	2214      	movs	r2, #20
    14da:	f003 fe90 	bl	51fe <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    14de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    14e2:	4904      	ldr	r1, [pc, #16]	; (14f4 <nrf_cc3xx_platform_mutex_init+0x24>)
    14e4:	4804      	ldr	r0, [pc, #16]	; (14f8 <nrf_cc3xx_platform_mutex_init+0x28>)
    14e6:	f003 b8ad 	b.w	4644 <nrf_cc3xx_platform_set_mutexes>
    14ea:	bf00      	nop
    14ec:	2000036c 	.word	0x2000036c
    14f0:	20000350 	.word	0x20000350
    14f4:	00005740 	.word	0x00005740
    14f8:	00005730 	.word	0x00005730

000014fc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    14fc:	4901      	ldr	r1, [pc, #4]	; (1504 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    14fe:	2210      	movs	r2, #16
	str	r2, [r1]
    1500:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1502:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1504:	e000ed10 	.word	0xe000ed10

00001508 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1508:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    150a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    150c:	f380 8811 	msr	BASEPRI, r0
	isb
    1510:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1514:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1518:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    151a:	b662      	cpsie	i
	isb
    151c:	f3bf 8f6f 	isb	sy

	bx	lr
    1520:	4770      	bx	lr
    1522:	bf00      	nop

00001524 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1524:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1526:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1528:	f381 8811 	msr	BASEPRI, r1

	wfe
    152c:	bf20      	wfe

	msr	BASEPRI, r0
    152e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1532:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1534:	4770      	bx	lr
    1536:	bf00      	nop

00001538 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1538:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    153a:	2b00      	cmp	r3, #0
    153c:	db08      	blt.n	1550 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    153e:	2201      	movs	r2, #1
    1540:	f000 001f 	and.w	r0, r0, #31
    1544:	fa02 f000 	lsl.w	r0, r2, r0
    1548:	095b      	lsrs	r3, r3, #5
    154a:	4a02      	ldr	r2, [pc, #8]	; (1554 <arch_irq_enable+0x1c>)
    154c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1550:	4770      	bx	lr
    1552:	bf00      	nop
    1554:	e000e100 	.word	0xe000e100

00001558 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1558:	4b05      	ldr	r3, [pc, #20]	; (1570 <arch_irq_is_enabled+0x18>)
    155a:	0942      	lsrs	r2, r0, #5
    155c:	f000 001f 	and.w	r0, r0, #31
    1560:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1564:	2301      	movs	r3, #1
    1566:	fa03 f000 	lsl.w	r0, r3, r0
}
    156a:	4010      	ands	r0, r2
    156c:	4770      	bx	lr
    156e:	bf00      	nop
    1570:	e000e100 	.word	0xe000e100

00001574 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1574:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1576:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1578:	bfa8      	it	ge
    157a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    157e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1582:	bfb8      	it	lt
    1584:	4b06      	ldrlt	r3, [pc, #24]	; (15a0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1586:	ea4f 1141 	mov.w	r1, r1, lsl #5
    158a:	bfac      	ite	ge
    158c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1590:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1594:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1596:	bfb4      	ite	lt
    1598:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    159a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    159e:	4770      	bx	lr
    15a0:	e000ed14 	.word	0xe000ed14

000015a4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    15a4:	bf30      	wfi
    b z_SysNmiOnReset
    15a6:	f7ff bffd 	b.w	15a4 <z_SysNmiOnReset>
    15aa:	bf00      	nop

000015ac <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    15ac:	4a0b      	ldr	r2, [pc, #44]	; (15dc <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    15ae:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    15b0:	4b0b      	ldr	r3, [pc, #44]	; (15e0 <z_arm_prep_c+0x34>)
    15b2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    15b6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    15b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15bc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    15c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    15c4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    15c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    15cc:	f002 f840 	bl	3650 <z_bss_zero>
	z_data_copy();
    15d0:	f002 fe32 	bl	4238 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    15d4:	f000 f9d0 	bl	1978 <z_arm_interrupt_init>
	z_cstart();
    15d8:	f002 f87e 	bl	36d8 <z_cstart>
    15dc:	00000000 	.word	0x00000000
    15e0:	e000ed00 	.word	0xe000ed00

000015e4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    15e4:	4a09      	ldr	r2, [pc, #36]	; (160c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    15e6:	490a      	ldr	r1, [pc, #40]	; (1610 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    15e8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    15ea:	6809      	ldr	r1, [r1, #0]
    15ec:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    15ee:	4909      	ldr	r1, [pc, #36]	; (1614 <arch_swap+0x30>)
	_current->arch.basepri = key;
    15f0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    15f2:	684b      	ldr	r3, [r1, #4]
    15f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    15f8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    15fa:	2300      	movs	r3, #0
    15fc:	f383 8811 	msr	BASEPRI, r3
    1600:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1604:	6893      	ldr	r3, [r2, #8]
}
    1606:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1608:	4770      	bx	lr
    160a:	bf00      	nop
    160c:	200009b8 	.word	0x200009b8
    1610:	00005880 	.word	0x00005880
    1614:	e000ed00 	.word	0xe000ed00

00001618 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1618:	4912      	ldr	r1, [pc, #72]	; (1664 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    161a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    161c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1620:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1622:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1626:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    162a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    162c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1630:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1634:	4f0c      	ldr	r7, [pc, #48]	; (1668 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1636:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    163a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    163c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    163e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1640:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1642:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1644:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1646:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    164a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    164c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    164e:	f000 fa2f 	bl	1ab0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1652:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1656:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    165a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    165e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1662:	4770      	bx	lr
    ldr r1, =_kernel
    1664:	200009b8 	.word	0x200009b8
    ldr v4, =_SCS_ICSR
    1668:	e000ed04 	.word	0xe000ed04

0000166c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    166c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1670:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1672:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1676:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    167a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    167c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1680:	2902      	cmp	r1, #2
    beq _oops
    1682:	d0ff      	beq.n	1684 <_oops>

00001684 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1684:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1686:	f003 fa51 	bl	4b2c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    168a:	bd01      	pop	{r0, pc}

0000168c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    168c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1690:	9b00      	ldr	r3, [sp, #0]
    1692:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1696:	490a      	ldr	r1, [pc, #40]	; (16c0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1698:	9b01      	ldr	r3, [sp, #4]
    169a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    169e:	9b02      	ldr	r3, [sp, #8]
    16a0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    16a4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    16a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    16ac:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    16b0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    16b4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    16b6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    16b8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    16ba:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    16bc:	4770      	bx	lr
    16be:	bf00      	nop
    16c0:	00004a53 	.word	0x00004a53

000016c4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    16c4:	4a09      	ldr	r2, [pc, #36]	; (16ec <z_check_thread_stack_fail+0x28>)
{
    16c6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    16c8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    16ca:	b170      	cbz	r0, 16ea <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    16cc:	f113 0f16 	cmn.w	r3, #22
    16d0:	6e40      	ldr	r0, [r0, #100]	; 0x64
    16d2:	d005      	beq.n	16e0 <z_check_thread_stack_fail+0x1c>
    16d4:	f1a0 0220 	sub.w	r2, r0, #32
    16d8:	429a      	cmp	r2, r3
    16da:	d805      	bhi.n	16e8 <z_check_thread_stack_fail+0x24>
    16dc:	4283      	cmp	r3, r0
    16de:	d203      	bcs.n	16e8 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    16e0:	4281      	cmp	r1, r0
    16e2:	bf28      	it	cs
    16e4:	2000      	movcs	r0, #0
    16e6:	4770      	bx	lr
    16e8:	2000      	movs	r0, #0
}
    16ea:	4770      	bx	lr
    16ec:	200009b8 	.word	0x200009b8

000016f0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    16f0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    16f2:	4b09      	ldr	r3, [pc, #36]	; (1718 <arch_switch_to_main_thread+0x28>)
    16f4:	6098      	str	r0, [r3, #8]
{
    16f6:	460d      	mov	r5, r1
    16f8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    16fa:	f000 f9d9 	bl	1ab0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    16fe:	4620      	mov	r0, r4
    1700:	f385 8809 	msr	PSP, r5
    1704:	2100      	movs	r1, #0
    1706:	b663      	cpsie	if
    1708:	f381 8811 	msr	BASEPRI, r1
    170c:	f3bf 8f6f 	isb	sy
    1710:	2200      	movs	r2, #0
    1712:	2300      	movs	r3, #0
    1714:	f003 f99d 	bl	4a52 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1718:	200009b8 	.word	0x200009b8

0000171c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    171c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    171e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1720:	4a0b      	ldr	r2, [pc, #44]	; (1750 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1722:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1724:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1726:	bf1e      	ittt	ne
	movne	r1, #0
    1728:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    172a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    172c:	f003 fdb1 	blne	5292 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1730:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1732:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1736:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    173a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    173e:	4905      	ldr	r1, [pc, #20]	; (1754 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1740:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1742:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1744:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1746:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    174a:	4903      	ldr	r1, [pc, #12]	; (1758 <_isr_wrapper+0x3c>)
	bx r1
    174c:	4708      	bx	r1
    174e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1750:	200009b8 	.word	0x200009b8
	ldr r1, =_sw_isr_table
    1754:	00005578 	.word	0x00005578
	ldr r1, =z_arm_int_exit
    1758:	0000175d 	.word	0x0000175d

0000175c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    175c:	4b04      	ldr	r3, [pc, #16]	; (1770 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    175e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1760:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1762:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1764:	d003      	beq.n	176e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1766:	4903      	ldr	r1, [pc, #12]	; (1774 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    176c:	600a      	str	r2, [r1, #0]

0000176e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    176e:	4770      	bx	lr
	ldr r3, =_kernel
    1770:	200009b8 	.word	0x200009b8
	ldr r1, =_SCS_ICSR
    1774:	e000ed04 	.word	0xe000ed04

00001778 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1778:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    177a:	4b1c      	ldr	r3, [pc, #112]	; (17ec <mem_manage_fault+0x74>)
{
    177c:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    177e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1784:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1786:	0790      	lsls	r0, r2, #30
    1788:	d520      	bpl.n	17cc <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    178a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    178c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    178e:	0612      	lsls	r2, r2, #24
    1790:	d51c      	bpl.n	17cc <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1792:	b119      	cbz	r1, 179c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    179a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    179c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    179e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17a2:	06d2      	lsls	r2, r2, #27
    17a4:	d415      	bmi.n	17d2 <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    17a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17a8:	079b      	lsls	r3, r3, #30
    17aa:	d412      	bmi.n	17d2 <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    17ac:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    17ae:	4b0f      	ldr	r3, [pc, #60]	; (17ec <mem_manage_fault+0x74>)
    17b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17b2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    17b4:	bf42      	ittt	mi
    17b6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    17b8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    17bc:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    17be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17c0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    17c4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    17c6:	2300      	movs	r3, #0
    17c8:	7023      	strb	r3, [r4, #0]

	return reason;
}
    17ca:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    17cc:	f06f 0015 	mvn.w	r0, #21
    17d0:	e7e4      	b.n	179c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    17d2:	4b06      	ldr	r3, [pc, #24]	; (17ec <mem_manage_fault+0x74>)
    17d4:	685b      	ldr	r3, [r3, #4]
    17d6:	0519      	lsls	r1, r3, #20
    17d8:	d5e8      	bpl.n	17ac <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    17da:	4629      	mov	r1, r5
    17dc:	f7ff ff72 	bl	16c4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    17e0:	2800      	cmp	r0, #0
    17e2:	d0e3      	beq.n	17ac <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    17e4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    17e8:	2002      	movs	r0, #2
    17ea:	e7e0      	b.n	17ae <mem_manage_fault+0x36>
    17ec:	e000ed00 	.word	0xe000ed00

000017f0 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    17f0:	4b0d      	ldr	r3, [pc, #52]	; (1828 <bus_fault.constprop.0+0x38>)
    17f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    17f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    17f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17f8:	0592      	lsls	r2, r2, #22
    17fa:	d508      	bpl.n	180e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    17fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    17fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1800:	0412      	lsls	r2, r2, #16
    1802:	d504      	bpl.n	180e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1804:	b118      	cbz	r0, 180e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    180c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    180e:	4b06      	ldr	r3, [pc, #24]	; (1828 <bus_fault.constprop.0+0x38>)
    1810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1814:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1816:	bf58      	it	pl
    1818:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    181a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    181c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    181e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1822:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1824:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1826:	4770      	bx	lr
    1828:	e000ed00 	.word	0xe000ed00

0000182c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    182c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    182e:	4b48      	ldr	r3, [pc, #288]	; (1950 <z_arm_fault+0x124>)
    1830:	685b      	ldr	r3, [r3, #4]
{
    1832:	b08a      	sub	sp, #40	; 0x28
    1834:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1836:	f3c3 0308 	ubfx	r3, r3, #0, #9
    183a:	2600      	movs	r6, #0
    183c:	f386 8811 	msr	BASEPRI, r6
    1840:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1844:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1848:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    184c:	d111      	bne.n	1872 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    184e:	f002 010c 	and.w	r1, r2, #12
    1852:	2908      	cmp	r1, #8
    1854:	d00d      	beq.n	1872 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1856:	0711      	lsls	r1, r2, #28
    1858:	d401      	bmi.n	185e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    185a:	4605      	mov	r5, r0
			*nested_exc = true;
    185c:	2601      	movs	r6, #1
	*recoverable = false;
    185e:	2200      	movs	r2, #0
	switch (fault) {
    1860:	3b03      	subs	r3, #3
	*recoverable = false;
    1862:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1866:	2b03      	cmp	r3, #3
    1868:	d86b      	bhi.n	1942 <z_arm_fault+0x116>
    186a:	e8df f003 	tbb	[pc, r3]
    186e:	5504      	.short	0x5504
    1870:	5d59      	.short	0x5d59
		return NULL;
    1872:	4635      	mov	r5, r6
    1874:	e7f3      	b.n	185e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1876:	4b36      	ldr	r3, [pc, #216]	; (1950 <z_arm_fault+0x124>)
    1878:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    187a:	f014 0402 	ands.w	r4, r4, #2
    187e:	d160      	bne.n	1942 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1882:	2a00      	cmp	r2, #0
    1884:	db15      	blt.n	18b2 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1888:	0052      	lsls	r2, r2, #1
    188a:	d512      	bpl.n	18b2 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    188c:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    188e:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    1892:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1896:	4291      	cmp	r1, r2
    1898:	d00a      	beq.n	18b0 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    189a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    189e:	b30a      	cbz	r2, 18e4 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    18a0:	f10d 0207 	add.w	r2, sp, #7
    18a4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    18a6:	4628      	mov	r0, r5
    18a8:	f7ff ff66 	bl	1778 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    18ac:	4604      	mov	r4, r0
		break;
    18ae:	e000      	b.n	18b2 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    18b0:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    18b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    18b6:	b99b      	cbnz	r3, 18e0 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    18b8:	2220      	movs	r2, #32
    18ba:	4629      	mov	r1, r5
    18bc:	a802      	add	r0, sp, #8
    18be:	f003 f95e 	bl	4b7e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    18c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18c4:	2e00      	cmp	r6, #0
    18c6:	d03e      	beq.n	1946 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    18c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    18cc:	b922      	cbnz	r2, 18d8 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    18ce:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    18d2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    18d6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    18d8:	a902      	add	r1, sp, #8
    18da:	4620      	mov	r0, r4
    18dc:	f003 f924 	bl	4b28 <z_arm_fatal_error>
}
    18e0:	b00a      	add	sp, #40	; 0x28
    18e2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    18e4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    18e8:	b12a      	cbz	r2, 18f6 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    18ea:	f10d 0107 	add.w	r1, sp, #7
    18ee:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    18f0:	f7ff ff7e 	bl	17f0 <bus_fault.constprop.0>
    18f4:	e7da      	b.n	18ac <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    18f6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    18f8:	b292      	uxth	r2, r2
    18fa:	2a00      	cmp	r2, #0
    18fc:	d0d9      	beq.n	18b2 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    18fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    190a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    190c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1910:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1914:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    1916:	e7cc      	b.n	18b2 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    1918:	f10d 0207 	add.w	r2, sp, #7
    191c:	2100      	movs	r1, #0
    191e:	e7c2      	b.n	18a6 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    1920:	f10d 0107 	add.w	r1, sp, #7
    1924:	2000      	movs	r0, #0
    1926:	e7e3      	b.n	18f0 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1928:	4b09      	ldr	r3, [pc, #36]	; (1950 <z_arm_fault+0x124>)
    192a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    192c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    192e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1938:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    193c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1940:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1942:	2400      	movs	r4, #0
    1944:	e7b5      	b.n	18b2 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1946:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    194a:	f023 0301 	bic.w	r3, r3, #1
    194e:	e7c2      	b.n	18d6 <z_arm_fault+0xaa>
    1950:	e000ed00 	.word	0xe000ed00

00001954 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1954:	4a02      	ldr	r2, [pc, #8]	; (1960 <z_arm_fault_init+0xc>)
    1956:	6953      	ldr	r3, [r2, #20]
    1958:	f043 0310 	orr.w	r3, r3, #16
    195c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    195e:	4770      	bx	lr
    1960:	e000ed00 	.word	0xe000ed00

00001964 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1964:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1968:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    196c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    196e:	4672      	mov	r2, lr
	bl z_arm_fault
    1970:	f7ff ff5c 	bl	182c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1974:	bd01      	pop	{r0, pc}
    1976:	bf00      	nop

00001978 <z_arm_interrupt_init>:
    1978:	4804      	ldr	r0, [pc, #16]	; (198c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    197a:	2300      	movs	r3, #0
    197c:	2120      	movs	r1, #32
    197e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1980:	3301      	adds	r3, #1
    1982:	2b30      	cmp	r3, #48	; 0x30
    1984:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1988:	d1f9      	bne.n	197e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    198a:	4770      	bx	lr
    198c:	e000e100 	.word	0xe000e100

00001990 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1990:	2000      	movs	r0, #0
    msr CONTROL, r0
    1992:	f380 8814 	msr	CONTROL, r0
    isb
    1996:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    199a:	f003 fd7b 	bl	5494 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    199e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    19a0:	490d      	ldr	r1, [pc, #52]	; (19d8 <__start+0x48>)
    str r0, [r1]
    19a2:	6008      	str	r0, [r1, #0]
    dsb
    19a4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    19a8:	480c      	ldr	r0, [pc, #48]	; (19dc <__start+0x4c>)
    msr msp, r0
    19aa:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    19ae:	f000 f82b 	bl	1a08 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    19b2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    19b4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    19b8:	4809      	ldr	r0, [pc, #36]	; (19e0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    19ba:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    19be:	1840      	adds	r0, r0, r1
    msr PSP, r0
    19c0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    19c4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    19c8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    19ca:	4308      	orrs	r0, r1
    msr CONTROL, r0
    19cc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    19d0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    19d4:	f7ff fdea 	bl	15ac <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    19d8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    19dc:	200013e0 	.word	0x200013e0
    ldr r0, =z_interrupt_stacks
    19e0:	20001560 	.word	0x20001560

000019e4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    19e4:	4907      	ldr	r1, [pc, #28]	; (1a04 <z_arm_clear_arm_mpu_config+0x20>)
    19e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    19ea:	2300      	movs	r3, #0
	int num_regions =
    19ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    19f0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    19f2:	4293      	cmp	r3, r2
    19f4:	d100      	bne.n	19f8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    19f6:	4770      	bx	lr
  MPU->RNR = rnr;
    19f8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    19fc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1a00:	3301      	adds	r3, #1
    1a02:	e7f6      	b.n	19f2 <z_arm_clear_arm_mpu_config+0xe>
    1a04:	e000ed00 	.word	0xe000ed00

00001a08 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1a08:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1a0a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1a0c:	2300      	movs	r3, #0
    1a0e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1a12:	f7ff ffe7 	bl	19e4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1a16:	4b14      	ldr	r3, [pc, #80]	; (1a68 <z_arm_init_arch_hw_at_boot+0x60>)
    1a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1a2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1a30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1a34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1a38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1a3c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1a40:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1a44:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1a48:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1a4c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1a50:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1a54:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1a58:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1a5c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1a5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a62:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1a66:	bd08      	pop	{r3, pc}
    1a68:	e000e100 	.word	0xe000e100

00001a6c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1a6c:	4b08      	ldr	r3, [pc, #32]	; (1a90 <z_impl_k_thread_abort+0x24>)
    1a6e:	689b      	ldr	r3, [r3, #8]
    1a70:	4283      	cmp	r3, r0
    1a72:	d10b      	bne.n	1a8c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1a74:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1a78:	b143      	cbz	r3, 1a8c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a7a:	4b06      	ldr	r3, [pc, #24]	; (1a94 <z_impl_k_thread_abort+0x28>)
    1a7c:	685a      	ldr	r2, [r3, #4]
    1a7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a82:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1a8a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1a8c:	f002 bb82 	b.w	4194 <z_thread_abort>
    1a90:	200009b8 	.word	0x200009b8
    1a94:	e000ed00 	.word	0xe000ed00

00001a98 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1a98:	4b02      	ldr	r3, [pc, #8]	; (1aa4 <z_arm_configure_static_mpu_regions+0xc>)
    1a9a:	4a03      	ldr	r2, [pc, #12]	; (1aa8 <z_arm_configure_static_mpu_regions+0x10>)
    1a9c:	4803      	ldr	r0, [pc, #12]	; (1aac <z_arm_configure_static_mpu_regions+0x14>)
    1a9e:	2101      	movs	r1, #1
    1aa0:	f000 b86e 	b.w	1b80 <arm_core_mpu_configure_static_mpu_regions>
    1aa4:	20040000 	.word	0x20040000
    1aa8:	20000000 	.word	0x20000000
    1aac:	00005754 	.word	0x00005754

00001ab0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1ab0:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1ab2:	4b05      	ldr	r3, [pc, #20]	; (1ac8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1ab4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1ab6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1ab8:	4a04      	ldr	r2, [pc, #16]	; (1acc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1aba:	2120      	movs	r1, #32
    1abc:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1ac0:	4618      	mov	r0, r3
    1ac2:	2101      	movs	r1, #1
    1ac4:	f000 b866 	b.w	1b94 <arm_core_mpu_configure_dynamic_mpu_regions>
    1ac8:	2000086c 	.word	0x2000086c
    1acc:	150b0000 	.word	0x150b0000

00001ad0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1ad2:	4f1f      	ldr	r7, [pc, #124]	; (1b50 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1ad4:	2600      	movs	r6, #0
    1ad6:	428e      	cmp	r6, r1
    1ad8:	db01      	blt.n	1ade <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1ada:	4610      	mov	r0, r2
    1adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1ade:	6844      	ldr	r4, [r0, #4]
    1ae0:	b39c      	cbz	r4, 1b4a <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    1ae2:	b153      	cbz	r3, 1afa <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1ae4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1ae8:	ea14 0f0c 	tst.w	r4, ip
    1aec:	d118      	bne.n	1b20 <mpu_configure_regions+0x50>
		&&
    1aee:	2c1f      	cmp	r4, #31
    1af0:	d916      	bls.n	1b20 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1af2:	6805      	ldr	r5, [r0, #0]
		&&
    1af4:	ea1c 0f05 	tst.w	ip, r5
    1af8:	d112      	bne.n	1b20 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1afa:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1afc:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1afe:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1b02:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    1b04:	d90f      	bls.n	1b26 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    1b06:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1b0a:	d80e      	bhi.n	1b2a <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1b0c:	3c01      	subs	r4, #1
    1b0e:	fab4 f484 	clz	r4, r4
    1b12:	f1c4 041f 	rsb	r4, r4, #31
    1b16:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1b18:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1b1a:	ea4c 0404 	orr.w	r4, ip, r4
    1b1e:	d906      	bls.n	1b2e <mpu_configure_regions+0x5e>
			return -EINVAL;
    1b20:	f06f 0215 	mvn.w	r2, #21
    1b24:	e7d9      	b.n	1ada <mpu_configure_regions+0xa>
		return REGION_32B;
    1b26:	2408      	movs	r4, #8
    1b28:	e7f6      	b.n	1b18 <mpu_configure_regions+0x48>
		return REGION_4G;
    1b2a:	243e      	movs	r4, #62	; 0x3e
    1b2c:	e7f4      	b.n	1b18 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1b2e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1b32:	4315      	orrs	r5, r2
    1b34:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1b38:	f044 0401 	orr.w	r4, r4, #1
    1b3c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1b40:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    1b44:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1b46:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    1b4a:	3601      	adds	r6, #1
    1b4c:	300c      	adds	r0, #12
    1b4e:	e7c2      	b.n	1ad6 <mpu_configure_regions+0x6>
    1b50:	e000ed00 	.word	0xe000ed00

00001b54 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1b54:	4b04      	ldr	r3, [pc, #16]	; (1b68 <arm_core_mpu_enable+0x14>)
    1b56:	2205      	movs	r2, #5
    1b58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1b5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b60:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1b64:	4770      	bx	lr
    1b66:	bf00      	nop
    1b68:	e000ed00 	.word	0xe000ed00

00001b6c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1b6c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1b70:	4b02      	ldr	r3, [pc, #8]	; (1b7c <arm_core_mpu_disable+0x10>)
    1b72:	2200      	movs	r2, #0
    1b74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1b78:	4770      	bx	lr
    1b7a:	bf00      	nop
    1b7c:	e000ed00 	.word	0xe000ed00

00001b80 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1b80:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1b82:	4c03      	ldr	r4, [pc, #12]	; (1b90 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1b84:	2301      	movs	r3, #1
    1b86:	7822      	ldrb	r2, [r4, #0]
    1b88:	f7ff ffa2 	bl	1ad0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1b8c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1b8e:	bd10      	pop	{r4, pc}
    1b90:	20000bca 	.word	0x20000bca

00001b94 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1b94:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1b96:	4a09      	ldr	r2, [pc, #36]	; (1bbc <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    1b98:	2300      	movs	r3, #0
    1b9a:	7812      	ldrb	r2, [r2, #0]
    1b9c:	f7ff ff98 	bl	1ad0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1ba0:	f110 0f16 	cmn.w	r0, #22
    1ba4:	d002      	beq.n	1bac <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    1ba6:	4a06      	ldr	r2, [pc, #24]	; (1bc0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1ba8:	2807      	cmp	r0, #7
    1baa:	dd00      	ble.n	1bae <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1bac:	bd08      	pop	{r3, pc}
    1bae:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1bb2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    1bb6:	3001      	adds	r0, #1
    1bb8:	e7f6      	b.n	1ba8 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    1bba:	bf00      	nop
    1bbc:	20000bca 	.word	0x20000bca
    1bc0:	e000ed00 	.word	0xe000ed00

00001bc4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1bc4:	4914      	ldr	r1, [pc, #80]	; (1c18 <z_arm_mpu_init+0x54>)
    1bc6:	6808      	ldr	r0, [r1, #0]
    1bc8:	2808      	cmp	r0, #8
{
    1bca:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1bcc:	d821      	bhi.n	1c12 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1bce:	f7ff ffcd 	bl	1b6c <arm_core_mpu_disable>
    1bd2:	4c12      	ldr	r4, [pc, #72]	; (1c1c <z_arm_mpu_init+0x58>)
    1bd4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1bd6:	2200      	movs	r2, #0
    1bd8:	4290      	cmp	r0, r2
    1bda:	f101 010c 	add.w	r1, r1, #12
    1bde:	d105      	bne.n	1bec <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1be0:	4b0f      	ldr	r3, [pc, #60]	; (1c20 <z_arm_mpu_init+0x5c>)
    1be2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1be4:	f7ff ffb6 	bl	1b54 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1be8:	2000      	movs	r0, #0
}
    1bea:	bd10      	pop	{r4, pc}
    1bec:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1bf0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1bf4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1bf8:	4313      	orrs	r3, r2
    1bfa:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1bfe:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c0e:	3201      	adds	r2, #1
    1c10:	e7e2      	b.n	1bd8 <z_arm_mpu_init+0x14>
		return -1;
    1c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c16:	e7e8      	b.n	1bea <z_arm_mpu_init+0x26>
    1c18:	00005760 	.word	0x00005760
    1c1c:	e000ed00 	.word	0xe000ed00
    1c20:	20000bca 	.word	0x20000bca

00001c24 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1c24:	4b01      	ldr	r3, [pc, #4]	; (1c2c <__stdout_hook_install+0x8>)
    1c26:	6018      	str	r0, [r3, #0]
}
    1c28:	4770      	bx	lr
    1c2a:	bf00      	nop
    1c2c:	20000058 	.word	0x20000058

00001c30 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    1c30:	b510      	push	{r4, lr}
	__asm__ volatile(
    1c32:	f04f 0320 	mov.w	r3, #32
    1c36:	f3ef 8011 	mrs	r0, BASEPRI
    1c3a:	f383 8812 	msr	BASEPRI_MAX, r3
    1c3e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1c42:	4a11      	ldr	r2, [pc, #68]	; (1c88 <nordicsemi_nrf52_init+0x58>)
    1c44:	2301      	movs	r3, #1
    1c46:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    1c4e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    1c52:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    1c56:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    1c5a:	2c08      	cmp	r4, #8
    1c5c:	d108      	bne.n	1c70 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    1c5e:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    1c62:	2905      	cmp	r1, #5
    1c64:	d804      	bhi.n	1c70 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    1c66:	4c09      	ldr	r4, [pc, #36]	; (1c8c <nordicsemi_nrf52_init+0x5c>)
    1c68:	5c61      	ldrb	r1, [r4, r1]
    1c6a:	b109      	cbz	r1, 1c70 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    1c6c:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    1c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c74:	2201      	movs	r2, #1
    1c76:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    1c7a:	f380 8811 	msr	BASEPRI, r0
    1c7e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1c82:	2000      	movs	r0, #0
    1c84:	bd10      	pop	{r4, pc}
    1c86:	bf00      	nop
    1c88:	4001e000 	.word	0x4001e000
    1c8c:	00005b57 	.word	0x00005b57

00001c90 <sys_arch_reboot>:
    *p_gpregret = val;
    1c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c94:	b2c0      	uxtb	r0, r0
    1c96:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1c9a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1c9e:	4905      	ldr	r1, [pc, #20]	; (1cb4 <sys_arch_reboot+0x24>)
    1ca0:	4b05      	ldr	r3, [pc, #20]	; (1cb8 <sys_arch_reboot+0x28>)
    1ca2:	68ca      	ldr	r2, [r1, #12]
    1ca4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1ca8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1caa:	60cb      	str	r3, [r1, #12]
    1cac:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1cb0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1cb2:	e7fd      	b.n	1cb0 <sys_arch_reboot+0x20>
    1cb4:	e000ed00 	.word	0xe000ed00
    1cb8:	05fa0004 	.word	0x05fa0004

00001cbc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1cbc:	b120      	cbz	r0, 1cc8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1cbe:	4b03      	ldr	r3, [pc, #12]	; (1ccc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1cc0:	0180      	lsls	r0, r0, #6
    1cc2:	f043 0301 	orr.w	r3, r3, #1
    1cc6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1cc8:	4770      	bx	lr
    1cca:	bf00      	nop
    1ccc:	00005720 	.word	0x00005720

00001cd0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1cd0:	4b08      	ldr	r3, [pc, #32]	; (1cf4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1cd2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1cd4:	1ac3      	subs	r3, r0, r3
{
    1cd6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1cd8:	4907      	ldr	r1, [pc, #28]	; (1cf8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1cda:	109b      	asrs	r3, r3, #2
{
    1cdc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1cde:	4359      	muls	r1, r3
    1ce0:	4806      	ldr	r0, [pc, #24]	; (1cfc <onoff_stop+0x2c>)
    1ce2:	2240      	movs	r2, #64	; 0x40
    1ce4:	f002 ff90 	bl	4c08 <stop>
	notify(mgr, res);
    1ce8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1cea:	4601      	mov	r1, r0
	notify(mgr, res);
    1cec:	4620      	mov	r0, r4
}
    1cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1cf2:	4718      	bx	r3
    1cf4:	20000888 	.word	0x20000888
    1cf8:	b6db6db7 	.word	0xb6db6db7
    1cfc:	00005500 	.word	0x00005500

00001d00 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1d00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1d02:	4c0c      	ldr	r4, [pc, #48]	; (1d34 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d04:	4a0c      	ldr	r2, [pc, #48]	; (1d38 <onoff_start+0x38>)
    1d06:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1d08:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d0a:	9300      	str	r3, [sp, #0]
{
    1d0c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d0e:	460b      	mov	r3, r1
    1d10:	490a      	ldr	r1, [pc, #40]	; (1d3c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    1d12:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d14:	4361      	muls	r1, r4
{
    1d16:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d18:	4809      	ldr	r0, [pc, #36]	; (1d40 <onoff_start+0x40>)
    1d1a:	f002 ffa1 	bl	4c60 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1d1e:	1e01      	subs	r1, r0, #0
    1d20:	da05      	bge.n	1d2e <onoff_start+0x2e>
		notify(mgr, err);
    1d22:	4630      	mov	r0, r6
    1d24:	462b      	mov	r3, r5
	}
}
    1d26:	b002      	add	sp, #8
    1d28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1d2c:	4718      	bx	r3
}
    1d2e:	b002      	add	sp, #8
    1d30:	bd70      	pop	{r4, r5, r6, pc}
    1d32:	bf00      	nop
    1d34:	20000888 	.word	0x20000888
    1d38:	00004cd1 	.word	0x00004cd1
    1d3c:	b6db6db7 	.word	0xb6db6db7
    1d40:	00005500 	.word	0x00005500

00001d44 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1d44:	2200      	movs	r2, #0
{
    1d46:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1d48:	2101      	movs	r1, #1
{
    1d4a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1d4c:	4610      	mov	r0, r2
    1d4e:	f7ff fc11 	bl	1574 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1d52:	480f      	ldr	r0, [pc, #60]	; (1d90 <clk_init+0x4c>)
    1d54:	f001 f862 	bl	2e1c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1d58:	4b0e      	ldr	r3, [pc, #56]	; (1d94 <clk_init+0x50>)
    1d5a:	4298      	cmp	r0, r3
    1d5c:	d115      	bne.n	1d8a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1d5e:	f003 f97b 	bl	5058 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1d62:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1d64:	490c      	ldr	r1, [pc, #48]	; (1d98 <clk_init+0x54>)
    1d66:	4630      	mov	r0, r6
    1d68:	f002 fe17 	bl	499a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1d6c:	2800      	cmp	r0, #0
    1d6e:	db0b      	blt.n	1d88 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    1d70:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1d72:	4909      	ldr	r1, [pc, #36]	; (1d98 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1d74:	2501      	movs	r5, #1
    1d76:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1d78:	f104 001c 	add.w	r0, r4, #28
    1d7c:	f002 fe0d 	bl	499a <onoff_manager_init>
		if (err < 0) {
    1d80:	2800      	cmp	r0, #0
    1d82:	db01      	blt.n	1d88 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1d84:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1d86:	2000      	movs	r0, #0
}
    1d88:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1d8a:	f06f 0004 	mvn.w	r0, #4
    1d8e:	e7fb      	b.n	1d88 <clk_init+0x44>
    1d90:	00001dd1 	.word	0x00001dd1
    1d94:	0bad0000 	.word	0x0bad0000
    1d98:	000057a8 	.word	0x000057a8

00001d9c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1d9c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1d9e:	230c      	movs	r3, #12
    1da0:	4809      	ldr	r0, [pc, #36]	; (1dc8 <clkstarted_handle.constprop.0+0x2c>)
    1da2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1da4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1da6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1da8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1dac:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1dae:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1db0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1db2:	4418      	add	r0, r3
    1db4:	f002 ff15 	bl	4be2 <set_on_state>
	if (callback) {
    1db8:	b12d      	cbz	r5, 1dc6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1dba:	4632      	mov	r2, r6
    1dbc:	462b      	mov	r3, r5
    1dbe:	4803      	ldr	r0, [pc, #12]	; (1dcc <clkstarted_handle.constprop.0+0x30>)
}
    1dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1dc4:	4718      	bx	r3
}
    1dc6:	bd70      	pop	{r4, r5, r6, pc}
    1dc8:	20000888 	.word	0x20000888
    1dcc:	00005500 	.word	0x00005500

00001dd0 <clock_event_handler>:
	switch (event) {
    1dd0:	b110      	cbz	r0, 1dd8 <clock_event_handler+0x8>
    1dd2:	2801      	cmp	r0, #1
    1dd4:	d004      	beq.n	1de0 <clock_event_handler+0x10>
    1dd6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1dd8:	4b03      	ldr	r3, [pc, #12]	; (1de8 <clock_event_handler+0x18>)
    1dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1ddc:	075b      	lsls	r3, r3, #29
    1dde:	d101      	bne.n	1de4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1de0:	f7ff bfdc 	b.w	1d9c <clkstarted_handle.constprop.0>
}
    1de4:	4770      	bx	lr
    1de6:	bf00      	nop
    1de8:	20000888 	.word	0x20000888

00001dec <generic_hfclk_start>:
{
    1dec:	b508      	push	{r3, lr}
	__asm__ volatile(
    1dee:	f04f 0320 	mov.w	r3, #32
    1df2:	f3ef 8111 	mrs	r1, BASEPRI
    1df6:	f383 8812 	msr	BASEPRI_MAX, r3
    1dfa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1dfe:	4a12      	ldr	r2, [pc, #72]	; (1e48 <generic_hfclk_start+0x5c>)
    1e00:	6813      	ldr	r3, [r2, #0]
    1e02:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1e06:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1e0a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1e0c:	d00c      	beq.n	1e28 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1e0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1e12:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1e16:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1e1a:	f013 0301 	ands.w	r3, r3, #1
    1e1e:	d003      	beq.n	1e28 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1e20:	480a      	ldr	r0, [pc, #40]	; (1e4c <generic_hfclk_start+0x60>)
    1e22:	f002 fede 	bl	4be2 <set_on_state>
			already_started = true;
    1e26:	2301      	movs	r3, #1
	__asm__ volatile(
    1e28:	f381 8811 	msr	BASEPRI, r1
    1e2c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1e30:	b123      	cbz	r3, 1e3c <generic_hfclk_start+0x50>
}
    1e32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1e36:	2000      	movs	r0, #0
    1e38:	f7ff bfb0 	b.w	1d9c <clkstarted_handle.constprop.0>
}
    1e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1e40:	2001      	movs	r0, #1
    1e42:	f003 b916 	b.w	5072 <nrfx_clock_start>
    1e46:	bf00      	nop
    1e48:	200008d8 	.word	0x200008d8
    1e4c:	200008c8 	.word	0x200008c8

00001e50 <api_blocking_start>:
{
    1e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1e52:	2200      	movs	r2, #0
    1e54:	2301      	movs	r3, #1
    1e56:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1e5a:	4a09      	ldr	r2, [pc, #36]	; (1e80 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1e5c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1e60:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1e62:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1e66:	f002 ff2c 	bl	4cc2 <api_start>
	if (err < 0) {
    1e6a:	2800      	cmp	r0, #0
    1e6c:	db05      	blt.n	1e7a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1e72:	2300      	movs	r3, #0
    1e74:	4668      	mov	r0, sp
    1e76:	f001 fe6d 	bl	3b54 <z_impl_k_sem_take>
}
    1e7a:	b005      	add	sp, #20
    1e7c:	f85d fb04 	ldr.w	pc, [sp], #4
    1e80:	00004cef 	.word	0x00004cef

00001e84 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1e84:	4b09      	ldr	r3, [pc, #36]	; (1eac <generic_hfclk_stop+0x28>)
    1e86:	f3bf 8f5b 	dmb	ish
    1e8a:	e853 2f00 	ldrex	r2, [r3]
    1e8e:	f022 0102 	bic.w	r1, r2, #2
    1e92:	e843 1000 	strex	r0, r1, [r3]
    1e96:	2800      	cmp	r0, #0
    1e98:	d1f7      	bne.n	1e8a <generic_hfclk_stop+0x6>
    1e9a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1e9e:	07d3      	lsls	r3, r2, #31
    1ea0:	d402      	bmi.n	1ea8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1ea2:	2001      	movs	r0, #1
    1ea4:	f003 b922 	b.w	50ec <nrfx_clock_stop>
}
    1ea8:	4770      	bx	lr
    1eaa:	bf00      	nop
    1eac:	200008d8 	.word	0x200008d8

00001eb0 <z_nrf_clock_control_lf_on>:
{
    1eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1eb4:	4939      	ldr	r1, [pc, #228]	; (1f9c <z_nrf_clock_control_lf_on+0xec>)
    1eb6:	f3bf 8f5b 	dmb	ish
    1eba:	4607      	mov	r7, r0
    1ebc:	2201      	movs	r2, #1
    1ebe:	e851 3f00 	ldrex	r3, [r1]
    1ec2:	e841 2000 	strex	r0, r2, [r1]
    1ec6:	2800      	cmp	r0, #0
    1ec8:	d1f9      	bne.n	1ebe <z_nrf_clock_control_lf_on+0xe>
    1eca:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1ece:	b933      	cbnz	r3, 1ede <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1ed0:	4933      	ldr	r1, [pc, #204]	; (1fa0 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    1ed2:	4834      	ldr	r0, [pc, #208]	; (1fa4 <z_nrf_clock_control_lf_on+0xf4>)
    1ed4:	604b      	str	r3, [r1, #4]
    1ed6:	60cb      	str	r3, [r1, #12]
    1ed8:	608a      	str	r2, [r1, #8]
    1eda:	f002 fd71 	bl	49c0 <onoff_request>
	switch (start_mode) {
    1ede:	1e7b      	subs	r3, r7, #1
    1ee0:	2b01      	cmp	r3, #1
    1ee2:	d82f      	bhi.n	1f44 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1ee4:	2f01      	cmp	r7, #1
    1ee6:	d107      	bne.n	1ef8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1eec:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1ef0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1ef4:	2b01      	cmp	r3, #1
    1ef6:	d025      	beq.n	1f44 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1ef8:	f003 f9c5 	bl	5286 <k_is_in_isr>
    1efc:	4604      	mov	r4, r0
    1efe:	b918      	cbnz	r0, 1f08 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    1f00:	4b29      	ldr	r3, [pc, #164]	; (1fa8 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    1f02:	781b      	ldrb	r3, [r3, #0]
    1f04:	2b00      	cmp	r3, #0
    1f06:	d141      	bne.n	1f8c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    1f08:	f04f 0320 	mov.w	r3, #32
    1f0c:	f3ef 8611 	mrs	r6, BASEPRI
    1f10:	f383 8812 	msr	BASEPRI_MAX, r3
    1f14:	f3bf 8f6f 	isb	sy
    1f18:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f1a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1fac <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1f1e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    1f22:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1f26:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    1f2a:	03d2      	lsls	r2, r2, #15
    1f2c:	d50c      	bpl.n	1f48 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1f2e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1f32:	2b01      	cmp	r3, #1
    1f34:	d001      	beq.n	1f3a <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1f36:	2f01      	cmp	r7, #1
    1f38:	d106      	bne.n	1f48 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    1f3a:	b30c      	cbz	r4, 1f80 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    1f3c:	f386 8811 	msr	BASEPRI, r6
    1f40:	f3bf 8f6f 	isb	sy
}
    1f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1f48:	b1ac      	cbz	r4, 1f76 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1f4a:	4630      	mov	r0, r6
    1f4c:	f7ff faea 	bl	1524 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1f50:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1f54:	2b00      	cmp	r3, #0
    1f56:	d1e4      	bne.n	1f22 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1f58:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1f5c:	2a00      	cmp	r2, #0
    1f5e:	d0e0      	beq.n	1f22 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1f60:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1f64:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1f68:	2301      	movs	r3, #1
    1f6a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    1f6e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1f72:	60ab      	str	r3, [r5, #8]
}
    1f74:	e7d5      	b.n	1f22 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    1f76:	2100      	movs	r1, #0
    1f78:	2021      	movs	r0, #33	; 0x21
    1f7a:	f002 f8eb 	bl	4154 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1f7e:	e7e7      	b.n	1f50 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    1f80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f84:	2202      	movs	r2, #2
    1f86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1f8a:	e7db      	b.n	1f44 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    1f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f90:	2202      	movs	r2, #2
    1f92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1f96:	4606      	mov	r6, r0
}
    1f98:	e7bf      	b.n	1f1a <z_nrf_clock_control_lf_on+0x6a>
    1f9a:	bf00      	nop
    1f9c:	200008dc 	.word	0x200008dc
    1fa0:	20000878 	.word	0x20000878
    1fa4:	200008a4 	.word	0x200008a4
    1fa8:	20000fdb 	.word	0x20000fdb
    1fac:	e000e100 	.word	0xe000e100

00001fb0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1fb0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1fb2:	4b08      	ldr	r3, [pc, #32]	; (1fd4 <uart_console_init+0x24>)
    1fb4:	4808      	ldr	r0, [pc, #32]	; (1fd8 <uart_console_init+0x28>)
    1fb6:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1fb8:	f003 f8f8 	bl	51ac <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    1fbc:	b138      	cbz	r0, 1fce <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    1fbe:	4807      	ldr	r0, [pc, #28]	; (1fdc <uart_console_init+0x2c>)
    1fc0:	f7ff fe30 	bl	1c24 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1fc4:	4805      	ldr	r0, [pc, #20]	; (1fdc <uart_console_init+0x2c>)
    1fc6:	f7fe fba7 	bl	718 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1fca:	2000      	movs	r0, #0
}
    1fcc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1fce:	f06f 0012 	mvn.w	r0, #18
    1fd2:	e7fb      	b.n	1fcc <uart_console_init+0x1c>
    1fd4:	200008e0 	.word	0x200008e0
    1fd8:	00005560 	.word	0x00005560
    1fdc:	00001fe1 	.word	0x00001fe1

00001fe0 <console_out>:
	if ('\n' == c) {
    1fe0:	280a      	cmp	r0, #10
{
    1fe2:	b538      	push	{r3, r4, r5, lr}
    1fe4:	4d07      	ldr	r5, [pc, #28]	; (2004 <console_out+0x24>)
    1fe6:	4604      	mov	r4, r0
	if ('\n' == c) {
    1fe8:	d104      	bne.n	1ff4 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1fea:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1fec:	6883      	ldr	r3, [r0, #8]
    1fee:	210d      	movs	r1, #13
    1ff0:	685b      	ldr	r3, [r3, #4]
    1ff2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1ff4:	6828      	ldr	r0, [r5, #0]
    1ff6:	6883      	ldr	r3, [r0, #8]
    1ff8:	b2e1      	uxtb	r1, r4
    1ffa:	685b      	ldr	r3, [r3, #4]
    1ffc:	4798      	blx	r3
}
    1ffe:	4620      	mov	r0, r4
    2000:	bd38      	pop	{r3, r4, r5, pc}
    2002:	bf00      	nop
    2004:	200008e0 	.word	0x200008e0

00002008 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2008:	b530      	push	{r4, r5, lr}
	return port->config;
    200a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    200c:	7b04      	ldrb	r4, [r0, #12]
    200e:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2012:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2016:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    201a:	b085      	sub	sp, #20
    201c:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    2020:	d104      	bne.n	202c <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    2022:	4628      	mov	r0, r5
    2024:	f001 f97c 	bl	3320 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    2028:	2000      	movs	r0, #0
    202a:	e032      	b.n	2092 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    202c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2030:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2034:	d12f      	bne.n	2096 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    203a:	bf0c      	ite	eq
    203c:	2304      	moveq	r3, #4
    203e:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2040:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2044:	6883      	ldr	r3, [r0, #8]
    2046:	fa23 f101 	lsr.w	r1, r3, r1
    204a:	07c9      	lsls	r1, r1, #31
    204c:	d42f      	bmi.n	20ae <gpio_nrfx_pin_interrupt_configure+0xa6>
    204e:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2052:	d12c      	bne.n	20ae <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2054:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    2056:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    2058:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    205c:	4a1c      	ldr	r2, [pc, #112]	; (20d0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    205e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2062:	bf18      	it	ne
    2064:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    206c:	07db      	lsls	r3, r3, #31
    206e:	d41e      	bmi.n	20ae <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2070:	f10d 0407 	add.w	r4, sp, #7
    2074:	4621      	mov	r1, r4
    2076:	4628      	mov	r0, r5
    2078:	f001 f8b6 	bl	31e8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    207c:	4b15      	ldr	r3, [pc, #84]	; (20d4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    207e:	4298      	cmp	r0, r3
    2080:	d114      	bne.n	20ac <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    2082:	4620      	mov	r0, r4
    2084:	f001 f8fe 	bl	3284 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2088:	4b13      	ldr	r3, [pc, #76]	; (20d8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    208a:	4298      	cmp	r0, r3
    208c:	d00e      	beq.n	20ac <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    208e:	f06f 000b 	mvn.w	r0, #11
}
    2092:	b005      	add	sp, #20
    2094:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2096:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    209a:	d005      	beq.n	20a8 <gpio_nrfx_pin_interrupt_configure+0xa0>
    209c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    20a0:	bf0c      	ite	eq
    20a2:	2302      	moveq	r3, #2
    20a4:	2301      	movne	r3, #1
    20a6:	e7cb      	b.n	2040 <gpio_nrfx_pin_interrupt_configure+0x38>
    20a8:	2303      	movs	r3, #3
    20aa:	e7c9      	b.n	2040 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    20ac:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    20ae:	2300      	movs	r3, #0
    20b0:	4619      	mov	r1, r3
    20b2:	aa02      	add	r2, sp, #8
    20b4:	4628      	mov	r0, r5
    20b6:	f000 ff71 	bl	2f9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    20ba:	4b07      	ldr	r3, [pc, #28]	; (20d8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    20bc:	4298      	cmp	r0, r3
    20be:	d104      	bne.n	20ca <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    20c0:	2101      	movs	r1, #1
    20c2:	4628      	mov	r0, r5
    20c4:	f001 f8e4 	bl	3290 <nrfx_gpiote_trigger_enable>
    20c8:	e7ae      	b.n	2028 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    20ca:	f06f 0004 	mvn.w	r0, #4
    20ce:	e7e0      	b.n	2092 <gpio_nrfx_pin_interrupt_configure+0x8a>
    20d0:	50000300 	.word	0x50000300
    20d4:	0bad0004 	.word	0x0bad0004
    20d8:	0bad0000 	.word	0x0bad0000

000020dc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    20dc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    20de:	f001 f8c1 	bl	3264 <nrfx_gpiote_is_init>
    20e2:	4604      	mov	r4, r0
    20e4:	b968      	cbnz	r0, 2102 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    20e6:	f001 f895 	bl	3214 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    20ea:	4b08      	ldr	r3, [pc, #32]	; (210c <gpio_nrfx_init+0x30>)
    20ec:	4298      	cmp	r0, r3
    20ee:	d10a      	bne.n	2106 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    20f0:	4807      	ldr	r0, [pc, #28]	; (2110 <gpio_nrfx_init+0x34>)
    20f2:	4621      	mov	r1, r4
    20f4:	f001 f872 	bl	31dc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    20f8:	4622      	mov	r2, r4
    20fa:	2105      	movs	r1, #5
    20fc:	2006      	movs	r0, #6
    20fe:	f7ff fa39 	bl	1574 <z_arm_irq_priority_set>
		return 0;
    2102:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2104:	bd10      	pop	{r4, pc}
		return -EIO;
    2106:	f06f 0004 	mvn.w	r0, #4
    210a:	e7fb      	b.n	2104 <gpio_nrfx_init+0x28>
    210c:	0bad0000 	.word	0x0bad0000
    2110:	00002115 	.word	0x00002115

00002114 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2114:	0942      	lsrs	r2, r0, #5
{
    2116:	b570      	push	{r4, r5, r6, lr}
    2118:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    211a:	d002      	beq.n	2122 <nrfx_gpio_handler+0xe>
    211c:	2a01      	cmp	r2, #1
    211e:	d015      	beq.n	214c <nrfx_gpio_handler+0x38>
}
    2120:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2122:	4e0b      	ldr	r6, [pc, #44]	; (2150 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2124:	6932      	ldr	r2, [r6, #16]
    2126:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2128:	2900      	cmp	r1, #0
    212a:	d0f9      	beq.n	2120 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    212c:	f003 031f 	and.w	r3, r3, #31
    2130:	2501      	movs	r5, #1
    2132:	680c      	ldr	r4, [r1, #0]
    2134:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    2136:	688a      	ldr	r2, [r1, #8]
    2138:	402a      	ands	r2, r5
    213a:	d002      	beq.n	2142 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    213c:	684b      	ldr	r3, [r1, #4]
    213e:	4630      	mov	r0, r6
    2140:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2142:	2c00      	cmp	r4, #0
    2144:	d0ec      	beq.n	2120 <nrfx_gpio_handler+0xc>
    2146:	4621      	mov	r1, r4
    2148:	6824      	ldr	r4, [r4, #0]
    214a:	e7f4      	b.n	2136 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    214c:	4e01      	ldr	r6, [pc, #4]	; (2154 <nrfx_gpio_handler+0x40>)
    214e:	e7e9      	b.n	2124 <nrfx_gpio_handler+0x10>
    2150:	00005518 	.word	0x00005518
    2154:	00005530 	.word	0x00005530

00002158 <gpio_nrfx_pin_configure>:
{
    2158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    215c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    215e:	7b3b      	ldrb	r3, [r7, #12]
    2160:	f001 051f 	and.w	r5, r1, #31
{
    2164:	b085      	sub	sp, #20
    2166:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2168:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    216c:	4614      	mov	r4, r2
    216e:	b9ca      	cbnz	r2, 21a4 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2170:	a902      	add	r1, sp, #8
    2172:	4628      	mov	r0, r5
    2174:	f001 f838 	bl	31e8 <nrfx_gpiote_channel_get>
    2178:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    217a:	4628      	mov	r0, r5
    217c:	f001 f8f8 	bl	3370 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2180:	4b4a      	ldr	r3, [pc, #296]	; (22ac <gpio_nrfx_pin_configure+0x154>)
    2182:	4298      	cmp	r0, r3
    2184:	d004      	beq.n	2190 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2186:	f06f 0004 	mvn.w	r0, #4
}
    218a:	b005      	add	sp, #20
    218c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2190:	4284      	cmp	r4, r0
    2192:	d105      	bne.n	21a0 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2194:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2198:	f001 f86e 	bl	3278 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    219c:	42a0      	cmp	r0, r4
    219e:	d1f2      	bne.n	2186 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    21a0:	2000      	movs	r0, #0
    21a2:	e7f2      	b.n	218a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    21a4:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    21a8:	f10d 0103 	add.w	r1, sp, #3
    21ac:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    21ae:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    21b2:	f001 f819 	bl	31e8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    21b6:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    21b8:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    21ba:	aa02      	add	r2, sp, #8
    21bc:	4649      	mov	r1, r9
    21be:	4628      	mov	r0, r5
    21c0:	f000 feec 	bl	2f9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    21c4:	4b39      	ldr	r3, [pc, #228]	; (22ac <gpio_nrfx_pin_configure+0x154>)
    21c6:	4298      	cmp	r0, r3
    21c8:	d002      	beq.n	21d0 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    21ca:	f06f 0015 	mvn.w	r0, #21
    21ce:	e7dc      	b.n	218a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    21d0:	4580      	cmp	r8, r0
    21d2:	d103      	bne.n	21dc <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    21d4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    21d8:	f001 f84e 	bl	3278 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    21dc:	03a3      	lsls	r3, r4, #14
    21de:	d551      	bpl.n	2284 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    21e0:	f240 6306 	movw	r3, #1542	; 0x606
    21e4:	4023      	ands	r3, r4
    21e6:	f240 2206 	movw	r2, #518	; 0x206
    21ea:	4293      	cmp	r3, r2
    21ec:	d03b      	beq.n	2266 <gpio_nrfx_pin_configure+0x10e>
    21ee:	d80c      	bhi.n	220a <gpio_nrfx_pin_configure+0xb2>
    21f0:	2b06      	cmp	r3, #6
    21f2:	d015      	beq.n	2220 <gpio_nrfx_pin_configure+0xc8>
    21f4:	d804      	bhi.n	2200 <gpio_nrfx_pin_configure+0xa8>
    21f6:	b19b      	cbz	r3, 2220 <gpio_nrfx_pin_configure+0xc8>
    21f8:	2b02      	cmp	r3, #2
    21fa:	d1e6      	bne.n	21ca <gpio_nrfx_pin_configure+0x72>
    21fc:	2304      	movs	r3, #4
    21fe:	e00f      	b.n	2220 <gpio_nrfx_pin_configure+0xc8>
    2200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2204:	d1e1      	bne.n	21ca <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2206:	2301      	movs	r3, #1
    2208:	e00a      	b.n	2220 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    220a:	f240 4202 	movw	r2, #1026	; 0x402
    220e:	4293      	cmp	r3, r2
    2210:	d02b      	beq.n	226a <gpio_nrfx_pin_configure+0x112>
    2212:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    2216:	d02a      	beq.n	226e <gpio_nrfx_pin_configure+0x116>
    2218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    221c:	d1d5      	bne.n	21ca <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    221e:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2220:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2224:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2228:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    222c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    222e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2232:	bf54      	ite	pl
    2234:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2238:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    223a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    223c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2240:	d517      	bpl.n	2272 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2242:	687b      	ldr	r3, [r7, #4]
    2244:	2101      	movs	r1, #1
    2246:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    224a:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    224e:	2200      	movs	r2, #0
    2250:	a901      	add	r1, sp, #4
    2252:	4628      	mov	r0, r5
    2254:	f000 ff50 	bl	30f8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2258:	4b14      	ldr	r3, [pc, #80]	; (22ac <gpio_nrfx_pin_configure+0x154>)
    225a:	4298      	cmp	r0, r3
    225c:	bf14      	ite	ne
    225e:	f06f 0015 	mvnne.w	r0, #21
    2262:	2000      	moveq	r0, #0
    2264:	e791      	b.n	218a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2266:	2307      	movs	r3, #7
    2268:	e7da      	b.n	2220 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    226a:	2305      	movs	r3, #5
    226c:	e7d8      	b.n	2220 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    226e:	2303      	movs	r3, #3
    2270:	e7d6      	b.n	2220 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2272:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2274:	bf41      	itttt	mi
    2276:	687b      	ldrmi	r3, [r7, #4]
    2278:	2101      	movmi	r1, #1
    227a:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    227e:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2282:	e7e4      	b.n	224e <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    2284:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2286:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    228a:	bf54      	ite	pl
    228c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2290:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2292:	461a      	mov	r2, r3
    2294:	a901      	add	r1, sp, #4
    2296:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2298:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    229c:	f000 fe7e 	bl	2f9c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    22a0:	4b02      	ldr	r3, [pc, #8]	; (22ac <gpio_nrfx_pin_configure+0x154>)
    22a2:	4298      	cmp	r0, r3
    22a4:	f43f af7c 	beq.w	21a0 <gpio_nrfx_pin_configure+0x48>
    22a8:	e78f      	b.n	21ca <gpio_nrfx_pin_configure+0x72>
    22aa:	bf00      	nop
    22ac:	0bad0000 	.word	0x0bad0000

000022b0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    22b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    22b2:	794b      	ldrb	r3, [r1, #5]
    22b4:	2b01      	cmp	r3, #1
    22b6:	d026      	beq.n	2306 <uarte_nrfx_configure+0x56>
    22b8:	2b03      	cmp	r3, #3
    22ba:	d121      	bne.n	2300 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    22bc:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    22be:	798b      	ldrb	r3, [r1, #6]
    22c0:	2b03      	cmp	r3, #3
    22c2:	d11d      	bne.n	2300 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    22c4:	79cc      	ldrb	r4, [r1, #7]
    22c6:	b10c      	cbz	r4, 22cc <uarte_nrfx_configure+0x1c>
    22c8:	2c01      	cmp	r4, #1
    22ca:	d119      	bne.n	2300 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    22cc:	790a      	ldrb	r2, [r1, #4]
    22ce:	b112      	cbz	r2, 22d6 <uarte_nrfx_configure+0x26>
    22d0:	2a02      	cmp	r2, #2
    22d2:	d115      	bne.n	2300 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    22d4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    22d6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    22d8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    22da:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    22de:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    22e0:	d065      	beq.n	23ae <uarte_nrfx_configure+0xfe>
    22e2:	d82d      	bhi.n	2340 <uarte_nrfx_configure+0x90>
    22e4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    22e8:	d064      	beq.n	23b4 <uarte_nrfx_configure+0x104>
    22ea:	d816      	bhi.n	231a <uarte_nrfx_configure+0x6a>
    22ec:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    22f0:	d062      	beq.n	23b8 <uarte_nrfx_configure+0x108>
    22f2:	d80a      	bhi.n	230a <uarte_nrfx_configure+0x5a>
    22f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    22f8:	d061      	beq.n	23be <uarte_nrfx_configure+0x10e>
    22fa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    22fe:	d061      	beq.n	23c4 <uarte_nrfx_configure+0x114>
    2300:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2304:	e052      	b.n	23ac <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2306:	2600      	movs	r6, #0
    2308:	e7d9      	b.n	22be <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    230a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    230e:	d05c      	beq.n	23ca <uarte_nrfx_configure+0x11a>
    2310:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2314:	d1f4      	bne.n	2300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2316:	4b37      	ldr	r3, [pc, #220]	; (23f4 <uarte_nrfx_configure+0x144>)
    2318:	e03c      	b.n	2394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    231a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    231e:	d057      	beq.n	23d0 <uarte_nrfx_configure+0x120>
    2320:	d807      	bhi.n	2332 <uarte_nrfx_configure+0x82>
    2322:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2326:	d055      	beq.n	23d4 <uarte_nrfx_configure+0x124>
    2328:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    232c:	d1e8      	bne.n	2300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    232e:	4b32      	ldr	r3, [pc, #200]	; (23f8 <uarte_nrfx_configure+0x148>)
    2330:	e030      	b.n	2394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2332:	f647 2712 	movw	r7, #31250	; 0x7a12
    2336:	42bb      	cmp	r3, r7
    2338:	d1e2      	bne.n	2300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    233a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    233e:	e029      	b.n	2394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2340:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2344:	d048      	beq.n	23d8 <uarte_nrfx_configure+0x128>
    2346:	d813      	bhi.n	2370 <uarte_nrfx_configure+0xc0>
    2348:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    234c:	d047      	beq.n	23de <uarte_nrfx_configure+0x12e>
    234e:	d809      	bhi.n	2364 <uarte_nrfx_configure+0xb4>
    2350:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2354:	42bb      	cmp	r3, r7
    2356:	d044      	beq.n	23e2 <uarte_nrfx_configure+0x132>
    2358:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    235c:	d1d0      	bne.n	2300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    235e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2362:	e017      	b.n	2394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2364:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2368:	d1ca      	bne.n	2300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    236a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    236e:	e011      	b.n	2394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2370:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2374:	d038      	beq.n	23e8 <uarte_nrfx_configure+0x138>
    2376:	d808      	bhi.n	238a <uarte_nrfx_configure+0xda>
    2378:	4f20      	ldr	r7, [pc, #128]	; (23fc <uarte_nrfx_configure+0x14c>)
    237a:	42bb      	cmp	r3, r7
    237c:	d037      	beq.n	23ee <uarte_nrfx_configure+0x13e>
    237e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2382:	d1bd      	bne.n	2300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2384:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2388:	e004      	b.n	2394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    238a:	4f1d      	ldr	r7, [pc, #116]	; (2400 <uarte_nrfx_configure+0x150>)
    238c:	42bb      	cmp	r3, r7
    238e:	d1b7      	bne.n	2300 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2394:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2396:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    239a:	1d03      	adds	r3, r0, #4
    239c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    239e:	4334      	orrs	r4, r6
    23a0:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    23a2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    23a6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    23aa:	2000      	movs	r0, #0
}
    23ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    23ae:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    23b2:	e7ef      	b.n	2394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    23b4:	4b13      	ldr	r3, [pc, #76]	; (2404 <uarte_nrfx_configure+0x154>)
    23b6:	e7ed      	b.n	2394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    23b8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    23bc:	e7ea      	b.n	2394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    23be:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    23c2:	e7e7      	b.n	2394 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    23c4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    23c8:	e7e4      	b.n	2394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    23ca:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    23ce:	e7e1      	b.n	2394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    23d0:	4b0d      	ldr	r3, [pc, #52]	; (2408 <uarte_nrfx_configure+0x158>)
    23d2:	e7df      	b.n	2394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    23d4:	4b0d      	ldr	r3, [pc, #52]	; (240c <uarte_nrfx_configure+0x15c>)
    23d6:	e7dd      	b.n	2394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    23d8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    23dc:	e7da      	b.n	2394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    23de:	4b0c      	ldr	r3, [pc, #48]	; (2410 <uarte_nrfx_configure+0x160>)
    23e0:	e7d8      	b.n	2394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    23e2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    23e6:	e7d5      	b.n	2394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    23e8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    23ec:	e7d2      	b.n	2394 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    23ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    23f2:	e7cf      	b.n	2394 <uarte_nrfx_configure+0xe4>
    23f4:	0013b000 	.word	0x0013b000
    23f8:	004ea000 	.word	0x004ea000
    23fc:	0003d090 	.word	0x0003d090
    2400:	000f4240 	.word	0x000f4240
    2404:	00275000 	.word	0x00275000
    2408:	0075c000 	.word	0x0075c000
    240c:	003af000 	.word	0x003af000
    2410:	013a9000 	.word	0x013a9000

00002414 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    2418:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    241c:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    241e:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2422:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2426:	2100      	movs	r1, #0
    2428:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    242c:	4607      	mov	r7, r0
	data->dev = dev;
    242e:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2430:	aa01      	add	r2, sp, #4
    2432:	4648      	mov	r0, r9
    2434:	f002 fd39 	bl	4eaa <pinctrl_lookup_state>
	if (ret < 0) {
    2438:	1e05      	subs	r5, r0, #0
    243a:	db56      	blt.n	24ea <uarte_instance_init.constprop.0+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    243c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    243e:	f8d9 2000 	ldr.w	r2, [r9]
    2442:	7919      	ldrb	r1, [r3, #4]
    2444:	6818      	ldr	r0, [r3, #0]
    2446:	f002 fd4d 	bl	4ee4 <pinctrl_configure_pins>
	if (err < 0) {
    244a:	1e05      	subs	r5, r0, #0
    244c:	db4d      	blt.n	24ea <uarte_instance_init.constprop.0+0xd6>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    244e:	1d31      	adds	r1, r6, #4
    2450:	4638      	mov	r0, r7
    2452:	f7ff ff2d 	bl	22b0 <uarte_nrfx_configure>
	if (err) {
    2456:	4605      	mov	r5, r0
    2458:	2800      	cmp	r0, #0
    245a:	d146      	bne.n	24ea <uarte_instance_init.constprop.0+0xd6>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    245c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2460:	0799      	lsls	r1, r3, #30
    2462:	d519      	bpl.n	2498 <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2464:	f106 0012 	add.w	r0, r6, #18
    2468:	f001 f87c 	bl	3564 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    246c:	4b22      	ldr	r3, [pc, #136]	; (24f8 <uarte_instance_init.constprop.0+0xe4>)
    246e:	4298      	cmp	r0, r3
    2470:	d13f      	bne.n	24f2 <uarte_instance_init.constprop.0+0xde>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2472:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2474:	00c3      	lsls	r3, r0, #3
    2476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    247a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    247e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2482:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2486:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    248a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    248e:	4a1b      	ldr	r2, [pc, #108]	; (24fc <uarte_instance_init.constprop.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2490:	2301      	movs	r3, #1
    2492:	4083      	lsls	r3, r0
    2494:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2498:	2308      	movs	r3, #8
    249a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    249e:	f898 3008 	ldrb.w	r3, [r8, #8]
    24a2:	b95b      	cbnz	r3, 24bc <uarte_instance_init.constprop.0+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24a4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    24a8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    24ac:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    24b0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    24b4:	2301      	movs	r3, #1
    24b6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    24ba:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    24bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    24c0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    24c2:	bf5c      	itt	pl
    24c4:	f44f 7280 	movpl.w	r2, #256	; 0x100
    24c8:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    24cc:	06db      	lsls	r3, r3, #27
    24ce:	bf44      	itt	mi
    24d0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    24d4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    24d8:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    24da:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    24dc:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    24e0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    24e4:	2301      	movs	r3, #1
    24e6:	60a3      	str	r3, [r4, #8]
    24e8:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    24ea:	4628      	mov	r0, r5
    24ec:	b003      	add	sp, #12
    24ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    24f2:	f06f 0504 	mvn.w	r5, #4
    24f6:	e7f8      	b.n	24ea <uarte_instance_init.constprop.0+0xd6>
    24f8:	0bad0000 	.word	0x0bad0000
    24fc:	4001f000 	.word	0x4001f000

00002500 <uarte_nrfx_poll_out>:
{
    2500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    2502:	6906      	ldr	r6, [r0, #16]
{
    2504:	4605      	mov	r5, r0
    2506:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2508:	f002 febd 	bl	5286 <k_is_in_isr>
    250c:	b910      	cbnz	r0, 2514 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    250e:	4b2c      	ldr	r3, [pc, #176]	; (25c0 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    2510:	781b      	ldrb	r3, [r3, #0]
    2512:	b983      	cbnz	r3, 2536 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2514:	f04f 0320 	mov.w	r3, #32
    2518:	f3ef 8411 	mrs	r4, BASEPRI
    251c:	f383 8812 	msr	BASEPRI_MAX, r3
    2520:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2524:	6868      	ldr	r0, [r5, #4]
    2526:	f002 fc58 	bl	4dda <is_tx_ready.isra.0>
    252a:	bb28      	cbnz	r0, 2578 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    252c:	f384 8811 	msr	BASEPRI, r4
    2530:	f3bf 8f6f 	isb	sy
}
    2534:	e7ee      	b.n	2514 <uarte_nrfx_poll_out+0x14>
{
    2536:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2538:	6868      	ldr	r0, [r5, #4]
    253a:	f002 fc4e 	bl	4dda <is_tx_ready.isra.0>
    253e:	b970      	cbnz	r0, 255e <uarte_nrfx_poll_out+0x5e>
    2540:	2001      	movs	r0, #1
    2542:	f002 fd87 	bl	5054 <nrfx_busy_wait>
    2546:	3c01      	subs	r4, #1
    2548:	d1f6      	bne.n	2538 <uarte_nrfx_poll_out+0x38>
    254a:	2100      	movs	r1, #0
    254c:	2021      	movs	r0, #33	; 0x21
    254e:	f001 fe01 	bl	4154 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2552:	e7f0      	b.n	2536 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2554:	f384 8811 	msr	BASEPRI, r4
    2558:	f3bf 8f6f 	isb	sy
}
    255c:	e7f5      	b.n	254a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    255e:	f04f 0320 	mov.w	r3, #32
    2562:	f3ef 8411 	mrs	r4, BASEPRI
    2566:	f383 8812 	msr	BASEPRI_MAX, r3
    256a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    256e:	6868      	ldr	r0, [r5, #4]
    2570:	f002 fc33 	bl	4dda <is_tx_ready.isra.0>
    2574:	2800      	cmp	r0, #0
    2576:	d0ed      	beq.n	2554 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    2578:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    257c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    257e:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    2580:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2582:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2586:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    258a:	2200      	movs	r2, #0
    258c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2590:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2594:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2598:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    259c:	684a      	ldr	r2, [r1, #4]
    259e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    25a0:	bf41      	itttt	mi
    25a2:	2208      	movmi	r2, #8
    25a4:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    25a8:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    25ac:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25b0:	2201      	movs	r2, #1
    25b2:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    25b4:	f384 8811 	msr	BASEPRI, r4
    25b8:	f3bf 8f6f 	isb	sy
}
    25bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25be:	bf00      	nop
    25c0:	20000fdb 	.word	0x20000fdb

000025c4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    25c4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    25c6:	2301      	movs	r3, #1
    25c8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    25ca:	4a11      	ldr	r2, [pc, #68]	; (2610 <compare_int_lock+0x4c>)
    25cc:	f3bf 8f5b 	dmb	ish
    25d0:	43dc      	mvns	r4, r3
    25d2:	e852 1f00 	ldrex	r1, [r2]
    25d6:	ea01 0c04 	and.w	ip, r1, r4
    25da:	e842 ce00 	strex	lr, ip, [r2]
    25de:	f1be 0f00 	cmp.w	lr, #0
    25e2:	d1f6      	bne.n	25d2 <compare_int_lock+0xe>
    25e4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    25e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    25ec:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    25f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    25f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    25f8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    25fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2600:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2604:	420b      	tst	r3, r1
}
    2606:	bf14      	ite	ne
    2608:	2001      	movne	r0, #1
    260a:	2000      	moveq	r0, #0
    260c:	bd10      	pop	{r4, pc}
    260e:	bf00      	nop
    2610:	20000900 	.word	0x20000900

00002614 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2614:	4919      	ldr	r1, [pc, #100]	; (267c <sys_clock_timeout_handler+0x68>)
{
    2616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2618:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    261a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    261e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2620:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2624:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2628:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    262a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    262e:	d222      	bcs.n	2676 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2630:	4b13      	ldr	r3, [pc, #76]	; (2680 <sys_clock_timeout_handler+0x6c>)
    2632:	681b      	ldr	r3, [r3, #0]
    2634:	0a1a      	lsrs	r2, r3, #8
    2636:	061b      	lsls	r3, r3, #24
    2638:	195e      	adds	r6, r3, r5
    263a:	4b12      	ldr	r3, [pc, #72]	; (2684 <sys_clock_timeout_handler+0x70>)
    263c:	f142 0700 	adc.w	r7, r2, #0
    2640:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    2644:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2646:	f001 fed5 	bl	43f4 <sys_clock_announce>
    return p_reg->CC[ch];
    264a:	00a3      	lsls	r3, r4, #2
    264c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2650:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2654:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2658:	42aa      	cmp	r2, r5
    265a:	d10b      	bne.n	2674 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    265c:	b91e      	cbnz	r6, 2666 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    265e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2662:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2666:	4b08      	ldr	r3, [pc, #32]	; (2688 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2668:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    266c:	fa00 f404 	lsl.w	r4, r0, r4
    2670:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    2676:	2600      	movs	r6, #0
    2678:	e7e5      	b.n	2646 <sys_clock_timeout_handler+0x32>
    267a:	bf00      	nop
    267c:	200001f8 	.word	0x200001f8
    2680:	20000904 	.word	0x20000904
    2684:	200001e0 	.word	0x200001e0
    2688:	40011000 	.word	0x40011000

0000268c <compare_int_unlock>:
	if (key) {
    268c:	b319      	cbz	r1, 26d6 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    268e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    2692:	2301      	movs	r3, #1
    2694:	4a10      	ldr	r2, [pc, #64]	; (26d8 <compare_int_unlock+0x4c>)
    2696:	4083      	lsls	r3, r0
    2698:	e852 1f00 	ldrex	r1, [r2]
    269c:	4319      	orrs	r1, r3
    269e:	e842 1c00 	strex	ip, r1, [r2]
    26a2:	f1bc 0f00 	cmp.w	ip, #0
    26a6:	d1f7      	bne.n	2698 <compare_int_unlock+0xc>
    26a8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    26ac:	4a0b      	ldr	r2, [pc, #44]	; (26dc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    26ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    26b2:	4083      	lsls	r3, r0
    26b4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    26b8:	4b09      	ldr	r3, [pc, #36]	; (26e0 <compare_int_unlock+0x54>)
    26ba:	f3bf 8f5b 	dmb	ish
    26be:	681b      	ldr	r3, [r3, #0]
    26c0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    26c4:	fa23 f000 	lsr.w	r0, r3, r0
    26c8:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26ca:	bf42      	ittt	mi
    26cc:	4b05      	ldrmi	r3, [pc, #20]	; (26e4 <compare_int_unlock+0x58>)
    26ce:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    26d2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    26d6:	4770      	bx	lr
    26d8:	20000900 	.word	0x20000900
    26dc:	40011000 	.word	0x40011000
    26e0:	200008fc 	.word	0x200008fc
    26e4:	e000e100 	.word	0xe000e100

000026e8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    26e8:	4b0d      	ldr	r3, [pc, #52]	; (2720 <z_nrf_rtc_timer_read+0x38>)
    26ea:	6818      	ldr	r0, [r3, #0]
    26ec:	0a01      	lsrs	r1, r0, #8
    26ee:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    26f0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    26f4:	4b0b      	ldr	r3, [pc, #44]	; (2724 <z_nrf_rtc_timer_read+0x3c>)
    26f6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    26fa:	1818      	adds	r0, r3, r0
    26fc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2704:	d20a      	bcs.n	271c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2706:	4b08      	ldr	r3, [pc, #32]	; (2728 <z_nrf_rtc_timer_read+0x40>)
    2708:	e9d3 2300 	ldrd	r2, r3, [r3]
    270c:	4290      	cmp	r0, r2
    270e:	eb71 0303 	sbcs.w	r3, r1, r3
    2712:	d203      	bcs.n	271c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2714:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2718:	f141 0100 	adc.w	r1, r1, #0
}
    271c:	4770      	bx	lr
    271e:	bf00      	nop
    2720:	20000904 	.word	0x20000904
    2724:	40011000 	.word	0x40011000
    2728:	200001e0 	.word	0x200001e0

0000272c <compare_set>:
{
    272c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2730:	b085      	sub	sp, #20
    2732:	4616      	mov	r6, r2
    2734:	4698      	mov	r8, r3
    2736:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    2738:	f7ff ff44 	bl	25c4 <compare_int_lock>
    273c:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    273e:	f7ff ffd3 	bl	26e8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2742:	42b0      	cmp	r0, r6
    2744:	eb71 0308 	sbcs.w	r3, r1, r8
    2748:	d278      	bcs.n	283c <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    274a:	4b46      	ldr	r3, [pc, #280]	; (2864 <compare_set+0x138>)
    274c:	1a30      	subs	r0, r6, r0
    274e:	eb68 0101 	sbc.w	r1, r8, r1
    2752:	4298      	cmp	r0, r3
    2754:	f171 0300 	sbcs.w	r3, r1, #0
    2758:	f080 8081 	bcs.w	285e <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    275c:	4b42      	ldr	r3, [pc, #264]	; (2868 <compare_set+0x13c>)
    275e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2762:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    2766:	45d8      	cmp	r8, fp
    2768:	bf08      	it	eq
    276a:	4556      	cmpeq	r6, sl
    276c:	d051      	beq.n	2812 <compare_set+0xe6>
    276e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    2772:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2776:	f105 0750 	add.w	r7, r5, #80	; 0x50
    277a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    277e:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2780:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2784:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2788:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    278a:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    278e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2792:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    2794:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    2798:	4b34      	ldr	r3, [pc, #208]	; (286c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    279a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    279e:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    27a0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    27a4:	1a40      	subs	r0, r0, r1
    27a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    27aa:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    27ae:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    27b0:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    27b4:	d107      	bne.n	27c6 <compare_set+0x9a>
    27b6:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    27ba:	2013      	movs	r0, #19
    27bc:	f002 fe65 	bl	548a <z_impl_k_busy_wait>
    27c0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    27c4:	4b29      	ldr	r3, [pc, #164]	; (286c <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    27c6:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    27ca:	eba4 000c 	sub.w	r0, r4, ip
    27ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    27d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    27d6:	bf88      	it	hi
    27d8:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27da:	2000      	movs	r0, #0
    27dc:	6038      	str	r0, [r7, #0]
    27de:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    27e0:	9801      	ldr	r0, [sp, #4]
    27e2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    27e6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    27ea:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    27ee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    27f2:	4281      	cmp	r1, r0
    27f4:	d006      	beq.n	2804 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    27f6:	1a20      	subs	r0, r4, r0
    27f8:	3802      	subs	r0, #2
    27fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    27fe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2802:	d819      	bhi.n	2838 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    2804:	1aa4      	subs	r4, r4, r2
    2806:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    280a:	eb14 0a06 	adds.w	sl, r4, r6
    280e:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    2812:	4915      	ldr	r1, [pc, #84]	; (2868 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    2814:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    2816:	012b      	lsls	r3, r5, #4
    2818:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    281c:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    2820:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    2822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2824:	6053      	str	r3, [r2, #4]
	return ret;
    2826:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    2828:	4628      	mov	r0, r5
    282a:	9900      	ldr	r1, [sp, #0]
    282c:	f7ff ff2e 	bl	268c <compare_int_unlock>
}
    2830:	4620      	mov	r0, r4
    2832:	b005      	add	sp, #20
    2834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2838:	4620      	mov	r0, r4
    283a:	e7b1      	b.n	27a0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    283c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    283e:	4a0c      	ldr	r2, [pc, #48]	; (2870 <compare_set+0x144>)
    2840:	f3bf 8f5b 	dmb	ish
    2844:	40ab      	lsls	r3, r5
    2846:	e852 1f00 	ldrex	r1, [r2]
    284a:	4319      	orrs	r1, r3
    284c:	e842 1000 	strex	r0, r1, [r2]
    2850:	2800      	cmp	r0, #0
    2852:	d1f8      	bne.n	2846 <compare_set+0x11a>
    2854:	f3bf 8f5b 	dmb	ish
    2858:	46b2      	mov	sl, r6
    285a:	46c3      	mov	fp, r8
    285c:	e7d9      	b.n	2812 <compare_set+0xe6>
			return -EINVAL;
    285e:	f06f 0415 	mvn.w	r4, #21
    2862:	e7e1      	b.n	2828 <compare_set+0xfc>
    2864:	01000001 	.word	0x01000001
    2868:	200001e8 	.word	0x200001e8
    286c:	40011000 	.word	0x40011000
    2870:	200008fc 	.word	0x200008fc

00002874 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2874:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2876:	4b19      	ldr	r3, [pc, #100]	; (28dc <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    2878:	4d19      	ldr	r5, [pc, #100]	; (28e0 <sys_clock_driver_init+0x6c>)
    287a:	2400      	movs	r4, #0
    287c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2884:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    2888:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    288c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2890:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2894:	4b13      	ldr	r3, [pc, #76]	; (28e4 <sys_clock_driver_init+0x70>)
    2896:	2602      	movs	r6, #2
    2898:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    289c:	2101      	movs	r1, #1
    289e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    28a2:	2011      	movs	r0, #17
    28a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    28a8:	4622      	mov	r2, r4
    28aa:	f7fe fe63 	bl	1574 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    28ae:	2011      	movs	r0, #17
    28b0:	f7fe fe42 	bl	1538 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    28b4:	4a0c      	ldr	r2, [pc, #48]	; (28e8 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    28b6:	2301      	movs	r3, #1
    28b8:	60ab      	str	r3, [r5, #8]
    28ba:	602b      	str	r3, [r5, #0]
    28bc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    28be:	4b0b      	ldr	r3, [pc, #44]	; (28ec <sys_clock_driver_init+0x78>)
    28c0:	4a0b      	ldr	r2, [pc, #44]	; (28f0 <sys_clock_driver_init+0x7c>)
    28c2:	9300      	str	r3, [sp, #0]
    28c4:	9401      	str	r4, [sp, #4]
    28c6:	2300      	movs	r3, #0
    28c8:	4620      	mov	r0, r4
    28ca:	f7ff ff2f 	bl	272c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    28ce:	4630      	mov	r0, r6
    28d0:	f7ff faee 	bl	1eb0 <z_nrf_clock_control_lf_on>

	return 0;
}
    28d4:	4620      	mov	r0, r4
    28d6:	b002      	add	sp, #8
    28d8:	bd70      	pop	{r4, r5, r6, pc}
    28da:	bf00      	nop
    28dc:	200001e8 	.word	0x200001e8
    28e0:	40011000 	.word	0x40011000
    28e4:	e000e100 	.word	0xe000e100
    28e8:	20000900 	.word	0x20000900
    28ec:	00002615 	.word	0x00002615
    28f0:	007fffff 	.word	0x007fffff

000028f4 <rtc_nrf_isr>:
{
    28f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    28f8:	4c35      	ldr	r4, [pc, #212]	; (29d0 <rtc_nrf_isr+0xdc>)
    28fa:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    28fe:	079a      	lsls	r2, r3, #30
    2900:	d50b      	bpl.n	291a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2902:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2906:	b143      	cbz	r3, 291a <rtc_nrf_isr+0x26>
		overflow_cnt++;
    2908:	4a32      	ldr	r2, [pc, #200]	; (29d4 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    290a:	2300      	movs	r3, #0
    290c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2910:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2914:	6813      	ldr	r3, [r2, #0]
    2916:	3301      	adds	r3, #1
    2918:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    291a:	f04f 0320 	mov.w	r3, #32
    291e:	f3ef 8211 	mrs	r2, BASEPRI
    2922:	f383 8812 	msr	BASEPRI_MAX, r3
    2926:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    292a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    292e:	03db      	lsls	r3, r3, #15
    2930:	d512      	bpl.n	2958 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2932:	f3bf 8f5b 	dmb	ish
    2936:	4b28      	ldr	r3, [pc, #160]	; (29d8 <rtc_nrf_isr+0xe4>)
    2938:	e853 1f00 	ldrex	r1, [r3]
    293c:	f021 0001 	bic.w	r0, r1, #1
    2940:	e843 0600 	strex	r6, r0, [r3]
    2944:	2e00      	cmp	r6, #0
    2946:	d1f7      	bne.n	2938 <rtc_nrf_isr+0x44>
    2948:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    294c:	2900      	cmp	r1, #0
    294e:	d136      	bne.n	29be <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2950:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    2954:	2b00      	cmp	r3, #0
    2956:	d132      	bne.n	29be <rtc_nrf_isr+0xca>
{
    2958:	2300      	movs	r3, #0
	__asm__ volatile(
    295a:	f382 8811 	msr	BASEPRI, r2
    295e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    2962:	b34b      	cbz	r3, 29b8 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    2964:	f7ff fec0 	bl	26e8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2968:	f04f 0320 	mov.w	r3, #32
    296c:	f3ef 8c11 	mrs	ip, BASEPRI
    2970:	f383 8812 	msr	BASEPRI_MAX, r3
    2974:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2978:	4b18      	ldr	r3, [pc, #96]	; (29dc <rtc_nrf_isr+0xe8>)
    297a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    297e:	42b0      	cmp	r0, r6
    2980:	eb71 0207 	sbcs.w	r2, r1, r7
    2984:	f04f 0200 	mov.w	r2, #0
    2988:	d320      	bcc.n	29cc <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    298a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    298e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    2992:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2996:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    299a:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    299c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    29a0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    29a4:	f38c 8811 	msr	BASEPRI, ip
    29a8:	f3bf 8f6f 	isb	sy
		if (handler) {
    29ac:	b121      	cbz	r1, 29b8 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    29ae:	9500      	str	r5, [sp, #0]
    29b0:	4632      	mov	r2, r6
    29b2:	463b      	mov	r3, r7
    29b4:	2000      	movs	r0, #0
    29b6:	4788      	blx	r1
}
    29b8:	b003      	add	sp, #12
    29ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    29be:	2300      	movs	r3, #0
    29c0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    29c4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    29c8:	2301      	movs	r3, #1
}
    29ca:	e7c6      	b.n	295a <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    29cc:	4611      	mov	r1, r2
    29ce:	e7e9      	b.n	29a4 <rtc_nrf_isr+0xb0>
    29d0:	40011000 	.word	0x40011000
    29d4:	20000904 	.word	0x20000904
    29d8:	200008fc 	.word	0x200008fc
    29dc:	200001e8 	.word	0x200001e8

000029e0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    29e0:	1c43      	adds	r3, r0, #1
{
    29e2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    29e4:	d021      	beq.n	2a2a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    29e6:	2801      	cmp	r0, #1
    29e8:	dd21      	ble.n	2a2e <sys_clock_set_timeout+0x4e>
    29ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    29ee:	da20      	bge.n	2a32 <sys_clock_set_timeout+0x52>
    29f0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    29f2:	f7ff fe79 	bl	26e8 <z_nrf_rtc_timer_read>
    29f6:	4b10      	ldr	r3, [pc, #64]	; (2a38 <sys_clock_set_timeout+0x58>)
    29f8:	e9d3 1300 	ldrd	r1, r3, [r3]
    29fc:	1a40      	subs	r0, r0, r1
		ticks = 0;
    29fe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2a02:	bf28      	it	cs
    2a04:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2a06:	3001      	adds	r0, #1
    2a08:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    2a0a:	480c      	ldr	r0, [pc, #48]	; (2a3c <sys_clock_set_timeout+0x5c>)
    2a0c:	4282      	cmp	r2, r0
    2a0e:	bf28      	it	cs
    2a10:	4602      	movcs	r2, r0
    2a12:	1852      	adds	r2, r2, r1
    2a14:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2a18:	4909      	ldr	r1, [pc, #36]	; (2a40 <sys_clock_set_timeout+0x60>)
    2a1a:	9001      	str	r0, [sp, #4]
    2a1c:	9100      	str	r1, [sp, #0]
    2a1e:	f143 0300 	adc.w	r3, r3, #0
    2a22:	f7ff fe83 	bl	272c <compare_set>
}
    2a26:	b002      	add	sp, #8
    2a28:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2a2a:	4804      	ldr	r0, [pc, #16]	; (2a3c <sys_clock_set_timeout+0x5c>)
    2a2c:	e7e0      	b.n	29f0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2a2e:	2400      	movs	r4, #0
    2a30:	e7df      	b.n	29f2 <sys_clock_set_timeout+0x12>
    2a32:	4c02      	ldr	r4, [pc, #8]	; (2a3c <sys_clock_set_timeout+0x5c>)
    2a34:	e7dd      	b.n	29f2 <sys_clock_set_timeout+0x12>
    2a36:	bf00      	nop
    2a38:	200001f8 	.word	0x200001f8
    2a3c:	007fffff 	.word	0x007fffff
    2a40:	00002615 	.word	0x00002615

00002a44 <sys_clock_elapsed>:
{
    2a44:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2a46:	f7ff fe4f 	bl	26e8 <z_nrf_rtc_timer_read>
    2a4a:	4b02      	ldr	r3, [pc, #8]	; (2a54 <sys_clock_elapsed+0x10>)
    2a4c:	681b      	ldr	r3, [r3, #0]
}
    2a4e:	1ac0      	subs	r0, r0, r3
    2a50:	bd08      	pop	{r3, pc}
    2a52:	bf00      	nop
    2a54:	200001f8 	.word	0x200001f8

00002a58 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    2a58:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2a5c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    2a5e:	2801      	cmp	r0, #1
    2a60:	4b04      	ldr	r3, [pc, #16]	; (2a74 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2a62:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    2a66:	bf18      	it	ne
    2a68:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2a6c:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    2a6e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    2a72:	4770      	bx	lr
    2a74:	50000300 	.word	0x50000300

00002a78 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    2a78:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2a7c:	2b00      	cmp	r3, #0
{
    2a7e:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2a80:	bf07      	ittee	eq
    2a82:	4614      	moveq	r4, r2
    2a84:	460d      	moveq	r5, r1
    2a86:	2401      	movne	r4, #1
    2a88:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    2a8a:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    2a8e:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
    2a92:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    2a96:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2a9a:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
    2a9e:	4b06      	ldr	r3, [pc, #24]	; (2ab8 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2aa0:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
    2aa4:	bf08      	it	eq
    2aa6:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    2aaa:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2aae:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    2ab2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    2ab6:	bd30      	pop	{r4, r5, pc}
    2ab8:	50000300 	.word	0x50000300

00002abc <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    2abc:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2ac0:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    2ac2:	2801      	cmp	r0, #1
    2ac4:	4b04      	ldr	r3, [pc, #16]	; (2ad8 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2ac6:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    2aca:	bf18      	it	ne
    2acc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2ad0:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    2ad2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    2ad6:	4770      	bx	lr
    2ad8:	50000300 	.word	0x50000300

00002adc <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2adc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    2ae0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2ae4:	2a08      	cmp	r2, #8
    2ae6:	d106      	bne.n	2af6 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2ae8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    2aec:	2b05      	cmp	r3, #5
    2aee:	d802      	bhi.n	2af6 <nrf52_errata_103+0x1a>
    2af0:	4a02      	ldr	r2, [pc, #8]	; (2afc <nrf52_errata_103+0x20>)
    2af2:	5cd0      	ldrb	r0, [r2, r3]
    2af4:	4770      	bx	lr
        return false;
    2af6:	2000      	movs	r0, #0
}
    2af8:	4770      	bx	lr
    2afa:	bf00      	nop
    2afc:	00005b85 	.word	0x00005b85

00002b00 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2b00:	4a02      	ldr	r2, [pc, #8]	; (2b0c <nvmc_wait+0xc>)
    2b02:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2b06:	2b00      	cmp	r3, #0
    2b08:	d0fb      	beq.n	2b02 <nvmc_wait+0x2>
}
    2b0a:	4770      	bx	lr
    2b0c:	4001e000 	.word	0x4001e000

00002b10 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2b10:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2b12:	f002 fa95 	bl	5040 <nrf52_errata_136>
    2b16:	b140      	cbz	r0, 2b2a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    2b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b1c:	2200      	movs	r2, #0
    2b1e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2b22:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2b26:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2b2a:	f002 fa89 	bl	5040 <nrf52_errata_136>
    2b2e:	2800      	cmp	r0, #0
    2b30:	d046      	beq.n	2bc0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2b36:	4b60      	ldr	r3, [pc, #384]	; (2cb8 <SystemInit+0x1a8>)
    2b38:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2b3c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2b40:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2b44:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2b48:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2b4c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2b50:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2b54:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2b58:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2b5c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2b60:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2b64:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2b68:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2b6c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2b70:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2b74:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2b78:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2b7c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2b80:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2b84:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2b88:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2b8c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2b90:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2b94:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2b98:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2b9c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2ba0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2ba4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2ba8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2bac:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2bb0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2bb4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2bb8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2bbc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    2bc0:	f7ff ff8c 	bl	2adc <nrf52_errata_103>
    2bc4:	b118      	cbz	r0, 2bce <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    2bc6:	4b3d      	ldr	r3, [pc, #244]	; (2cbc <SystemInit+0x1ac>)
    2bc8:	4a3d      	ldr	r2, [pc, #244]	; (2cc0 <SystemInit+0x1b0>)
    2bca:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    2bce:	f7ff ff85 	bl	2adc <nrf52_errata_103>
    2bd2:	b118      	cbz	r0, 2bdc <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    2bd4:	4b3b      	ldr	r3, [pc, #236]	; (2cc4 <SystemInit+0x1b4>)
    2bd6:	22fb      	movs	r2, #251	; 0xfb
    2bd8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    2bdc:	f7ff ff7e 	bl	2adc <nrf52_errata_103>
    2be0:	b170      	cbz	r0, 2c00 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    2be2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2be6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2bea:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    2bee:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    2bf2:	f022 020f 	bic.w	r2, r2, #15
    2bf6:	f003 030f 	and.w	r3, r3, #15
    2bfa:	4313      	orrs	r3, r2
    2bfc:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    2c00:	f7ff ff6c 	bl	2adc <nrf52_errata_103>
    2c04:	b120      	cbz	r0, 2c10 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    2c06:	4b30      	ldr	r3, [pc, #192]	; (2cc8 <SystemInit+0x1b8>)
    2c08:	f44f 7200 	mov.w	r2, #512	; 0x200
    2c0c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2c10:	f002 fa16 	bl	5040 <nrf52_errata_136>
    2c14:	b148      	cbz	r0, 2c2a <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c1a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2c1e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2c20:	bf44      	itt	mi
    2c22:	f06f 0201 	mvnmi.w	r2, #1
    2c26:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2c2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2c2e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2c32:	2a08      	cmp	r2, #8
    2c34:	d10e      	bne.n	2c54 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2c36:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    2c3a:	2b05      	cmp	r3, #5
    2c3c:	d802      	bhi.n	2c44 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    2c3e:	4a23      	ldr	r2, [pc, #140]	; (2ccc <SystemInit+0x1bc>)
    2c40:	5cd3      	ldrb	r3, [r2, r3]
    2c42:	b13b      	cbz	r3, 2c54 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2c44:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2c48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2c4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c50:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2c54:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2c58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2c5c:	2a00      	cmp	r2, #0
    2c5e:	db03      	blt.n	2c68 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2c60:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2c64:	2b00      	cmp	r3, #0
    2c66:	da22      	bge.n	2cae <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c68:	4919      	ldr	r1, [pc, #100]	; (2cd0 <SystemInit+0x1c0>)
    2c6a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2c6c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c70:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2c74:	2412      	movs	r4, #18
    nvmc_wait();
    2c76:	f7ff ff43 	bl	2b00 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2c7a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2c7e:	f7ff ff3f 	bl	2b00 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2c82:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2c86:	f7ff ff3b 	bl	2b00 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2c8a:	2300      	movs	r3, #0
    2c8c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2c90:	f7ff ff36 	bl	2b00 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    2c94:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2c98:	490e      	ldr	r1, [pc, #56]	; (2cd4 <SystemInit+0x1c4>)
    2c9a:	4b0f      	ldr	r3, [pc, #60]	; (2cd8 <SystemInit+0x1c8>)
    2c9c:	68ca      	ldr	r2, [r1, #12]
    2c9e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2ca2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2ca4:	60cb      	str	r3, [r1, #12]
    2ca6:	f3bf 8f4f 	dsb	sy
    __NOP();
    2caa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2cac:	e7fd      	b.n	2caa <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2cae:	4b0b      	ldr	r3, [pc, #44]	; (2cdc <SystemInit+0x1cc>)
    2cb0:	4a0b      	ldr	r2, [pc, #44]	; (2ce0 <SystemInit+0x1d0>)
    2cb2:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    2cb4:	bd10      	pop	{r4, pc}
    2cb6:	bf00      	nop
    2cb8:	4000c000 	.word	0x4000c000
    2cbc:	40005000 	.word	0x40005000
    2cc0:	00038148 	.word	0x00038148
    2cc4:	4000f000 	.word	0x4000f000
    2cc8:	40029000 	.word	0x40029000
    2ccc:	00005b7f 	.word	0x00005b7f
    2cd0:	4001e000 	.word	0x4001e000
    2cd4:	e000ed00 	.word	0xe000ed00
    2cd8:	05fa0004 	.word	0x05fa0004
    2cdc:	20000084 	.word	0x20000084
    2ce0:	03d09000 	.word	0x03d09000

00002ce4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2ce4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2ce6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2ce8:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2cea:	fab2 f382 	clz	r3, r2
    2cee:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    2cf2:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    2cf4:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    2cf6:	d014      	beq.n	2d22 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2cf8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2cfc:	fa05 f303 	lsl.w	r3, r5, r3
    2d00:	ea22 0303 	bic.w	r3, r2, r3
    2d04:	e850 6f00 	ldrex	r6, [r0]
    2d08:	4296      	cmp	r6, r2
    2d0a:	d104      	bne.n	2d16 <nrfx_flag32_alloc+0x32>
    2d0c:	e840 3c00 	strex	ip, r3, [r0]
    2d10:	f1bc 0f00 	cmp.w	ip, #0
    2d14:	d1f6      	bne.n	2d04 <nrfx_flag32_alloc+0x20>
    2d16:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2d1a:	d1e5      	bne.n	2ce8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    2d1c:	4802      	ldr	r0, [pc, #8]	; (2d28 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    2d1e:	700c      	strb	r4, [r1, #0]
}
    2d20:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    2d22:	4802      	ldr	r0, [pc, #8]	; (2d2c <nrfx_flag32_alloc+0x48>)
    2d24:	e7fc      	b.n	2d20 <nrfx_flag32_alloc+0x3c>
    2d26:	bf00      	nop
    2d28:	0bad0000 	.word	0x0bad0000
    2d2c:	0bad0002 	.word	0x0bad0002

00002d30 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2d30:	6803      	ldr	r3, [r0, #0]
    2d32:	40cb      	lsrs	r3, r1
    2d34:	07db      	lsls	r3, r3, #31
{
    2d36:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    2d38:	d415      	bmi.n	2d66 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2d3a:	2301      	movs	r3, #1
    2d3c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    2d40:	6803      	ldr	r3, [r0, #0]
    2d42:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    2d46:	ea41 0203 	orr.w	r2, r1, r3
    2d4a:	e850 4f00 	ldrex	r4, [r0]
    2d4e:	429c      	cmp	r4, r3
    2d50:	d104      	bne.n	2d5c <nrfx_flag32_free+0x2c>
    2d52:	e840 2c00 	strex	ip, r2, [r0]
    2d56:	f1bc 0f00 	cmp.w	ip, #0
    2d5a:	d1f6      	bne.n	2d4a <nrfx_flag32_free+0x1a>
    2d5c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2d60:	d1ee      	bne.n	2d40 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    2d62:	4802      	ldr	r0, [pc, #8]	; (2d6c <nrfx_flag32_free+0x3c>)
}
    2d64:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2d66:	4802      	ldr	r0, [pc, #8]	; (2d70 <nrfx_flag32_free+0x40>)
    2d68:	e7fc      	b.n	2d64 <nrfx_flag32_free+0x34>
    2d6a:	bf00      	nop
    2d6c:	0bad0000 	.word	0x0bad0000
    2d70:	0bad0004 	.word	0x0bad0004

00002d74 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    2d76:	4604      	mov	r4, r0
    2d78:	b118      	cbz	r0, 2d82 <clock_stop+0xe>
    2d7a:	2801      	cmp	r0, #1
    2d7c:	d029      	beq.n	2dd2 <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2d7e:	b003      	add	sp, #12
    2d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    2d82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d86:	2202      	movs	r2, #2
    2d88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d8c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    2d90:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d94:	2201      	movs	r2, #1
    2d96:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2d98:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2d9a:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2d9c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2da0:	bf14      	ite	ne
    2da2:	2500      	movne	r5, #0
    2da4:	f10d 0507 	addeq.w	r5, sp, #7
    2da8:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2dac:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    2db0:	b1d4      	cbz	r4, 2de8 <clock_stop+0x74>
    2db2:	2c01      	cmp	r4, #1
    2db4:	d1e3      	bne.n	2d7e <clock_stop+0xa>
            if (p_clk_src != NULL)
    2db6:	b125      	cbz	r5, 2dc2 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2db8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2dbc:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2dc0:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2dc2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2dc6:	03db      	lsls	r3, r3, #15
    2dc8:	d418      	bmi.n	2dfc <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
    2dca:	4b13      	ldr	r3, [pc, #76]	; (2e18 <clock_stop+0xa4>)
    2dcc:	2200      	movs	r2, #0
    2dce:	715a      	strb	r2, [r3, #5]
    2dd0:	e7d5      	b.n	2d7e <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    2dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dd6:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    2dd8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ddc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2de0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2de4:	6058      	str	r0, [r3, #4]
}
    2de6:	e7d7      	b.n	2d98 <clock_stop+0x24>
            if (p_clk_src != NULL)
    2de8:	b125      	cbz	r5, 2df4 <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2dea:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2dee:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2df2:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2df4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2df8:	03da      	lsls	r2, r3, #15
    2dfa:	d5c0      	bpl.n	2d7e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2dfc:	b92d      	cbnz	r5, 2e0a <clock_stop+0x96>
    2dfe:	2001      	movs	r0, #1
    2e00:	f002 f928 	bl	5054 <nrfx_busy_wait>
    2e04:	3f01      	subs	r7, #1
    2e06:	d1d3      	bne.n	2db0 <clock_stop+0x3c>
    2e08:	e003      	b.n	2e12 <clock_stop+0x9e>
    2e0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2e0e:	2b01      	cmp	r3, #1
    2e10:	d0f5      	beq.n	2dfe <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2e12:	2c01      	cmp	r4, #1
    2e14:	d0d9      	beq.n	2dca <clock_stop+0x56>
    2e16:	e7b2      	b.n	2d7e <clock_stop+0xa>
    2e18:	20000908 	.word	0x20000908

00002e1c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2e1c:	4b04      	ldr	r3, [pc, #16]	; (2e30 <nrfx_clock_init+0x14>)
    2e1e:	791a      	ldrb	r2, [r3, #4]
    2e20:	b922      	cbnz	r2, 2e2c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2e22:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2e24:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2e26:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2e28:	4802      	ldr	r0, [pc, #8]	; (2e34 <nrfx_clock_init+0x18>)
    2e2a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2e2c:	4802      	ldr	r0, [pc, #8]	; (2e38 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2e2e:	4770      	bx	lr
    2e30:	20000908 	.word	0x20000908
    2e34:	0bad0000 	.word	0x0bad0000
    2e38:	0bad000c 	.word	0x0bad000c

00002e3c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2e40:	b510      	push	{r4, lr}
    2e42:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2e46:	b16a      	cbz	r2, 2e64 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e48:	2200      	movs	r2, #0
    2e4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2e4e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2e52:	2201      	movs	r2, #1
    2e54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2e58:	4b11      	ldr	r3, [pc, #68]	; (2ea0 <nrfx_power_clock_irq_handler+0x64>)
    2e5a:	7958      	ldrb	r0, [r3, #5]
    2e5c:	b910      	cbnz	r0, 2e64 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    2e5e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2e60:	681b      	ldr	r3, [r3, #0]
    2e62:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e68:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2e6c:	b172      	cbz	r2, 2e8c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e6e:	2200      	movs	r2, #0
    2e70:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2e74:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2e78:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2e7c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2e80:	0792      	lsls	r2, r2, #30
    2e82:	d104      	bne.n	2e8e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2e84:	2201      	movs	r2, #1
    2e86:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e8a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2e8c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2e8e:	2202      	movs	r2, #2
    2e90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2e94:	4b02      	ldr	r3, [pc, #8]	; (2ea0 <nrfx_power_clock_irq_handler+0x64>)
}
    2e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2e9a:	681b      	ldr	r3, [r3, #0]
    2e9c:	2001      	movs	r0, #1
    2e9e:	4718      	bx	r3
    2ea0:	20000908 	.word	0x20000908

00002ea4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    2ea4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    2ea6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    2eaa:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    2eac:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    2eae:	6002      	str	r2, [r0, #0]
}
    2eb0:	4802      	ldr	r0, [pc, #8]	; (2ebc <nrf_gpio_pin_port_decode+0x18>)
    2eb2:	bf18      	it	ne
    2eb4:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    2eb8:	4770      	bx	lr
    2eba:	bf00      	nop
    2ebc:	50000300 	.word	0x50000300

00002ec0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2ec0:	4b03      	ldr	r3, [pc, #12]	; (2ed0 <pin_in_use_by_te+0x10>)
    2ec2:	3008      	adds	r0, #8
    2ec4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2ec8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2ecc:	4770      	bx	lr
    2ece:	bf00      	nop
    2ed0:	20000088 	.word	0x20000088

00002ed4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2ed4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2ed6:	f100 0308 	add.w	r3, r0, #8
    2eda:	4c0c      	ldr	r4, [pc, #48]	; (2f0c <call_handler+0x38>)
    2edc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    2ee0:	05da      	lsls	r2, r3, #23
{
    2ee2:	4605      	mov	r5, r0
    2ee4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2ee6:	d507      	bpl.n	2ef8 <call_handler+0x24>
    2ee8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2eec:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2ef0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2ef4:	6852      	ldr	r2, [r2, #4]
    2ef6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2ef8:	68a3      	ldr	r3, [r4, #8]
    2efa:	b12b      	cbz	r3, 2f08 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2efc:	68e2      	ldr	r2, [r4, #12]
    2efe:	4631      	mov	r1, r6
    2f00:	4628      	mov	r0, r5
    }
}
    2f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2f06:	4718      	bx	r3
}
    2f08:	bd70      	pop	{r4, r5, r6, pc}
    2f0a:	bf00      	nop
    2f0c:	20000088 	.word	0x20000088

00002f10 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f10:	4a12      	ldr	r2, [pc, #72]	; (2f5c <release_handler+0x4c>)
    2f12:	3008      	adds	r0, #8
{
    2f14:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f16:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2f1a:	05d9      	lsls	r1, r3, #23
    2f1c:	d51b      	bpl.n	2f56 <release_handler+0x46>
    2f1e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2f22:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2f26:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2f2a:	f102 0410 	add.w	r4, r2, #16
    2f2e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2f30:	f834 3b02 	ldrh.w	r3, [r4], #2
    2f34:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f38:	d003      	beq.n	2f42 <release_handler+0x32>
    2f3a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2f3e:	4299      	cmp	r1, r3
    2f40:	d009      	beq.n	2f56 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2f42:	3001      	adds	r0, #1
    2f44:	2830      	cmp	r0, #48	; 0x30
    2f46:	d1f3      	bne.n	2f30 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2f48:	2300      	movs	r3, #0
    2f4a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2f4e:	4804      	ldr	r0, [pc, #16]	; (2f60 <release_handler+0x50>)
}
    2f50:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2f52:	f7ff beed 	b.w	2d30 <nrfx_flag32_free>
}
    2f56:	bc10      	pop	{r4}
    2f58:	4770      	bx	lr
    2f5a:	bf00      	nop
    2f5c:	20000088 	.word	0x20000088
    2f60:	200000fc 	.word	0x200000fc

00002f64 <pin_handler_trigger_uninit>:
{
    2f64:	b538      	push	{r3, r4, r5, lr}
    2f66:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2f68:	f7ff ffaa 	bl	2ec0 <pin_in_use_by_te>
    2f6c:	4c09      	ldr	r4, [pc, #36]	; (2f94 <pin_handler_trigger_uninit+0x30>)
    2f6e:	f102 0508 	add.w	r5, r2, #8
    2f72:	b140      	cbz	r0, 2f86 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2f74:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2f78:	4907      	ldr	r1, [pc, #28]	; (2f98 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2f7a:	0b5b      	lsrs	r3, r3, #13
    2f7c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2f80:	2000      	movs	r0, #0
    2f82:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    2f86:	4610      	mov	r0, r2
    2f88:	f7ff ffc2 	bl	2f10 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2f8c:	2300      	movs	r3, #0
    2f8e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2f92:	bd38      	pop	{r3, r4, r5, pc}
    2f94:	20000088 	.word	0x20000088
    2f98:	40006000 	.word	0x40006000

00002f9c <nrfx_gpiote_input_configure>:
{
    2f9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2fa0:	4604      	mov	r4, r0
    2fa2:	4617      	mov	r7, r2
    2fa4:	461d      	mov	r5, r3
    if (p_input_config)
    2fa6:	b321      	cbz	r1, 2ff2 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2fa8:	4e4e      	ldr	r6, [pc, #312]	; (30e4 <nrfx_gpiote_input_configure+0x148>)
    2faa:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2fae:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    2fb2:	079b      	lsls	r3, r3, #30
    2fb4:	d506      	bpl.n	2fc4 <nrfx_gpiote_input_configure+0x28>
    2fb6:	f7ff ff83 	bl	2ec0 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    2fba:	b118      	cbz	r0, 2fc4 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    2fbc:	484a      	ldr	r0, [pc, #296]	; (30e8 <nrfx_gpiote_input_configure+0x14c>)
}
    2fbe:	b004      	add	sp, #16
    2fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2fc4:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2fc6:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2fca:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    2fce:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2fd2:	f10d 020f 	add.w	r2, sp, #15
    2fd6:	460b      	mov	r3, r1
    2fd8:	4620      	mov	r0, r4
    2fda:	f10d 010e 	add.w	r1, sp, #14
    2fde:	f002 f887 	bl	50f0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2fe2:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    2fe6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2fea:	f043 0301 	orr.w	r3, r3, #1
    2fee:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    2ff2:	b197      	cbz	r7, 301a <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ff4:	4b3b      	ldr	r3, [pc, #236]	; (30e4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    2ff6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    2ff8:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ffa:	f104 0008 	add.w	r0, r4, #8
    2ffe:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    3002:	078f      	lsls	r7, r1, #30
    3004:	d50c      	bpl.n	3020 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    3006:	2a00      	cmp	r2, #0
    3008:	d1d8      	bne.n	2fbc <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    300a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    300e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3012:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    3016:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    301a:	bbcd      	cbnz	r5, 3090 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    301c:	4833      	ldr	r0, [pc, #204]	; (30ec <nrfx_gpiote_input_configure+0x150>)
    301e:	e7ce      	b.n	2fbe <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3020:	f021 0120 	bic.w	r1, r1, #32
    3024:	04c9      	lsls	r1, r1, #19
    3026:	0cc9      	lsrs	r1, r1, #19
    3028:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    302c:	2a00      	cmp	r2, #0
    302e:	d0ec      	beq.n	300a <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    3030:	2e03      	cmp	r6, #3
    3032:	d8c3      	bhi.n	2fbc <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3034:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3036:	b92e      	cbnz	r6, 3044 <nrfx_gpiote_input_configure+0xa8>
    3038:	4a2d      	ldr	r2, [pc, #180]	; (30f0 <nrfx_gpiote_input_configure+0x154>)
    303a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    303e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3042:	e7e2      	b.n	300a <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3044:	00ba      	lsls	r2, r7, #2
    3046:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    304a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    304e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3052:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3056:	f02c 0c03 	bic.w	ip, ip, #3
    305a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    305e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3062:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3066:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    306a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    306e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3072:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3076:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    307a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    307e:	ea4c 0c0e 	orr.w	ip, ip, lr
    3082:	f041 0120 	orr.w	r1, r1, #32
    3086:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    308a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    308e:	e7bc      	b.n	300a <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3090:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3094:	4620      	mov	r0, r4
    3096:	f7ff ff3b 	bl	2f10 <release_handler>
    if (!handler)
    309a:	2e00      	cmp	r6, #0
    309c:	d0be      	beq.n	301c <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    309e:	4d11      	ldr	r5, [pc, #68]	; (30e4 <nrfx_gpiote_input_configure+0x148>)
    30a0:	682b      	ldr	r3, [r5, #0]
    30a2:	429e      	cmp	r6, r3
    30a4:	d104      	bne.n	30b0 <nrfx_gpiote_input_configure+0x114>
    30a6:	686b      	ldr	r3, [r5, #4]
    30a8:	429f      	cmp	r7, r3
    30aa:	d101      	bne.n	30b0 <nrfx_gpiote_input_configure+0x114>
    30ac:	2200      	movs	r2, #0
    30ae:	e00a      	b.n	30c6 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    30b0:	4810      	ldr	r0, [pc, #64]	; (30f4 <nrfx_gpiote_input_configure+0x158>)
    30b2:	f10d 010f 	add.w	r1, sp, #15
    30b6:	f7ff fe15 	bl	2ce4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    30ba:	4b0c      	ldr	r3, [pc, #48]	; (30ec <nrfx_gpiote_input_configure+0x150>)
    30bc:	4298      	cmp	r0, r3
    30be:	f47f af7e 	bne.w	2fbe <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    30c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    30c6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    30ca:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    30ce:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    30d0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    30d2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    30d6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    30da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    30de:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    30e2:	e79b      	b.n	301c <nrfx_gpiote_input_configure+0x80>
    30e4:	20000088 	.word	0x20000088
    30e8:	0bad0004 	.word	0x0bad0004
    30ec:	0bad0000 	.word	0x0bad0000
    30f0:	40006000 	.word	0x40006000
    30f4:	200000fc 	.word	0x200000fc

000030f8 <nrfx_gpiote_output_configure>:
{
    30f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30fa:	4604      	mov	r4, r0
    30fc:	b085      	sub	sp, #20
    30fe:	4615      	mov	r5, r2
    if (p_config)
    3100:	b319      	cbz	r1, 314a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3102:	4e33      	ldr	r6, [pc, #204]	; (31d0 <nrfx_gpiote_output_configure+0xd8>)
    3104:	f100 0708 	add.w	r7, r0, #8
    3108:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    310c:	0793      	lsls	r3, r2, #30
    310e:	d403      	bmi.n	3118 <nrfx_gpiote_output_configure+0x20>
    3110:	f7ff fed6 	bl	2ec0 <pin_in_use_by_te>
    3114:	2800      	cmp	r0, #0
    3116:	d158      	bne.n	31ca <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3118:	f012 0f1c 	tst.w	r2, #28
    311c:	d002      	beq.n	3124 <nrfx_gpiote_output_configure+0x2c>
    311e:	784b      	ldrb	r3, [r1, #1]
    3120:	2b01      	cmp	r3, #1
    3122:	d052      	beq.n	31ca <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3124:	2301      	movs	r3, #1
    3126:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    312a:	2300      	movs	r3, #0
    312c:	e9cd 1300 	strd	r1, r3, [sp]
    3130:	1c4a      	adds	r2, r1, #1
    3132:	1c8b      	adds	r3, r1, #2
    3134:	4620      	mov	r0, r4
    3136:	f10d 010f 	add.w	r1, sp, #15
    313a:	f001 ffd9 	bl	50f0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    313e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3142:	f043 0303 	orr.w	r3, r3, #3
    3146:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    314a:	b915      	cbnz	r5, 3152 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    314c:	4821      	ldr	r0, [pc, #132]	; (31d4 <nrfx_gpiote_output_configure+0xdc>)
}
    314e:	b005      	add	sp, #20
    3150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3152:	4e1f      	ldr	r6, [pc, #124]	; (31d0 <nrfx_gpiote_output_configure+0xd8>)
    3154:	f104 0708 	add.w	r7, r4, #8
    3158:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    315c:	0783      	lsls	r3, r0, #30
    315e:	d534      	bpl.n	31ca <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    3160:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3164:	4661      	mov	r1, ip
    3166:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3168:	f020 0020 	bic.w	r0, r0, #32
    316c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3170:	04c0      	lsls	r0, r0, #19
    3172:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3176:	0cc0      	lsrs	r0, r0, #19
    3178:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    317c:	2300      	movs	r3, #0
    317e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3182:	786a      	ldrb	r2, [r5, #1]
    3184:	2a00      	cmp	r2, #0
    3186:	d0e1      	beq.n	314c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3188:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    318c:	78ad      	ldrb	r5, [r5, #2]
    318e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3192:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3196:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    319a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    319e:	0223      	lsls	r3, r4, #8
    31a0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    31a4:	0412      	lsls	r2, r2, #16
    31a6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31aa:	ea43 030e 	orr.w	r3, r3, lr
    31ae:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    31b0:	052a      	lsls	r2, r5, #20
    31b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    31b6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31ba:	4313      	orrs	r3, r2
    31bc:	f040 0020 	orr.w	r0, r0, #32
    31c0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    31c4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    31c8:	e7c0      	b.n	314c <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    31ca:	4803      	ldr	r0, [pc, #12]	; (31d8 <nrfx_gpiote_output_configure+0xe0>)
    31cc:	e7bf      	b.n	314e <nrfx_gpiote_output_configure+0x56>
    31ce:	bf00      	nop
    31d0:	20000088 	.word	0x20000088
    31d4:	0bad0000 	.word	0x0bad0000
    31d8:	0bad0004 	.word	0x0bad0004

000031dc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    31dc:	4b01      	ldr	r3, [pc, #4]	; (31e4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    31de:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    31e2:	4770      	bx	lr
    31e4:	20000088 	.word	0x20000088

000031e8 <nrfx_gpiote_channel_get>:
{
    31e8:	b508      	push	{r3, lr}
    31ea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    31ec:	f7ff fe68 	bl	2ec0 <pin_in_use_by_te>
    31f0:	b138      	cbz	r0, 3202 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    31f2:	4b05      	ldr	r3, [pc, #20]	; (3208 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    31f4:	4805      	ldr	r0, [pc, #20]	; (320c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    31f6:	3208      	adds	r2, #8
    31f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    31fc:	0b5b      	lsrs	r3, r3, #13
    31fe:	700b      	strb	r3, [r1, #0]
}
    3200:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3202:	4803      	ldr	r0, [pc, #12]	; (3210 <nrfx_gpiote_channel_get+0x28>)
    3204:	e7fc      	b.n	3200 <nrfx_gpiote_channel_get+0x18>
    3206:	bf00      	nop
    3208:	20000088 	.word	0x20000088
    320c:	0bad0000 	.word	0x0bad0000
    3210:	0bad0004 	.word	0x0bad0004

00003214 <nrfx_gpiote_init>:
{
    3214:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3216:	4c0f      	ldr	r4, [pc, #60]	; (3254 <nrfx_gpiote_init+0x40>)
    3218:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    321c:	b9bd      	cbnz	r5, 324e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    321e:	2260      	movs	r2, #96	; 0x60
    3220:	4629      	mov	r1, r5
    3222:	f104 0010 	add.w	r0, r4, #16
    3226:	f001 fcb5 	bl	4b94 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    322a:	2006      	movs	r0, #6
    322c:	f7fe f984 	bl	1538 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3230:	4b09      	ldr	r3, [pc, #36]	; (3258 <nrfx_gpiote_init+0x44>)
    return err_code;
    3232:	480a      	ldr	r0, [pc, #40]	; (325c <nrfx_gpiote_init+0x48>)
    3234:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3238:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    323c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3240:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3244:	2301      	movs	r3, #1
    3246:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    324a:	6763      	str	r3, [r4, #116]	; 0x74
}
    324c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    324e:	4804      	ldr	r0, [pc, #16]	; (3260 <nrfx_gpiote_init+0x4c>)
    3250:	e7fc      	b.n	324c <nrfx_gpiote_init+0x38>
    3252:	bf00      	nop
    3254:	20000088 	.word	0x20000088
    3258:	40006000 	.word	0x40006000
    325c:	0bad0000 	.word	0x0bad0000
    3260:	0bad0005 	.word	0x0bad0005

00003264 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3264:	4b03      	ldr	r3, [pc, #12]	; (3274 <nrfx_gpiote_is_init+0x10>)
    3266:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    326a:	3800      	subs	r0, #0
    326c:	bf18      	it	ne
    326e:	2001      	movne	r0, #1
    3270:	4770      	bx	lr
    3272:	bf00      	nop
    3274:	20000088 	.word	0x20000088

00003278 <nrfx_gpiote_channel_free>:
{
    3278:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    327a:	4801      	ldr	r0, [pc, #4]	; (3280 <nrfx_gpiote_channel_free+0x8>)
    327c:	f7ff bd58 	b.w	2d30 <nrfx_flag32_free>
    3280:	200000f8 	.word	0x200000f8

00003284 <nrfx_gpiote_channel_alloc>:
{
    3284:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3286:	4801      	ldr	r0, [pc, #4]	; (328c <nrfx_gpiote_channel_alloc+0x8>)
    3288:	f7ff bd2c 	b.w	2ce4 <nrfx_flag32_alloc>
    328c:	200000f8 	.word	0x200000f8

00003290 <nrfx_gpiote_trigger_enable>:
{
    3290:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3292:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3294:	f7ff fe14 	bl	2ec0 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3298:	f104 0208 	add.w	r2, r4, #8
    329c:	4b1e      	ldr	r3, [pc, #120]	; (3318 <nrfx_gpiote_trigger_enable+0x88>)
    329e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    32a2:	b1e8      	cbz	r0, 32e0 <nrfx_gpiote_trigger_enable+0x50>
    32a4:	f013 0502 	ands.w	r5, r3, #2
    32a8:	d11a      	bne.n	32e0 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    32aa:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    32ac:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    32ae:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    32b2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    32b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    32ba:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    32be:	6005      	str	r5, [r0, #0]
    32c0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    32c2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    32c6:	f040 0001 	orr.w	r0, r0, #1
    32ca:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    32ce:	b129      	cbz	r1, 32dc <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    32d0:	2201      	movs	r2, #1
    32d2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    32d6:	4a11      	ldr	r2, [pc, #68]	; (331c <nrfx_gpiote_trigger_enable+0x8c>)
    32d8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    32dc:	b003      	add	sp, #12
    32de:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    32e0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    32e4:	2b04      	cmp	r3, #4
    32e6:	d012      	beq.n	330e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    32e8:	2b05      	cmp	r3, #5
    32ea:	d012      	beq.n	3312 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    32ec:	a801      	add	r0, sp, #4
    32ee:	9401      	str	r4, [sp, #4]
    32f0:	f7ff fdd8 	bl	2ea4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    32f4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    32f6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    32fa:	40d9      	lsrs	r1, r3
    32fc:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3300:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3302:	4620      	mov	r0, r4
}
    3304:	b003      	add	sp, #12
    3306:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    330a:	f001 bf38 	b.w	517e <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    330e:	2103      	movs	r1, #3
    3310:	e7f7      	b.n	3302 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3312:	2102      	movs	r1, #2
    3314:	e7f5      	b.n	3302 <nrfx_gpiote_trigger_enable+0x72>
    3316:	bf00      	nop
    3318:	20000088 	.word	0x20000088
    331c:	40006000 	.word	0x40006000

00003320 <nrfx_gpiote_trigger_disable>:
{
    3320:	b508      	push	{r3, lr}
    3322:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3324:	f7ff fdcc 	bl	2ec0 <pin_in_use_by_te>
    3328:	b1c0      	cbz	r0, 335c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    332a:	f102 0108 	add.w	r1, r2, #8
    332e:	4b0e      	ldr	r3, [pc, #56]	; (3368 <nrfx_gpiote_trigger_disable+0x48>)
    3330:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3334:	0799      	lsls	r1, r3, #30
    3336:	d411      	bmi.n	335c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3338:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    333a:	2201      	movs	r2, #1
    333c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    333e:	009b      	lsls	r3, r3, #2
    3340:	490a      	ldr	r1, [pc, #40]	; (336c <nrfx_gpiote_trigger_disable+0x4c>)
    3342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3346:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    334a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    334e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3352:	f022 0203 	bic.w	r2, r2, #3
    3356:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    335a:	bd08      	pop	{r3, pc}
    335c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3360:	2100      	movs	r1, #0
    3362:	4610      	mov	r0, r2
    3364:	f001 bf0b 	b.w	517e <nrf_gpio_cfg_sense_set>
    3368:	20000088 	.word	0x20000088
    336c:	40006000 	.word	0x40006000

00003370 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3370:	4b0e      	ldr	r3, [pc, #56]	; (33ac <nrfx_gpiote_pin_uninit+0x3c>)
    3372:	f100 0208 	add.w	r2, r0, #8
{
    3376:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3378:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    337c:	07db      	lsls	r3, r3, #31
{
    337e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3380:	d511      	bpl.n	33a6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    3382:	f7ff ffcd 	bl	3320 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3386:	4620      	mov	r0, r4
    3388:	f7ff fdec 	bl	2f64 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    338c:	a801      	add	r0, sp, #4
    338e:	9401      	str	r4, [sp, #4]
    3390:	f7ff fd88 	bl	2ea4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3394:	9b01      	ldr	r3, [sp, #4]
    3396:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    339a:	2202      	movs	r2, #2
    339c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    33a0:	4803      	ldr	r0, [pc, #12]	; (33b0 <nrfx_gpiote_pin_uninit+0x40>)
}
    33a2:	b002      	add	sp, #8
    33a4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    33a6:	4803      	ldr	r0, [pc, #12]	; (33b4 <nrfx_gpiote_pin_uninit+0x44>)
    33a8:	e7fb      	b.n	33a2 <nrfx_gpiote_pin_uninit+0x32>
    33aa:	bf00      	nop
    33ac:	20000088 	.word	0x20000088
    33b0:	0bad0000 	.word	0x0bad0000
    33b4:	0bad0004 	.word	0x0bad0004

000033b8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    33b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33bc:	4b64      	ldr	r3, [pc, #400]	; (3550 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    33be:	4865      	ldr	r0, [pc, #404]	; (3554 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33c0:	4965      	ldr	r1, [pc, #404]	; (3558 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    33c2:	2600      	movs	r6, #0
{
    33c4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    33c6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33c8:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33ca:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    33cc:	b135      	cbz	r5, 33dc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    33ce:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    33d2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33d4:	bf1e      	ittt	ne
    33d6:	601c      	strne	r4, [r3, #0]
    33d8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    33da:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33dc:	3304      	adds	r3, #4
    33de:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    33e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33e4:	d1f1      	bne.n	33ca <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33e6:	f8df 816c 	ldr.w	r8, [pc, #364]	; 3554 <nrfx_gpiote_irq_handler+0x19c>
    33ea:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    33ee:	2b00      	cmp	r3, #0
    33f0:	f000 8091 	beq.w	3516 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    33f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    33f8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    33fc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    33fe:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3402:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    3406:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3408:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    340c:	2700      	movs	r7, #0
            while (latch[i])
    340e:	f10d 0910 	add.w	r9, sp, #16
    3412:	017b      	lsls	r3, r7, #5
    3414:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3416:	f04f 0a01 	mov.w	sl, #1
    341a:	e049      	b.n	34b0 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    341c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    341e:	4a4f      	ldr	r2, [pc, #316]	; (355c <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    3420:	fa94 f4a4 	rbit	r4, r4
    3424:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    3428:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    342a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    342e:	08e0      	lsrs	r0, r4, #3
    3430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    3434:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    3436:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    343a:	fa0a fc02 	lsl.w	ip, sl, r2
    343e:	f819 2000 	ldrb.w	r2, [r9, r0]
    3442:	ea22 020c 	bic.w	r2, r2, ip
    3446:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    344a:	a803      	add	r0, sp, #12
    344c:	f3c3 0582 	ubfx	r5, r3, #2, #3
    3450:	0899      	lsrs	r1, r3, #2
    3452:	f7ff fd27 	bl	2ea4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3456:	9a03      	ldr	r2, [sp, #12]
    3458:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    345c:	074b      	lsls	r3, r1, #29
    345e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3462:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3464:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    3468:	d529      	bpl.n	34be <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    346a:	4620      	mov	r0, r4
    346c:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    346e:	b2d5      	uxtb	r5, r2
    3470:	f7ff fd30 	bl	2ed4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3474:	a803      	add	r0, sp, #12
    3476:	9403      	str	r4, [sp, #12]
    3478:	f7ff fd14 	bl	2ea4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    347c:	9b03      	ldr	r3, [sp, #12]
    347e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3482:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3486:	f3c3 4301 	ubfx	r3, r3, #16, #2
    348a:	429d      	cmp	r5, r3
    348c:	d107      	bne.n	349e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    348e:	2100      	movs	r1, #0
    3490:	4620      	mov	r0, r4
    3492:	f001 fe74 	bl	517e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3496:	4629      	mov	r1, r5
    3498:	4620      	mov	r0, r4
    349a:	f001 fe70 	bl	517e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    349e:	a803      	add	r0, sp, #12
    34a0:	9403      	str	r4, [sp, #12]
    34a2:	f7ff fcff 	bl	2ea4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    34a6:	9b03      	ldr	r3, [sp, #12]
    34a8:	fa0a f303 	lsl.w	r3, sl, r3
    34ac:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    34b0:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    34b4:	2c00      	cmp	r4, #0
    34b6:	d1b1      	bne.n	341c <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    34b8:	b9cf      	cbnz	r7, 34ee <nrfx_gpiote_irq_handler+0x136>
    34ba:	2701      	movs	r7, #1
    34bc:	e7a9      	b.n	3412 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    34be:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    34c0:	bf0c      	ite	eq
    34c2:	2103      	moveq	r1, #3
    34c4:	2102      	movne	r1, #2
    34c6:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    34c8:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    34ca:	f001 fe58 	bl	517e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    34ce:	2d03      	cmp	r5, #3
    34d0:	d004      	beq.n	34dc <nrfx_gpiote_irq_handler+0x124>
    34d2:	9a01      	ldr	r2, [sp, #4]
    34d4:	2a02      	cmp	r2, #2
    34d6:	d106      	bne.n	34e6 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    34d8:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    34da:	d1e0      	bne.n	349e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    34dc:	4659      	mov	r1, fp
    34de:	4620      	mov	r0, r4
    34e0:	f7ff fcf8 	bl	2ed4 <call_handler>
    34e4:	e7db      	b.n	349e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    34e6:	2a03      	cmp	r2, #3
    34e8:	d1d9      	bne.n	349e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    34ea:	2d02      	cmp	r5, #2
    34ec:	e7f5      	b.n	34da <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    34ee:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    34f2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    34f6:	491a      	ldr	r1, [pc, #104]	; (3560 <nrfx_gpiote_irq_handler+0x1a8>)
    34f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    34fc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3500:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3502:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3506:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    350a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    350c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    3510:	4313      	orrs	r3, r2
    3512:	f47f af7b 	bne.w	340c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    3516:	2401      	movs	r4, #1
    while (mask)
    3518:	b916      	cbnz	r6, 3520 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    351a:	b007      	add	sp, #28
    351c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    3520:	fa96 f3a6 	rbit	r3, r6
    3524:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3528:	fa04 f203 	lsl.w	r2, r4, r3
    352c:	009b      	lsls	r3, r3, #2
    352e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3532:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3536:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    353a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    353e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3542:	f3c0 2005 	ubfx	r0, r0, #8, #6
    3546:	f3c1 4101 	ubfx	r1, r1, #16, #2
    354a:	f7ff fcc3 	bl	2ed4 <call_handler>
    354e:	e7e3      	b.n	3518 <nrfx_gpiote_irq_handler+0x160>
    3550:	40006100 	.word	0x40006100
    3554:	40006000 	.word	0x40006000
    3558:	40006120 	.word	0x40006120
    355c:	20000088 	.word	0x20000088
    3560:	50000300 	.word	0x50000300

00003564 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3564:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    3566:	4801      	ldr	r0, [pc, #4]	; (356c <nrfx_ppi_channel_alloc+0x8>)
    3568:	f7ff bbbc 	b.w	2ce4 <nrfx_flag32_alloc>
    356c:	20000104 	.word	0x20000104

00003570 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    3570:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3572:	4c14      	ldr	r4, [pc, #80]	; (35c4 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    3574:	4a14      	ldr	r2, [pc, #80]	; (35c8 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    3576:	4915      	ldr	r1, [pc, #84]	; (35cc <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3578:	2303      	movs	r3, #3
    357a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    357c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    357e:	4b14      	ldr	r3, [pc, #80]	; (35d0 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    3580:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3582:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    3584:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3588:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    358a:	2300      	movs	r3, #0
    358c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    358e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3590:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    3592:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    3594:	4a0f      	ldr	r2, [pc, #60]	; (35d4 <_DoInit+0x64>)
    3596:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    3598:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    359a:	2210      	movs	r2, #16
    359c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    359e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    35a0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    35a2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    35a4:	f001 fad1 	bl	4b4a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    35a8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    35ac:	490a      	ldr	r1, [pc, #40]	; (35d8 <_DoInit+0x68>)
    35ae:	4620      	mov	r0, r4
    35b0:	f001 facb 	bl	4b4a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    35b4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    35b8:	2320      	movs	r3, #32
    35ba:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    35bc:	f3bf 8f5f 	dmb	sy
}
    35c0:	bd10      	pop	{r4, pc}
    35c2:	bf00      	nop
    35c4:	20000910 	.word	0x20000910
    35c8:	00005b8b 	.word	0x00005b8b
    35cc:	00005b94 	.word	0x00005b94
    35d0:	20000bdb 	.word	0x20000bdb
    35d4:	20000bcb 	.word	0x20000bcb
    35d8:	00005b98 	.word	0x00005b98

000035dc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    35dc:	4b0e      	ldr	r3, [pc, #56]	; (3618 <z_sys_init_run_level+0x3c>)
{
    35de:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    35e0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    35e4:	3001      	adds	r0, #1
    35e6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    35ea:	42a6      	cmp	r6, r4
    35ec:	d800      	bhi.n	35f0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    35ee:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    35f0:	e9d4 3500 	ldrd	r3, r5, [r4]
    35f4:	4628      	mov	r0, r5
    35f6:	4798      	blx	r3
		if (dev != NULL) {
    35f8:	b165      	cbz	r5, 3614 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    35fa:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    35fc:	b130      	cbz	r0, 360c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    35fe:	2800      	cmp	r0, #0
    3600:	bfb8      	it	lt
    3602:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3604:	28ff      	cmp	r0, #255	; 0xff
    3606:	bfa8      	it	ge
    3608:	20ff      	movge	r0, #255	; 0xff
    360a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    360c:	785a      	ldrb	r2, [r3, #1]
    360e:	f042 0201 	orr.w	r2, r2, #1
    3612:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3614:	3408      	adds	r4, #8
    3616:	e7e8      	b.n	35ea <z_sys_init_run_level+0xe>
    3618:	0000586c 	.word	0x0000586c

0000361c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    361c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    361e:	4b0a      	ldr	r3, [pc, #40]	; (3648 <bg_thread_main+0x2c>)
    3620:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3622:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3624:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3626:	f7ff ffd9 	bl	35dc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    362a:	f000 ff57 	bl	44dc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    362e:	2003      	movs	r0, #3
    3630:	f7ff ffd4 	bl	35dc <z_sys_init_run_level>

	z_init_static_threads();
    3634:	f000 f93c 	bl	38b0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    3638:	f7fc ff12 	bl	460 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    363c:	4a03      	ldr	r2, [pc, #12]	; (364c <bg_thread_main+0x30>)
    363e:	7b13      	ldrb	r3, [r2, #12]
    3640:	f023 0301 	bic.w	r3, r3, #1
    3644:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3646:	bd08      	pop	{r3, pc}
    3648:	20000fdb 	.word	0x20000fdb
    364c:	20000280 	.word	0x20000280

00003650 <z_bss_zero>:
{
    3650:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3652:	4803      	ldr	r0, [pc, #12]	; (3660 <z_bss_zero+0x10>)
    3654:	4a03      	ldr	r2, [pc, #12]	; (3664 <z_bss_zero+0x14>)
    3656:	2100      	movs	r1, #0
    3658:	1a12      	subs	r2, r2, r0
    365a:	f001 fdcc 	bl	51f6 <z_early_memset>
}
    365e:	bd08      	pop	{r3, pc}
    3660:	200001e0 	.word	0x200001e0
    3664:	20000fdc 	.word	0x20000fdc

00003668 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    3668:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    366a:	2300      	movs	r3, #0
{
    366c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    366e:	2201      	movs	r2, #1
    3670:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    3674:	4e13      	ldr	r6, [pc, #76]	; (36c4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3676:	4d14      	ldr	r5, [pc, #80]	; (36c8 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    3678:	9301      	str	r3, [sp, #4]
    367a:	220f      	movs	r2, #15
    367c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3680:	4912      	ldr	r1, [pc, #72]	; (36cc <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3682:	2318      	movs	r3, #24
    3684:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    3688:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    368c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    368e:	f44f 70b0 	mov.w	r0, #352	; 0x160
    3692:	fb00 1104 	mla	r1, r0, r4, r1
    3696:	4b0e      	ldr	r3, [pc, #56]	; (36d0 <z_init_cpu+0x68>)
    3698:	9500      	str	r5, [sp, #0]
    369a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    369e:	4630      	mov	r0, r6
    36a0:	f000 f8d4 	bl	384c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    36a4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    36a6:	480b      	ldr	r0, [pc, #44]	; (36d4 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    36a8:	752c      	strb	r4, [r5, #20]
    36aa:	f023 0304 	bic.w	r3, r3, #4
    36ae:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    36b0:	f44f 6302 	mov.w	r3, #2080	; 0x820
    36b4:	fb03 0404 	mla	r4, r3, r4, r0
    36b8:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    36ba:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    36bc:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    36be:	b006      	add	sp, #24
    36c0:	bd70      	pop	{r4, r5, r6, pc}
    36c2:	bf00      	nop
    36c4:	20000200 	.word	0x20000200
    36c8:	200009b8 	.word	0x200009b8
    36cc:	20001400 	.word	0x20001400
    36d0:	00003969 	.word	0x00003969
    36d4:	20001560 	.word	0x20001560

000036d8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    36d8:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    36da:	4b2d      	ldr	r3, [pc, #180]	; (3790 <z_cstart+0xb8>)
    36dc:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    36de:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    36e2:	4d2c      	ldr	r5, [pc, #176]	; (3794 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    36e4:	4e2c      	ldr	r6, [pc, #176]	; (3798 <z_cstart+0xc0>)
    36e6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    36e8:	4f2c      	ldr	r7, [pc, #176]	; (379c <z_cstart+0xc4>)
    36ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    36ee:	2400      	movs	r4, #0
    36f0:	616b      	str	r3, [r5, #20]
    36f2:	23e0      	movs	r3, #224	; 0xe0
    36f4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    36f8:	77ec      	strb	r4, [r5, #31]
    36fa:	762c      	strb	r4, [r5, #24]
    36fc:	766c      	strb	r4, [r5, #25]
    36fe:	76ac      	strb	r4, [r5, #26]
    3700:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3704:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3706:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    370a:	626b      	str	r3, [r5, #36]	; 0x24
    370c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3710:	f7fe f920 	bl	1954 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3714:	f7fd fef2 	bl	14fc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    371c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    371e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3720:	f7fe fa50 	bl	1bc4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3724:	f7fe f9b8 	bl	1a98 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3728:	f240 1301 	movw	r3, #257	; 0x101
    372c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3730:	ab06      	add	r3, sp, #24
    3732:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3734:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    3738:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    373a:	f001 fd36 	bl	51aa <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    373e:	4620      	mov	r0, r4
    3740:	f7ff ff4c 	bl	35dc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3744:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    3746:	4d16      	ldr	r5, [pc, #88]	; (37a0 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3748:	f7ff ff48 	bl	35dc <z_sys_init_run_level>
	z_sched_init();
    374c:	f000 fc6e 	bl	402c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3750:	4b14      	ldr	r3, [pc, #80]	; (37a4 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    3752:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3754:	9305      	str	r3, [sp, #20]
    3756:	2301      	movs	r3, #1
    3758:	4913      	ldr	r1, [pc, #76]	; (37a8 <z_cstart+0xd0>)
    375a:	9400      	str	r4, [sp, #0]
    375c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3760:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3764:	463b      	mov	r3, r7
    3766:	e9cd 4401 	strd	r4, r4, [sp, #4]
    376a:	4628      	mov	r0, r5
    376c:	f000 f86e 	bl	384c <z_setup_new_thread>
    3770:	7b6a      	ldrb	r2, [r5, #13]
    3772:	4606      	mov	r6, r0
    3774:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    3778:	4628      	mov	r0, r5
    377a:	736a      	strb	r2, [r5, #13]
    377c:	f001 fdcd 	bl	531a <z_ready_thread>
	z_init_cpu(0);
    3780:	4620      	mov	r0, r4
    3782:	f7ff ff71 	bl	3668 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3786:	463a      	mov	r2, r7
    3788:	4631      	mov	r1, r6
    378a:	4628      	mov	r0, r5
    378c:	f7fd ffb0 	bl	16f0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3790:	20001d80 	.word	0x20001d80
    3794:	e000ed00 	.word	0xe000ed00
    3798:	200009b8 	.word	0x200009b8
    379c:	0000361d 	.word	0x0000361d
    37a0:	20000280 	.word	0x20000280
    37a4:	00005b9f 	.word	0x00005b9f
    37a8:	20000fe0 	.word	0x20000fe0

000037ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    37ac:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    37ae:	4b0e      	ldr	r3, [pc, #56]	; (37e8 <init_mem_slab_module+0x3c>)
    37b0:	4c0e      	ldr	r4, [pc, #56]	; (37ec <init_mem_slab_module+0x40>)
    37b2:	42a3      	cmp	r3, r4
    37b4:	d301      	bcc.n	37ba <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    37b6:	2000      	movs	r0, #0
	return rc;
}
    37b8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    37ba:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    37be:	ea41 0200 	orr.w	r2, r1, r0
    37c2:	f012 0203 	ands.w	r2, r2, #3
    37c6:	d10b      	bne.n	37e0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    37c8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    37ca:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    37cc:	42aa      	cmp	r2, r5
    37ce:	d101      	bne.n	37d4 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    37d0:	331c      	adds	r3, #28
    37d2:	e7ee      	b.n	37b2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    37d4:	695e      	ldr	r6, [r3, #20]
    37d6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    37d8:	3201      	adds	r2, #1
		slab->free_list = p;
    37da:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    37dc:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    37de:	e7f5      	b.n	37cc <init_mem_slab_module+0x20>
	return rc;
    37e0:	f06f 0015 	mvn.w	r0, #21
    37e4:	e7e8      	b.n	37b8 <init_mem_slab_module+0xc>
    37e6:	bf00      	nop
    37e8:	2000018c 	.word	0x2000018c
    37ec:	2000018c 	.word	0x2000018c

000037f0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    37f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    37f2:	460c      	mov	r4, r1
	__asm__ volatile(
    37f4:	f04f 0520 	mov.w	r5, #32
    37f8:	f3ef 8111 	mrs	r1, BASEPRI
    37fc:	f385 8812 	msr	BASEPRI_MAX, r5
    3800:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3804:	6945      	ldr	r5, [r0, #20]
    3806:	b15d      	cbz	r5, 3820 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    3808:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    380a:	682b      	ldr	r3, [r5, #0]
    380c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    380e:	6983      	ldr	r3, [r0, #24]
    3810:	3301      	adds	r3, #1
    3812:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3814:	2000      	movs	r0, #0
	__asm__ volatile(
    3816:	f381 8811 	msr	BASEPRI, r1
    381a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    381e:	e011      	b.n	3844 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3820:	ea52 0c03 	orrs.w	ip, r2, r3
    3824:	d103      	bne.n	382e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    3826:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    3828:	f06f 000b 	mvn.w	r0, #11
    382c:	e7f3      	b.n	3816 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    382e:	e9cd 2300 	strd	r2, r3, [sp]
    3832:	4602      	mov	r2, r0
    3834:	3008      	adds	r0, #8
    3836:	f000 fb4f 	bl	3ed8 <z_pend_curr>
		if (result == 0) {
    383a:	b918      	cbnz	r0, 3844 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    383c:	4b02      	ldr	r3, [pc, #8]	; (3848 <k_mem_slab_alloc+0x58>)
    383e:	689b      	ldr	r3, [r3, #8]
    3840:	695b      	ldr	r3, [r3, #20]
    3842:	6023      	str	r3, [r4, #0]
}
    3844:	b003      	add	sp, #12
    3846:	bd30      	pop	{r4, r5, pc}
    3848:	200009b8 	.word	0x200009b8

0000384c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    384c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3850:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3852:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3854:	2604      	movs	r6, #4
    3856:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3858:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    385a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    385c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    3860:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3862:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3864:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    386a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    386c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3870:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3872:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3876:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    387a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    387c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    387e:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3880:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3884:	9202      	str	r2, [sp, #8]
    3886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3888:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    388a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    388c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    388e:	9200      	str	r2, [sp, #0]
    3890:	4642      	mov	r2, r8
{
    3892:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3894:	f7fd fefa 	bl	168c <arch_new_thread>
	if (!_current) {
    3898:	4b04      	ldr	r3, [pc, #16]	; (38ac <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    389a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    389c:	689b      	ldr	r3, [r3, #8]
    389e:	b103      	cbz	r3, 38a2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    38a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    38a2:	6723      	str	r3, [r4, #112]	; 0x70
}
    38a4:	4640      	mov	r0, r8
    38a6:	b004      	add	sp, #16
    38a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38ac:	200009b8 	.word	0x200009b8

000038b0 <z_init_static_threads>:
{
    38b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    38b4:	4c29      	ldr	r4, [pc, #164]	; (395c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    38b6:	4d2a      	ldr	r5, [pc, #168]	; (3960 <z_init_static_threads+0xb0>)
{
    38b8:	b087      	sub	sp, #28
    38ba:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    38bc:	42ae      	cmp	r6, r5
    38be:	f104 0430 	add.w	r4, r4, #48	; 0x30
    38c2:	d30f      	bcc.n	38e4 <z_init_static_threads+0x34>
	k_sched_lock();
    38c4:	f000 f9c6 	bl	3c54 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    38c8:	4c24      	ldr	r4, [pc, #144]	; (395c <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    38ca:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3964 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    38ce:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    38d2:	f240 37e7 	movw	r7, #999	; 0x3e7
    38d6:	42ac      	cmp	r4, r5
    38d8:	d320      	bcc.n	391c <z_init_static_threads+0x6c>
}
    38da:	b007      	add	sp, #28
    38dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    38e0:	f000 bb88 	b.w	3ff4 <k_sched_unlock>
		z_setup_new_thread(
    38e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    38e8:	9305      	str	r3, [sp, #20]
    38ea:	f854 3c10 	ldr.w	r3, [r4, #-16]
    38ee:	9304      	str	r3, [sp, #16]
    38f0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    38f4:	9303      	str	r3, [sp, #12]
    38f6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    38fa:	9302      	str	r3, [sp, #8]
    38fc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3900:	9301      	str	r3, [sp, #4]
    3902:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3906:	9300      	str	r3, [sp, #0]
    3908:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    390c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3910:	f7ff ff9c 	bl	384c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3914:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3918:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    391a:	e7ce      	b.n	38ba <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    391c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    391e:	1c5a      	adds	r2, r3, #1
    3920:	d00d      	beq.n	393e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    3922:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3926:	2100      	movs	r1, #0
    3928:	4638      	mov	r0, r7
    392a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    392e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    3932:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3936:	d104      	bne.n	3942 <z_init_static_threads+0x92>
	z_sched_start(thread);
    3938:	4640      	mov	r0, r8
    393a:	f000 fa71 	bl	3e20 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    393e:	3430      	adds	r4, #48	; 0x30
    3940:	e7c9      	b.n	38d6 <z_init_static_threads+0x26>
    3942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3946:	2300      	movs	r3, #0
    3948:	f7fc fbda 	bl	100 <__aeabi_uldivmod>
    394c:	4602      	mov	r2, r0
    394e:	460b      	mov	r3, r1
    3950:	f108 0018 	add.w	r0, r8, #24
    3954:	4649      	mov	r1, r9
    3956:	f000 fcd3 	bl	4300 <z_add_timeout>
    395a:	e7f0      	b.n	393e <z_init_static_threads+0x8e>
    395c:	2000018c 	.word	0x2000018c
    3960:	2000018c 	.word	0x2000018c
    3964:	0000533b 	.word	0x0000533b

00003968 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3968:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    396a:	4c0b      	ldr	r4, [pc, #44]	; (3998 <idle+0x30>)
	return !z_sys_post_kernel;
    396c:	4d0b      	ldr	r5, [pc, #44]	; (399c <idle+0x34>)
	__asm__ volatile(
    396e:	f04f 0220 	mov.w	r2, #32
    3972:	f3ef 8311 	mrs	r3, BASEPRI
    3976:	f382 8812 	msr	BASEPRI_MAX, r2
    397a:	f3bf 8f6f 	isb	sy
    397e:	f001 fd56 	bl	542e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3982:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    3984:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3986:	b913      	cbnz	r3, 398e <idle+0x26>
	arch_cpu_idle();
    3988:	f7fd fdbe 	bl	1508 <arch_cpu_idle>
}
    398c:	e7ef      	b.n	396e <idle+0x6>
    398e:	f7fd fc11 	bl	11b4 <pm_system_suspend>
    3992:	2800      	cmp	r0, #0
    3994:	d1eb      	bne.n	396e <idle+0x6>
    3996:	e7f7      	b.n	3988 <idle+0x20>
    3998:	200009b8 	.word	0x200009b8
    399c:	20000fdb 	.word	0x20000fdb

000039a0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    39a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    39a4:	4604      	mov	r4, r0
    39a6:	4617      	mov	r7, r2
    39a8:	461e      	mov	r6, r3
    39aa:	f04f 0320 	mov.w	r3, #32
    39ae:	f3ef 8811 	mrs	r8, BASEPRI
    39b2:	f383 8812 	msr	BASEPRI_MAX, r3
    39b6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    39ba:	68c3      	ldr	r3, [r0, #12]
    39bc:	4a32      	ldr	r2, [pc, #200]	; (3a88 <z_impl_k_mutex_lock+0xe8>)
    39be:	b16b      	cbz	r3, 39dc <z_impl_k_mutex_lock+0x3c>
    39c0:	6880      	ldr	r0, [r0, #8]
    39c2:	6891      	ldr	r1, [r2, #8]
    39c4:	4288      	cmp	r0, r1
    39c6:	d019      	beq.n	39fc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    39c8:	ea57 0306 	orrs.w	r3, r7, r6
    39cc:	d118      	bne.n	3a00 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    39ce:	f388 8811 	msr	BASEPRI, r8
    39d2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    39d6:	f06f 000f 	mvn.w	r0, #15
    39da:	e00c      	b.n	39f6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    39dc:	6891      	ldr	r1, [r2, #8]
    39de:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    39e2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    39e4:	3301      	adds	r3, #1
    39e6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    39e8:	6893      	ldr	r3, [r2, #8]
    39ea:	60a3      	str	r3, [r4, #8]
    39ec:	f388 8811 	msr	BASEPRI, r8
    39f0:	f3bf 8f6f 	isb	sy
		return 0;
    39f4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    39f6:	b002      	add	sp, #8
    39f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    39fc:	6921      	ldr	r1, [r4, #16]
    39fe:	e7f0      	b.n	39e2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3a00:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3a04:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    3a08:	4299      	cmp	r1, r3
    3a0a:	bfa8      	it	ge
    3a0c:	4619      	movge	r1, r3
    3a0e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3a12:	4291      	cmp	r1, r2
    3a14:	bfb8      	it	lt
    3a16:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3a18:	428b      	cmp	r3, r1
    3a1a:	dd2e      	ble.n	3a7a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    3a1c:	f001 fc40 	bl	52a0 <adjust_owner_prio.isra.0>
    3a20:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3a22:	e9cd 7600 	strd	r7, r6, [sp]
    3a26:	4819      	ldr	r0, [pc, #100]	; (3a8c <z_impl_k_mutex_lock+0xec>)
    3a28:	4622      	mov	r2, r4
    3a2a:	4641      	mov	r1, r8
    3a2c:	f000 fa54 	bl	3ed8 <z_pend_curr>
	if (got_mutex == 0) {
    3a30:	2800      	cmp	r0, #0
    3a32:	d0e0      	beq.n	39f6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    3a34:	f04f 0320 	mov.w	r3, #32
    3a38:	f3ef 8611 	mrs	r6, BASEPRI
    3a3c:	f383 8812 	msr	BASEPRI_MAX, r3
    3a40:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3a44:	6823      	ldr	r3, [r4, #0]
    3a46:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a48:	429c      	cmp	r4, r3
    3a4a:	d00a      	beq.n	3a62 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3a4c:	b14b      	cbz	r3, 3a62 <z_impl_k_mutex_lock+0xc2>
    3a4e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3a52:	4299      	cmp	r1, r3
    3a54:	bfa8      	it	ge
    3a56:	4619      	movge	r1, r3
    3a58:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    3a5c:	4299      	cmp	r1, r3
    3a5e:	bfb8      	it	lt
    3a60:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3a62:	68a0      	ldr	r0, [r4, #8]
    3a64:	f001 fc1c 	bl	52a0 <adjust_owner_prio.isra.0>
    3a68:	b900      	cbnz	r0, 3a6c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    3a6a:	b145      	cbz	r5, 3a7e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    3a6c:	4807      	ldr	r0, [pc, #28]	; (3a8c <z_impl_k_mutex_lock+0xec>)
    3a6e:	4631      	mov	r1, r6
    3a70:	f000 f8de 	bl	3c30 <z_reschedule>
	return -EAGAIN;
    3a74:	f06f 000a 	mvn.w	r0, #10
    3a78:	e7bd      	b.n	39f6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    3a7a:	2500      	movs	r5, #0
    3a7c:	e7d1      	b.n	3a22 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    3a7e:	f386 8811 	msr	BASEPRI, r6
    3a82:	f3bf 8f6f 	isb	sy
    3a86:	e7f5      	b.n	3a74 <z_impl_k_mutex_lock+0xd4>
    3a88:	200009b8 	.word	0x200009b8
    3a8c:	20000fdc 	.word	0x20000fdc

00003a90 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3a90:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3a92:	6883      	ldr	r3, [r0, #8]
{
    3a94:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3a96:	2b00      	cmp	r3, #0
    3a98:	d032      	beq.n	3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3a9a:	4a1c      	ldr	r2, [pc, #112]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    3a9c:	6892      	ldr	r2, [r2, #8]
    3a9e:	4293      	cmp	r3, r2
    3aa0:	d131      	bne.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3aa2:	7bda      	ldrb	r2, [r3, #15]
    3aa4:	3a01      	subs	r2, #1
    3aa6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3aa8:	68c3      	ldr	r3, [r0, #12]
    3aaa:	2b01      	cmp	r3, #1
    3aac:	d905      	bls.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
		mutex->lock_count--;
    3aae:	3b01      	subs	r3, #1
    3ab0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    3ab2:	f000 fa9f 	bl	3ff4 <k_sched_unlock>

	return 0;
    3ab6:	2000      	movs	r0, #0
}
    3ab8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3aba:	f04f 0320 	mov.w	r3, #32
    3abe:	f3ef 8511 	mrs	r5, BASEPRI
    3ac2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ac6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3aca:	6901      	ldr	r1, [r0, #16]
    3acc:	6880      	ldr	r0, [r0, #8]
    3ace:	f001 fbe7 	bl	52a0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3ad2:	4620      	mov	r0, r4
    3ad4:	f001 fc7d 	bl	53d2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3ad8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3ada:	b158      	cbz	r0, 3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>
		mutex->owner_orig_prio = new_owner->base.prio;
    3adc:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3ae0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3ae2:	2200      	movs	r2, #0
    3ae4:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    3ae6:	f001 fc18 	bl	531a <z_ready_thread>
		z_reschedule(&lock, key);
    3aea:	4809      	ldr	r0, [pc, #36]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3aec:	4629      	mov	r1, r5
    3aee:	f000 f89f 	bl	3c30 <z_reschedule>
    3af2:	e7de      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
		mutex->lock_count = 0U;
    3af4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3af6:	f385 8811 	msr	BASEPRI, r5
    3afa:	f3bf 8f6f 	isb	sy
    3afe:	e7d8      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
		return -EINVAL;
    3b00:	f06f 0015 	mvn.w	r0, #21
    3b04:	e7d8      	b.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
		return -EPERM;
    3b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b0a:	e7d5      	b.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    3b0c:	200009b8 	.word	0x200009b8
    3b10:	20000fdc 	.word	0x20000fdc

00003b14 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3b14:	b538      	push	{r3, r4, r5, lr}
    3b16:	4604      	mov	r4, r0
	__asm__ volatile(
    3b18:	f04f 0320 	mov.w	r3, #32
    3b1c:	f3ef 8511 	mrs	r5, BASEPRI
    3b20:	f383 8812 	msr	BASEPRI_MAX, r3
    3b24:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3b28:	f001 fc53 	bl	53d2 <z_unpend_first_thread>

	if (thread != NULL) {
    3b2c:	b148      	cbz	r0, 3b42 <z_impl_k_sem_give+0x2e>
    3b2e:	2200      	movs	r2, #0
    3b30:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3b32:	f001 fbf2 	bl	531a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3b36:	4629      	mov	r1, r5
    3b38:	4805      	ldr	r0, [pc, #20]	; (3b50 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3b3e:	f000 b877 	b.w	3c30 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3b42:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3b46:	429a      	cmp	r2, r3
    3b48:	bf18      	it	ne
    3b4a:	3301      	addne	r3, #1
    3b4c:	60a3      	str	r3, [r4, #8]
}
    3b4e:	e7f2      	b.n	3b36 <z_impl_k_sem_give+0x22>
    3b50:	20000fdc 	.word	0x20000fdc

00003b54 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3b54:	b513      	push	{r0, r1, r4, lr}
    3b56:	f04f 0420 	mov.w	r4, #32
    3b5a:	f3ef 8111 	mrs	r1, BASEPRI
    3b5e:	f384 8812 	msr	BASEPRI_MAX, r4
    3b62:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3b66:	6884      	ldr	r4, [r0, #8]
    3b68:	b144      	cbz	r4, 3b7c <z_impl_k_sem_take+0x28>
		sem->count--;
    3b6a:	3c01      	subs	r4, #1
    3b6c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3b6e:	f381 8811 	msr	BASEPRI, r1
    3b72:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3b76:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3b78:	b002      	add	sp, #8
    3b7a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3b7c:	ea52 0403 	orrs.w	r4, r2, r3
    3b80:	d106      	bne.n	3b90 <z_impl_k_sem_take+0x3c>
    3b82:	f381 8811 	msr	BASEPRI, r1
    3b86:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3b8a:	f06f 000f 	mvn.w	r0, #15
    3b8e:	e7f3      	b.n	3b78 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3b90:	e9cd 2300 	strd	r2, r3, [sp]
    3b94:	4602      	mov	r2, r0
    3b96:	4802      	ldr	r0, [pc, #8]	; (3ba0 <z_impl_k_sem_take+0x4c>)
    3b98:	f000 f99e 	bl	3ed8 <z_pend_curr>
	return ret;
    3b9c:	e7ec      	b.n	3b78 <z_impl_k_sem_take+0x24>
    3b9e:	bf00      	nop
    3ba0:	20000fdc 	.word	0x20000fdc

00003ba4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    3ba4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    3ba6:	4d07      	ldr	r5, [pc, #28]	; (3bc4 <z_reset_time_slice+0x20>)
    3ba8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    3baa:	b154      	cbz	r4, 3bc2 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3bac:	f7fe ff4a 	bl	2a44 <sys_clock_elapsed>
    3bb0:	4b05      	ldr	r3, [pc, #20]	; (3bc8 <z_reset_time_slice+0x24>)
    3bb2:	4404      	add	r4, r0
    3bb4:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3bb6:	6828      	ldr	r0, [r5, #0]
    3bb8:	2100      	movs	r1, #0
	}
}
    3bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    3bbe:	f001 bc46 	b.w	544e <z_set_timeout_expiry>
}
    3bc2:	bd38      	pop	{r3, r4, r5, pc}
    3bc4:	200009e8 	.word	0x200009e8
    3bc8:	200009b8 	.word	0x200009b8

00003bcc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    3bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bce:	4604      	mov	r4, r0
    3bd0:	460d      	mov	r5, r1
	__asm__ volatile(
    3bd2:	f04f 0320 	mov.w	r3, #32
    3bd6:	f3ef 8711 	mrs	r7, BASEPRI
    3bda:	f383 8812 	msr	BASEPRI_MAX, r3
    3bde:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    3be2:	4e10      	ldr	r6, [pc, #64]	; (3c24 <k_sched_time_slice_set+0x58>)
    3be4:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    3be6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    3bea:	f240 30e7 	movw	r0, #999	; 0x3e7
    3bee:	6131      	str	r1, [r6, #16]
    3bf0:	2300      	movs	r3, #0
    3bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3bf6:	fbe4 010c 	umlal	r0, r1, r4, ip
    3bfa:	f7fc fa81 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3bfe:	2c00      	cmp	r4, #0
    3c00:	4b09      	ldr	r3, [pc, #36]	; (3c28 <k_sched_time_slice_set+0x5c>)
    3c02:	dc0a      	bgt.n	3c1a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    3c04:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    3c06:	4b09      	ldr	r3, [pc, #36]	; (3c2c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    3c08:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    3c0a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    3c0c:	f7ff ffca 	bl	3ba4 <z_reset_time_slice>
	__asm__ volatile(
    3c10:	f387 8811 	msr	BASEPRI, r7
    3c14:	f3bf 8f6f 	isb	sy
	}
}
    3c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    3c1a:	2802      	cmp	r0, #2
    3c1c:	bfb8      	it	lt
    3c1e:	2002      	movlt	r0, #2
    3c20:	e7f0      	b.n	3c04 <k_sched_time_slice_set+0x38>
    3c22:	bf00      	nop
    3c24:	200009b8 	.word	0x200009b8
    3c28:	200009e8 	.word	0x200009e8
    3c2c:	200009e4 	.word	0x200009e4

00003c30 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3c30:	b949      	cbnz	r1, 3c46 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3c32:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    3c36:	b930      	cbnz	r0, 3c46 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3c38:	4b05      	ldr	r3, [pc, #20]	; (3c50 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3c3a:	69da      	ldr	r2, [r3, #28]
    3c3c:	689b      	ldr	r3, [r3, #8]
    3c3e:	429a      	cmp	r2, r3
    3c40:	d001      	beq.n	3c46 <z_reschedule+0x16>
	ret = arch_swap(key);
    3c42:	f7fd bccf 	b.w	15e4 <arch_swap>
    3c46:	f381 8811 	msr	BASEPRI, r1
    3c4a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    3c4e:	4770      	bx	lr
    3c50:	200009b8 	.word	0x200009b8

00003c54 <k_sched_lock>:
	__asm__ volatile(
    3c54:	f04f 0320 	mov.w	r3, #32
    3c58:	f3ef 8111 	mrs	r1, BASEPRI
    3c5c:	f383 8812 	msr	BASEPRI_MAX, r3
    3c60:	f3bf 8f6f 	isb	sy
    3c64:	4b04      	ldr	r3, [pc, #16]	; (3c78 <k_sched_lock+0x24>)
    3c66:	689a      	ldr	r2, [r3, #8]
    3c68:	7bd3      	ldrb	r3, [r2, #15]
    3c6a:	3b01      	subs	r3, #1
    3c6c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3c6e:	f381 8811 	msr	BASEPRI, r1
    3c72:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3c76:	4770      	bx	lr
    3c78:	200009b8 	.word	0x200009b8

00003c7c <update_cache>:
{
    3c7c:	b538      	push	{r3, r4, r5, lr}
    3c7e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    3c80:	480c      	ldr	r0, [pc, #48]	; (3cb4 <update_cache+0x38>)
    3c82:	4d0d      	ldr	r5, [pc, #52]	; (3cb8 <update_cache+0x3c>)
    3c84:	f001 fb43 	bl	530e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3c88:	4604      	mov	r4, r0
    3c8a:	b900      	cbnz	r0, 3c8e <update_cache+0x12>
    3c8c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    3c8e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3c90:	b94a      	cbnz	r2, 3ca6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    3c92:	7b5a      	ldrb	r2, [r3, #13]
    3c94:	06d2      	lsls	r2, r2, #27
    3c96:	d106      	bne.n	3ca6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3c98:	69a2      	ldr	r2, [r4, #24]
    3c9a:	b922      	cbnz	r2, 3ca6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    3c9c:	89da      	ldrh	r2, [r3, #14]
    3c9e:	2a7f      	cmp	r2, #127	; 0x7f
    3ca0:	d901      	bls.n	3ca6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    3ca2:	61eb      	str	r3, [r5, #28]
}
    3ca4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3ca6:	429c      	cmp	r4, r3
    3ca8:	d002      	beq.n	3cb0 <update_cache+0x34>
			z_reset_time_slice(thread);
    3caa:	4620      	mov	r0, r4
    3cac:	f7ff ff7a 	bl	3ba4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3cb0:	61ec      	str	r4, [r5, #28]
}
    3cb2:	e7f7      	b.n	3ca4 <update_cache+0x28>
    3cb4:	200009d8 	.word	0x200009d8
    3cb8:	200009b8 	.word	0x200009b8

00003cbc <move_thread_to_end_of_prio_q>:
{
    3cbc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3cbe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3cc2:	7b43      	ldrb	r3, [r0, #13]
    3cc4:	2a00      	cmp	r2, #0
{
    3cc6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3cc8:	da04      	bge.n	3cd4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3cce:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3cd0:	f001 faf5 	bl	52be <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3cd4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    3cd6:	4a15      	ldr	r2, [pc, #84]	; (3d2c <move_thread_to_end_of_prio_q+0x70>)
    3cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3cdc:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3cde:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ce2:	f102 0520 	add.w	r5, r2, #32
    3ce6:	42ab      	cmp	r3, r5
    3ce8:	d01b      	beq.n	3d22 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3cea:	b1d3      	cbz	r3, 3d22 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    3cec:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3cf0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    3cf4:	4286      	cmp	r6, r0
    3cf6:	d00f      	beq.n	3d18 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    3cf8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3cfa:	2800      	cmp	r0, #0
    3cfc:	dd0c      	ble.n	3d18 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3cfe:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3d00:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3d04:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3d06:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3d08:	6890      	ldr	r0, [r2, #8]
    3d0a:	1a43      	subs	r3, r0, r1
    3d0c:	4258      	negs	r0, r3
}
    3d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3d12:	4158      	adcs	r0, r3
    3d14:	f7ff bfb2 	b.w	3c7c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3d18:	42a3      	cmp	r3, r4
    3d1a:	d002      	beq.n	3d22 <move_thread_to_end_of_prio_q+0x66>
    3d1c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d1e6      	bne.n	3cf0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    3d22:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    3d26:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3d28:	6251      	str	r1, [r2, #36]	; 0x24
}
    3d2a:	e7ed      	b.n	3d08 <move_thread_to_end_of_prio_q+0x4c>
    3d2c:	200009b8 	.word	0x200009b8

00003d30 <z_time_slice>:
{
    3d30:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3d32:	f04f 0320 	mov.w	r3, #32
    3d36:	f3ef 8511 	mrs	r5, BASEPRI
    3d3a:	f383 8812 	msr	BASEPRI_MAX, r3
    3d3e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3d42:	4b17      	ldr	r3, [pc, #92]	; (3da0 <z_time_slice+0x70>)
    3d44:	4a17      	ldr	r2, [pc, #92]	; (3da4 <z_time_slice+0x74>)
    3d46:	689c      	ldr	r4, [r3, #8]
    3d48:	6811      	ldr	r1, [r2, #0]
    3d4a:	428c      	cmp	r4, r1
    3d4c:	d107      	bne.n	3d5e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    3d4e:	4620      	mov	r0, r4
    3d50:	f7ff ff28 	bl	3ba4 <z_reset_time_slice>
	__asm__ volatile(
    3d54:	f385 8811 	msr	BASEPRI, r5
    3d58:	f3bf 8f6f 	isb	sy
}
    3d5c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3d5e:	2100      	movs	r1, #0
    3d60:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    3d62:	4a11      	ldr	r2, [pc, #68]	; (3da8 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    3d64:	6812      	ldr	r2, [r2, #0]
    3d66:	b1c2      	cbz	r2, 3d9a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3d68:	89e2      	ldrh	r2, [r4, #14]
    3d6a:	2a7f      	cmp	r2, #127	; 0x7f
    3d6c:	d815      	bhi.n	3d9a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    3d6e:	7b62      	ldrb	r2, [r4, #13]
    3d70:	06d2      	lsls	r2, r2, #27
    3d72:	d112      	bne.n	3d9a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3d74:	4a0d      	ldr	r2, [pc, #52]	; (3dac <z_time_slice+0x7c>)
    3d76:	f994 100e 	ldrsb.w	r1, [r4, #14]
    3d7a:	6812      	ldr	r2, [r2, #0]
    3d7c:	4291      	cmp	r1, r2
    3d7e:	db0c      	blt.n	3d9a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    3d80:	4a0b      	ldr	r2, [pc, #44]	; (3db0 <z_time_slice+0x80>)
    3d82:	4294      	cmp	r4, r2
    3d84:	d009      	beq.n	3d9a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    3d86:	691a      	ldr	r2, [r3, #16]
    3d88:	4282      	cmp	r2, r0
    3d8a:	dc03      	bgt.n	3d94 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    3d8c:	4620      	mov	r0, r4
    3d8e:	f7ff ff95 	bl	3cbc <move_thread_to_end_of_prio_q>
    3d92:	e7dc      	b.n	3d4e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    3d94:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    3d96:	611a      	str	r2, [r3, #16]
    3d98:	e7dc      	b.n	3d54 <z_time_slice+0x24>
    3d9a:	2200      	movs	r2, #0
    3d9c:	e7fb      	b.n	3d96 <z_time_slice+0x66>
    3d9e:	bf00      	nop
    3da0:	200009b8 	.word	0x200009b8
    3da4:	200009e0 	.word	0x200009e0
    3da8:	200009e8 	.word	0x200009e8
    3dac:	200009e4 	.word	0x200009e4
    3db0:	20000200 	.word	0x20000200

00003db4 <ready_thread>:
{
    3db4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3db6:	f990 200d 	ldrsb.w	r2, [r0, #13]
    3dba:	7b43      	ldrb	r3, [r0, #13]
    3dbc:	2a00      	cmp	r2, #0
    3dbe:	db2a      	blt.n	3e16 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3dc0:	06da      	lsls	r2, r3, #27
    3dc2:	d128      	bne.n	3e16 <ready_thread+0x62>
    3dc4:	6982      	ldr	r2, [r0, #24]
    3dc6:	bb32      	cbnz	r2, 3e16 <ready_thread+0x62>
	return list->head == list;
    3dc8:	4a14      	ldr	r2, [pc, #80]	; (3e1c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3dca:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3dce:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    3dd0:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3dd4:	f102 0520 	add.w	r5, r2, #32
    3dd8:	42ab      	cmp	r3, r5
    3dda:	d017      	beq.n	3e0c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ddc:	b1b3      	cbz	r3, 3e0c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    3dde:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3de2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    3de6:	428e      	cmp	r6, r1
    3de8:	d00b      	beq.n	3e02 <ready_thread+0x4e>
		return b2 - b1;
    3dea:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3dec:	2900      	cmp	r1, #0
    3dee:	dd08      	ble.n	3e02 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    3df0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3df2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3df6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3df8:	6058      	str	r0, [r3, #4]
}
    3dfa:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3dfc:	2000      	movs	r0, #0
    3dfe:	f7ff bf3d 	b.w	3c7c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3e02:	42a3      	cmp	r3, r4
    3e04:	d002      	beq.n	3e0c <ready_thread+0x58>
    3e06:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3e08:	2b00      	cmp	r3, #0
    3e0a:	d1ea      	bne.n	3de2 <ready_thread+0x2e>
	node->prev = tail;
    3e0c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    3e10:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3e12:	6250      	str	r0, [r2, #36]	; 0x24
}
    3e14:	e7f1      	b.n	3dfa <ready_thread+0x46>
}
    3e16:	bc70      	pop	{r4, r5, r6}
    3e18:	4770      	bx	lr
    3e1a:	bf00      	nop
    3e1c:	200009b8 	.word	0x200009b8

00003e20 <z_sched_start>:
{
    3e20:	b510      	push	{r4, lr}
	__asm__ volatile(
    3e22:	f04f 0220 	mov.w	r2, #32
    3e26:	f3ef 8411 	mrs	r4, BASEPRI
    3e2a:	f382 8812 	msr	BASEPRI_MAX, r2
    3e2e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3e32:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3e34:	0751      	lsls	r1, r2, #29
    3e36:	d404      	bmi.n	3e42 <z_sched_start+0x22>
	__asm__ volatile(
    3e38:	f384 8811 	msr	BASEPRI, r4
    3e3c:	f3bf 8f6f 	isb	sy
}
    3e40:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3e42:	f022 0204 	bic.w	r2, r2, #4
    3e46:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3e48:	f7ff ffb4 	bl	3db4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3e4c:	4621      	mov	r1, r4
    3e4e:	4802      	ldr	r0, [pc, #8]	; (3e58 <z_sched_start+0x38>)
}
    3e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3e54:	f7ff beec 	b.w	3c30 <z_reschedule>
    3e58:	20000fdc 	.word	0x20000fdc

00003e5c <unready_thread>:
{
    3e5c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3e5e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3e62:	7b43      	ldrb	r3, [r0, #13]
    3e64:	2a00      	cmp	r2, #0
{
    3e66:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3e68:	da04      	bge.n	3e74 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3e6e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3e70:	f001 fa25 	bl	52be <sys_dlist_remove>
	update_cache(thread == _current);
    3e74:	4b04      	ldr	r3, [pc, #16]	; (3e88 <unready_thread+0x2c>)
    3e76:	6898      	ldr	r0, [r3, #8]
    3e78:	1a43      	subs	r3, r0, r1
    3e7a:	4258      	negs	r0, r3
    3e7c:	4158      	adcs	r0, r3
}
    3e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3e82:	f7ff befb 	b.w	3c7c <update_cache>
    3e86:	bf00      	nop
    3e88:	200009b8 	.word	0x200009b8

00003e8c <pend>:
{
    3e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e90:	4606      	mov	r6, r0
    3e92:	4615      	mov	r5, r2
    3e94:	461c      	mov	r4, r3
	__asm__ volatile(
    3e96:	f04f 0320 	mov.w	r3, #32
    3e9a:	f3ef 8711 	mrs	r7, BASEPRI
    3e9e:	f383 8812 	msr	BASEPRI_MAX, r3
    3ea2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    3ea6:	f001 fa6a 	bl	537e <add_to_waitq_locked>
	__asm__ volatile(
    3eaa:	f387 8811 	msr	BASEPRI, r7
    3eae:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3eb2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3eb6:	bf08      	it	eq
    3eb8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    3ebc:	d008      	beq.n	3ed0 <pend+0x44>
    3ebe:	462a      	mov	r2, r5
    3ec0:	4623      	mov	r3, r4
    3ec2:	f106 0018 	add.w	r0, r6, #24
    3ec6:	4903      	ldr	r1, [pc, #12]	; (3ed4 <pend+0x48>)
}
    3ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3ecc:	f000 ba18 	b.w	4300 <z_add_timeout>
    3ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ed4:	0000533b 	.word	0x0000533b

00003ed8 <z_pend_curr>:
{
    3ed8:	b510      	push	{r4, lr}
	pending_current = _current;
    3eda:	4b07      	ldr	r3, [pc, #28]	; (3ef8 <z_pend_curr+0x20>)
    3edc:	6898      	ldr	r0, [r3, #8]
    3ede:	4b07      	ldr	r3, [pc, #28]	; (3efc <z_pend_curr+0x24>)
{
    3ee0:	460c      	mov	r4, r1
	pending_current = _current;
    3ee2:	6018      	str	r0, [r3, #0]
{
    3ee4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    3ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3eea:	f7ff ffcf 	bl	3e8c <pend>
    3eee:	4620      	mov	r0, r4
}
    3ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ef4:	f7fd bb76 	b.w	15e4 <arch_swap>
    3ef8:	200009b8 	.word	0x200009b8
    3efc:	200009e0 	.word	0x200009e0

00003f00 <z_set_prio>:
{
    3f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f02:	4604      	mov	r4, r0
	__asm__ volatile(
    3f04:	f04f 0320 	mov.w	r3, #32
    3f08:	f3ef 8611 	mrs	r6, BASEPRI
    3f0c:	f383 8812 	msr	BASEPRI_MAX, r3
    3f10:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    3f14:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3f16:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    3f18:	b249      	sxtb	r1, r1
    3f1a:	d133      	bne.n	3f84 <z_set_prio+0x84>
		if (need_sched) {
    3f1c:	6982      	ldr	r2, [r0, #24]
    3f1e:	bb8a      	cbnz	r2, 3f84 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f24:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3f26:	f001 f9ca 	bl	52be <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3f2a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    3f2c:	4a17      	ldr	r2, [pc, #92]	; (3f8c <z_set_prio+0x8c>)
				thread->base.prio = prio;
    3f2e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    3f30:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3f34:	7343      	strb	r3, [r0, #13]
    3f36:	4610      	mov	r0, r2
    3f38:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f3c:	4283      	cmp	r3, r0
    3f3e:	d01b      	beq.n	3f78 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3f40:	b1d3      	cbz	r3, 3f78 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    3f42:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    3f44:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    3f48:	42a9      	cmp	r1, r5
    3f4a:	d010      	beq.n	3f6e <z_set_prio+0x6e>
		return b2 - b1;
    3f4c:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    3f4e:	2d00      	cmp	r5, #0
    3f50:	dd0d      	ble.n	3f6e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    3f52:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3f54:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3f58:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3f5a:	605c      	str	r4, [r3, #4]
			update_cache(1);
    3f5c:	2001      	movs	r0, #1
    3f5e:	f7ff fe8d 	bl	3c7c <update_cache>
    3f62:	2001      	movs	r0, #1
	__asm__ volatile(
    3f64:	f386 8811 	msr	BASEPRI, r6
    3f68:	f3bf 8f6f 	isb	sy
}
    3f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    3f6e:	42bb      	cmp	r3, r7
    3f70:	d002      	beq.n	3f78 <z_set_prio+0x78>
    3f72:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3f74:	2b00      	cmp	r3, #0
    3f76:	d1e5      	bne.n	3f44 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    3f78:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    3f7a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    3f7e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3f80:	6254      	str	r4, [r2, #36]	; 0x24
}
    3f82:	e7eb      	b.n	3f5c <z_set_prio+0x5c>
			thread->base.prio = prio;
    3f84:	73a1      	strb	r1, [r4, #14]
    3f86:	2000      	movs	r0, #0
    3f88:	e7ec      	b.n	3f64 <z_set_prio+0x64>
    3f8a:	bf00      	nop
    3f8c:	200009b8 	.word	0x200009b8

00003f90 <z_impl_k_thread_suspend>:
{
    3f90:	b570      	push	{r4, r5, r6, lr}
    3f92:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3f94:	3018      	adds	r0, #24
    3f96:	f001 fa34 	bl	5402 <z_abort_timeout>
	__asm__ volatile(
    3f9a:	f04f 0320 	mov.w	r3, #32
    3f9e:	f3ef 8611 	mrs	r6, BASEPRI
    3fa2:	f383 8812 	msr	BASEPRI_MAX, r3
    3fa6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3faa:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    3fae:	7b63      	ldrb	r3, [r4, #13]
    3fb0:	2a00      	cmp	r2, #0
    3fb2:	da05      	bge.n	3fc0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3fb8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3fba:	4620      	mov	r0, r4
    3fbc:	f001 f97f 	bl	52be <sys_dlist_remove>
		update_cache(thread == _current);
    3fc0:	4d0b      	ldr	r5, [pc, #44]	; (3ff0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3fc2:	7b63      	ldrb	r3, [r4, #13]
    3fc4:	68a8      	ldr	r0, [r5, #8]
    3fc6:	f043 0310 	orr.w	r3, r3, #16
    3fca:	7363      	strb	r3, [r4, #13]
    3fcc:	1b03      	subs	r3, r0, r4
    3fce:	4258      	negs	r0, r3
    3fd0:	4158      	adcs	r0, r3
    3fd2:	f7ff fe53 	bl	3c7c <update_cache>
	__asm__ volatile(
    3fd6:	f386 8811 	msr	BASEPRI, r6
    3fda:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3fde:	68ab      	ldr	r3, [r5, #8]
    3fe0:	42a3      	cmp	r3, r4
    3fe2:	d103      	bne.n	3fec <z_impl_k_thread_suspend+0x5c>
}
    3fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3fe8:	f001 b987 	b.w	52fa <z_reschedule_unlocked>
}
    3fec:	bd70      	pop	{r4, r5, r6, pc}
    3fee:	bf00      	nop
    3ff0:	200009b8 	.word	0x200009b8

00003ff4 <k_sched_unlock>:
{
    3ff4:	b510      	push	{r4, lr}
	__asm__ volatile(
    3ff6:	f04f 0320 	mov.w	r3, #32
    3ffa:	f3ef 8411 	mrs	r4, BASEPRI
    3ffe:	f383 8812 	msr	BASEPRI_MAX, r3
    4002:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4006:	4b08      	ldr	r3, [pc, #32]	; (4028 <k_sched_unlock+0x34>)
    4008:	689a      	ldr	r2, [r3, #8]
    400a:	7bd3      	ldrb	r3, [r2, #15]
    400c:	3301      	adds	r3, #1
    400e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4010:	2000      	movs	r0, #0
    4012:	f7ff fe33 	bl	3c7c <update_cache>
	__asm__ volatile(
    4016:	f384 8811 	msr	BASEPRI, r4
    401a:	f3bf 8f6f 	isb	sy
}
    401e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4022:	f001 b96a 	b.w	52fa <z_reschedule_unlocked>
    4026:	bf00      	nop
    4028:	200009b8 	.word	0x200009b8

0000402c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    402c:	4b04      	ldr	r3, [pc, #16]	; (4040 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    402e:	2100      	movs	r1, #0
    4030:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4034:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4038:	4608      	mov	r0, r1
    403a:	f7ff bdc7 	b.w	3bcc <k_sched_time_slice_set>
    403e:	bf00      	nop
    4040:	200009b8 	.word	0x200009b8

00004044 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4046:	f04f 0320 	mov.w	r3, #32
    404a:	f3ef 8511 	mrs	r5, BASEPRI
    404e:	f383 8812 	msr	BASEPRI_MAX, r3
    4052:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4056:	491a      	ldr	r1, [pc, #104]	; (40c0 <z_impl_k_yield+0x7c>)
    4058:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    405a:	7b43      	ldrb	r3, [r0, #13]
    405c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4060:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4062:	f001 f92c 	bl	52be <sys_dlist_remove>
	}
	queue_thread(_current);
    4066:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4068:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    406a:	4608      	mov	r0, r1
    406c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4070:	735a      	strb	r2, [r3, #13]
    4072:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4076:	4282      	cmp	r2, r0
    4078:	d01c      	beq.n	40b4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    407a:	b1da      	cbz	r2, 40b4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    407c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    407e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    4082:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    4086:	42a6      	cmp	r6, r4
    4088:	d00f      	beq.n	40aa <z_impl_k_yield+0x66>
		return b2 - b1;
    408a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    408c:	2c00      	cmp	r4, #0
    408e:	dd0c      	ble.n	40aa <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    4090:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4092:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    4096:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    4098:	6053      	str	r3, [r2, #4]
	update_cache(1);
    409a:	2001      	movs	r0, #1
    409c:	f7ff fdee 	bl	3c7c <update_cache>
    40a0:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    40a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    40a6:	f7fd ba9d 	b.w	15e4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    40aa:	42ba      	cmp	r2, r7
    40ac:	d002      	beq.n	40b4 <z_impl_k_yield+0x70>
    40ae:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    40b0:	2a00      	cmp	r2, #0
    40b2:	d1e6      	bne.n	4082 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    40b4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    40b6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    40ba:	6013      	str	r3, [r2, #0]
	list->tail = node;
    40bc:	624b      	str	r3, [r1, #36]	; 0x24
}
    40be:	e7ec      	b.n	409a <z_impl_k_yield+0x56>
    40c0:	200009b8 	.word	0x200009b8

000040c4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    40c4:	ea50 0301 	orrs.w	r3, r0, r1
{
    40c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40cc:	4605      	mov	r5, r0
    40ce:	460e      	mov	r6, r1
	if (ticks == 0) {
    40d0:	d103      	bne.n	40da <z_tick_sleep+0x16>
	z_impl_k_yield();
    40d2:	f7ff ffb7 	bl	4044 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    40d6:	2000      	movs	r0, #0
    40d8:	e033      	b.n	4142 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    40da:	f06f 0401 	mvn.w	r4, #1
    40de:	1a24      	subs	r4, r4, r0
    40e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    40e4:	eb63 0301 	sbc.w	r3, r3, r1
    40e8:	2c01      	cmp	r4, #1
    40ea:	f173 0300 	sbcs.w	r3, r3, #0
    40ee:	da02      	bge.n	40f6 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    40f0:	f001 f9c7 	bl	5482 <sys_clock_tick_get_32>
    40f4:	1944      	adds	r4, r0, r5
    40f6:	f04f 0320 	mov.w	r3, #32
    40fa:	f3ef 8811 	mrs	r8, BASEPRI
    40fe:	f383 8812 	msr	BASEPRI_MAX, r3
    4102:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4106:	4f10      	ldr	r7, [pc, #64]	; (4148 <z_tick_sleep+0x84>)
    4108:	4b10      	ldr	r3, [pc, #64]	; (414c <z_tick_sleep+0x88>)
    410a:	68b8      	ldr	r0, [r7, #8]
    410c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    410e:	f7ff fea5 	bl	3e5c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4112:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4114:	490e      	ldr	r1, [pc, #56]	; (4150 <z_tick_sleep+0x8c>)
    4116:	462a      	mov	r2, r5
    4118:	4633      	mov	r3, r6
    411a:	3018      	adds	r0, #24
    411c:	f000 f8f0 	bl	4300 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4120:	68ba      	ldr	r2, [r7, #8]
    4122:	7b53      	ldrb	r3, [r2, #13]
    4124:	f043 0310 	orr.w	r3, r3, #16
    4128:	7353      	strb	r3, [r2, #13]
    412a:	4640      	mov	r0, r8
    412c:	f7fd fa5a 	bl	15e4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4130:	f001 f9a7 	bl	5482 <sys_clock_tick_get_32>
    4134:	1a20      	subs	r0, r4, r0
    4136:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    413a:	2801      	cmp	r0, #1
    413c:	f173 0300 	sbcs.w	r3, r3, #0
    4140:	dbc9      	blt.n	40d6 <z_tick_sleep+0x12>
}
    4142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4146:	bf00      	nop
    4148:	200009b8 	.word	0x200009b8
    414c:	200009e0 	.word	0x200009e0
    4150:	0000533b 	.word	0x0000533b

00004154 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4154:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4158:	bf08      	it	eq
    415a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    415e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4160:	d106      	bne.n	4170 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4162:	4b08      	ldr	r3, [pc, #32]	; (4184 <z_impl_k_sleep+0x30>)
    4164:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4166:	f7ff ff13 	bl	3f90 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    416a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    416e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4170:	f7ff ffa8 	bl	40c4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    4174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4178:	fb80 0303 	smull	r0, r3, r0, r3
    417c:	0bc0      	lsrs	r0, r0, #15
    417e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4182:	e7f4      	b.n	416e <z_impl_k_sleep+0x1a>
    4184:	200009b8 	.word	0x200009b8

00004188 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4188:	4b01      	ldr	r3, [pc, #4]	; (4190 <z_impl_z_current_get+0x8>)
    418a:	6898      	ldr	r0, [r3, #8]
    418c:	4770      	bx	lr
    418e:	bf00      	nop
    4190:	200009b8 	.word	0x200009b8

00004194 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4198:	4604      	mov	r4, r0
    419a:	f04f 0320 	mov.w	r3, #32
    419e:	f3ef 8611 	mrs	r6, BASEPRI
    41a2:	f383 8812 	msr	BASEPRI_MAX, r3
    41a6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    41aa:	7b43      	ldrb	r3, [r0, #13]
    41ac:	071a      	lsls	r2, r3, #28
    41ae:	d505      	bpl.n	41bc <z_thread_abort+0x28>
	__asm__ volatile(
    41b0:	f386 8811 	msr	BASEPRI, r6
    41b4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    41b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    41bc:	f023 0220 	bic.w	r2, r3, #32
    41c0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    41c4:	09d2      	lsrs	r2, r2, #7
    41c6:	d120      	bne.n	420a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    41c8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    41ca:	68a3      	ldr	r3, [r4, #8]
    41cc:	b113      	cbz	r3, 41d4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    41ce:	4620      	mov	r0, r4
    41d0:	f001 f87d 	bl	52ce <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    41d4:	f104 0018 	add.w	r0, r4, #24
    41d8:	f001 f913 	bl	5402 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    41dc:	f104 0758 	add.w	r7, r4, #88	; 0x58
    41e0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    41e4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41e6:	42bd      	cmp	r5, r7
    41e8:	d000      	beq.n	41ec <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    41ea:	b9b5      	cbnz	r5, 421a <z_thread_abort+0x86>
		update_cache(1);
    41ec:	2001      	movs	r0, #1
    41ee:	f7ff fd45 	bl	3c7c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    41f2:	4b10      	ldr	r3, [pc, #64]	; (4234 <z_thread_abort+0xa0>)
    41f4:	689b      	ldr	r3, [r3, #8]
    41f6:	42a3      	cmp	r3, r4
    41f8:	d1da      	bne.n	41b0 <z_thread_abort+0x1c>
    41fa:	f3ef 8305 	mrs	r3, IPSR
    41fe:	2b00      	cmp	r3, #0
    4200:	d1d6      	bne.n	41b0 <z_thread_abort+0x1c>
    4202:	4630      	mov	r0, r6
    4204:	f7fd f9ee 	bl	15e4 <arch_swap>
	return ret;
    4208:	e7d2      	b.n	41b0 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    420a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    420e:	f043 0308 	orr.w	r3, r3, #8
    4212:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4214:	f001 f853 	bl	52be <sys_dlist_remove>
}
    4218:	e7d7      	b.n	41ca <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    421a:	4628      	mov	r0, r5
    421c:	f001 f857 	bl	52ce <unpend_thread_no_timeout>
    4220:	f105 0018 	add.w	r0, r5, #24
    4224:	f001 f8ed 	bl	5402 <z_abort_timeout>
    4228:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    422c:	4628      	mov	r0, r5
    422e:	f7ff fdc1 	bl	3db4 <ready_thread>
    4232:	e7d7      	b.n	41e4 <z_thread_abort+0x50>
    4234:	200009b8 	.word	0x200009b8

00004238 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4238:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    423a:	4806      	ldr	r0, [pc, #24]	; (4254 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    423c:	4a06      	ldr	r2, [pc, #24]	; (4258 <z_data_copy+0x20>)
    423e:	4907      	ldr	r1, [pc, #28]	; (425c <z_data_copy+0x24>)
    4240:	1a12      	subs	r2, r2, r0
    4242:	f000 ffda 	bl	51fa <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    424a:	4a05      	ldr	r2, [pc, #20]	; (4260 <z_data_copy+0x28>)
    424c:	4905      	ldr	r1, [pc, #20]	; (4264 <z_data_copy+0x2c>)
    424e:	4806      	ldr	r0, [pc, #24]	; (4268 <z_data_copy+0x30>)
    4250:	f000 bfd3 	b.w	51fa <z_early_memcpy>
    4254:	20000000 	.word	0x20000000
    4258:	200001dc 	.word	0x200001dc
    425c:	00005bd8 	.word	0x00005bd8
    4260:	00000000 	.word	0x00000000
    4264:	00005bd8 	.word	0x00005bd8
    4268:	20000000 	.word	0x20000000

0000426c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    426c:	4b03      	ldr	r3, [pc, #12]	; (427c <elapsed+0x10>)
    426e:	681b      	ldr	r3, [r3, #0]
    4270:	b90b      	cbnz	r3, 4276 <elapsed+0xa>
    4272:	f7fe bbe7 	b.w	2a44 <sys_clock_elapsed>
}
    4276:	2000      	movs	r0, #0
    4278:	4770      	bx	lr
    427a:	bf00      	nop
    427c:	200009ec 	.word	0x200009ec

00004280 <next_timeout>:
	return list->head == list;
    4280:	4b10      	ldr	r3, [pc, #64]	; (42c4 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    4282:	b510      	push	{r4, lr}
    4284:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4286:	429c      	cmp	r4, r3
    4288:	bf08      	it	eq
    428a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    428c:	f7ff ffee 	bl	426c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4290:	b1a4      	cbz	r4, 42bc <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4292:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    4296:	1a1b      	subs	r3, r3, r0
    4298:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    429c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    42a0:	f170 0200 	sbcs.w	r2, r0, #0
    42a4:	da0a      	bge.n	42bc <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    42a6:	2800      	cmp	r0, #0
    42a8:	bfac      	ite	ge
    42aa:	4618      	movge	r0, r3
    42ac:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    42ae:	4b06      	ldr	r3, [pc, #24]	; (42c8 <next_timeout+0x48>)
    42b0:	691b      	ldr	r3, [r3, #16]
    42b2:	b113      	cbz	r3, 42ba <next_timeout+0x3a>
    42b4:	4298      	cmp	r0, r3
    42b6:	bfa8      	it	ge
    42b8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    42ba:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    42bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    42c0:	e7f5      	b.n	42ae <next_timeout+0x2e>
    42c2:	bf00      	nop
    42c4:	20000108 	.word	0x20000108
    42c8:	200009b8 	.word	0x200009b8

000042cc <remove_timeout>:
{
    42cc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    42ce:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    42d0:	b168      	cbz	r0, 42ee <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    42d2:	4a0a      	ldr	r2, [pc, #40]	; (42fc <remove_timeout+0x30>)
    42d4:	6852      	ldr	r2, [r2, #4]
    42d6:	4290      	cmp	r0, r2
    42d8:	d009      	beq.n	42ee <remove_timeout+0x22>
	if (next(t) != NULL) {
    42da:	b143      	cbz	r3, 42ee <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    42dc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    42e0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    42e4:	1912      	adds	r2, r2, r4
    42e6:	eb41 0105 	adc.w	r1, r1, r5
    42ea:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    42ee:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    42f0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    42f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    42f4:	2300      	movs	r3, #0
	node->prev = NULL;
    42f6:	e9c0 3300 	strd	r3, r3, [r0]
}
    42fa:	bd30      	pop	{r4, r5, pc}
    42fc:	20000108 	.word	0x20000108

00004300 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4304:	bf08      	it	eq
    4306:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    430a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    430c:	4604      	mov	r4, r0
    430e:	461f      	mov	r7, r3
    4310:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4312:	d067      	beq.n	43e4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4314:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    4316:	f04f 0320 	mov.w	r3, #32
    431a:	f3ef 8611 	mrs	r6, BASEPRI
    431e:	f383 8812 	msr	BASEPRI_MAX, r3
    4322:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4326:	f06f 0201 	mvn.w	r2, #1
    432a:	1b53      	subs	r3, r2, r5
    432c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4330:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4334:	2b00      	cmp	r3, #0
    4336:	db1b      	blt.n	4370 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4338:	4b2b      	ldr	r3, [pc, #172]	; (43e8 <z_add_timeout+0xe8>)
    433a:	e9d3 1300 	ldrd	r1, r3, [r3]
    433e:	1a52      	subs	r2, r2, r1
    4340:	eb6c 0303 	sbc.w	r3, ip, r3
    4344:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    4346:	eb63 0307 	sbc.w	r3, r3, r7
    434a:	2d01      	cmp	r5, #1
    434c:	f173 0200 	sbcs.w	r2, r3, #0
    4350:	bfbc      	itt	lt
    4352:	2501      	movlt	r5, #1
    4354:	2300      	movlt	r3, #0
    4356:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    435a:	4824      	ldr	r0, [pc, #144]	; (43ec <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    435c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4360:	4283      	cmp	r3, r0
    4362:	d118      	bne.n	4396 <z_add_timeout+0x96>
	node->prev = tail;
    4364:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    4368:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    436c:	6044      	str	r4, [r0, #4]
}
    436e:	e026      	b.n	43be <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4370:	f7ff ff7c 	bl	426c <elapsed>
    4374:	3501      	adds	r5, #1
    4376:	f147 0700 	adc.w	r7, r7, #0
    437a:	182d      	adds	r5, r5, r0
    437c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    4380:	e9c4 5704 	strd	r5, r7, [r4, #16]
    4384:	e7e9      	b.n	435a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    4386:	1a52      	subs	r2, r2, r1
    4388:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    438c:	459c      	cmp	ip, r3
    438e:	e9c4 2504 	strd	r2, r5, [r4, #16]
    4392:	d0e7      	beq.n	4364 <z_add_timeout+0x64>
    4394:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    4396:	2b00      	cmp	r3, #0
    4398:	d0e4      	beq.n	4364 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    439a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    439e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    43a2:	428a      	cmp	r2, r1
    43a4:	eb75 0e07 	sbcs.w	lr, r5, r7
    43a8:	daed      	bge.n	4386 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    43aa:	1a8a      	subs	r2, r1, r2
    43ac:	eb67 0505 	sbc.w	r5, r7, r5
    43b0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    43b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    43b6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    43ba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    43bc:	605c      	str	r4, [r3, #4]
	return list->head == list;
    43be:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43c0:	4283      	cmp	r3, r0
    43c2:	d00b      	beq.n	43dc <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    43c4:	429c      	cmp	r4, r3
    43c6:	d109      	bne.n	43dc <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    43c8:	f7ff ff5a 	bl	4280 <next_timeout>

			if (next_time == 0 ||
    43cc:	b118      	cbz	r0, 43d6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    43ce:	4b08      	ldr	r3, [pc, #32]	; (43f0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    43d0:	691b      	ldr	r3, [r3, #16]
    43d2:	4283      	cmp	r3, r0
    43d4:	d002      	beq.n	43dc <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    43d6:	2100      	movs	r1, #0
    43d8:	f7fe fb02 	bl	29e0 <sys_clock_set_timeout>
	__asm__ volatile(
    43dc:	f386 8811 	msr	BASEPRI, r6
    43e0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    43e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43e6:	bf00      	nop
    43e8:	20000300 	.word	0x20000300
    43ec:	20000108 	.word	0x20000108
    43f0:	200009b8 	.word	0x200009b8

000043f4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    43f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    43f8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    43fa:	f7ff fc99 	bl	3d30 <z_time_slice>
	__asm__ volatile(
    43fe:	f04f 0320 	mov.w	r3, #32
    4402:	f3ef 8411 	mrs	r4, BASEPRI
    4406:	f383 8812 	msr	BASEPRI_MAX, r3
    440a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    440e:	4e24      	ldr	r6, [pc, #144]	; (44a0 <sys_clock_announce+0xac>)
	return list->head == list;
    4410:	f8df 8090 	ldr.w	r8, [pc, #144]	; 44a4 <sys_clock_announce+0xb0>
    4414:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4416:	4d24      	ldr	r5, [pc, #144]	; (44a8 <sys_clock_announce+0xb4>)
    4418:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    441c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    441e:	4540      	cmp	r0, r8
		curr_tick += dt;
    4420:	e9d5 1e00 	ldrd	r1, lr, [r5]
    4424:	ea4f 77e2 	mov.w	r7, r2, asr #31
    4428:	d00b      	beq.n	4442 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    442a:	b150      	cbz	r0, 4442 <sys_clock_announce+0x4e>
    442c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    4430:	429a      	cmp	r2, r3
    4432:	eb77 090c 	sbcs.w	r9, r7, ip
    4436:	da16      	bge.n	4466 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4438:	1a9b      	subs	r3, r3, r2
    443a:	eb6c 0c07 	sbc.w	ip, ip, r7
    443e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    4442:	1852      	adds	r2, r2, r1
    4444:	eb4e 0707 	adc.w	r7, lr, r7
    4448:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    444c:	2500      	movs	r5, #0
    444e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4450:	f7ff ff16 	bl	4280 <next_timeout>
    4454:	4629      	mov	r1, r5
    4456:	f7fe fac3 	bl	29e0 <sys_clock_set_timeout>
	__asm__ volatile(
    445a:	f384 8811 	msr	BASEPRI, r4
    445e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    4466:	1859      	adds	r1, r3, r1
    4468:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    446c:	1ad3      	subs	r3, r2, r3
    446e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    4470:	2200      	movs	r2, #0
    4472:	2300      	movs	r3, #0
    4474:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    4478:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    447c:	f7ff ff26 	bl	42cc <remove_timeout>
    4480:	f384 8811 	msr	BASEPRI, r4
    4484:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4488:	6883      	ldr	r3, [r0, #8]
    448a:	4798      	blx	r3
	__asm__ volatile(
    448c:	f04f 0320 	mov.w	r3, #32
    4490:	f3ef 8411 	mrs	r4, BASEPRI
    4494:	f383 8812 	msr	BASEPRI_MAX, r3
    4498:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    449c:	e7bc      	b.n	4418 <sys_clock_announce+0x24>
    449e:	bf00      	nop
    44a0:	200009ec 	.word	0x200009ec
    44a4:	20000108 	.word	0x20000108
    44a8:	20000300 	.word	0x20000300

000044ac <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    44ac:	b510      	push	{r4, lr}
    44ae:	f04f 0320 	mov.w	r3, #32
    44b2:	f3ef 8411 	mrs	r4, BASEPRI
    44b6:	f383 8812 	msr	BASEPRI_MAX, r3
    44ba:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    44be:	f7fe fac1 	bl	2a44 <sys_clock_elapsed>
    44c2:	4a05      	ldr	r2, [pc, #20]	; (44d8 <sys_clock_tick_get+0x2c>)
    44c4:	e9d2 3100 	ldrd	r3, r1, [r2]
    44c8:	18c0      	adds	r0, r0, r3
    44ca:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    44ce:	f384 8811 	msr	BASEPRI, r4
    44d2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    44d6:	bd10      	pop	{r4, pc}
    44d8:	20000300 	.word	0x20000300

000044dc <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    44dc:	4a02      	ldr	r2, [pc, #8]	; (44e8 <boot_banner+0xc>)
    44de:	4903      	ldr	r1, [pc, #12]	; (44ec <boot_banner+0x10>)
    44e0:	4803      	ldr	r0, [pc, #12]	; (44f0 <boot_banner+0x14>)
    44e2:	f000 b9fe 	b.w	48e2 <printk>
    44e6:	bf00      	nop
    44e8:	00005abd 	.word	0x00005abd
    44ec:	00005ba4 	.word	0x00005ba4
    44f0:	00005bb1 	.word	0x00005bb1

000044f4 <nrf_cc3xx_platform_init_no_rng>:
    44f4:	b510      	push	{r4, lr}
    44f6:	4c0a      	ldr	r4, [pc, #40]	; (4520 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    44f8:	6823      	ldr	r3, [r4, #0]
    44fa:	b11b      	cbz	r3, 4504 <nrf_cc3xx_platform_init_no_rng+0x10>
    44fc:	2301      	movs	r3, #1
    44fe:	6023      	str	r3, [r4, #0]
    4500:	2000      	movs	r0, #0
    4502:	bd10      	pop	{r4, pc}
    4504:	f000 f8ce 	bl	46a4 <CC_LibInitNoRng>
    4508:	2800      	cmp	r0, #0
    450a:	d0f7      	beq.n	44fc <nrf_cc3xx_platform_init_no_rng+0x8>
    450c:	3801      	subs	r0, #1
    450e:	2806      	cmp	r0, #6
    4510:	d803      	bhi.n	451a <nrf_cc3xx_platform_init_no_rng+0x26>
    4512:	4b04      	ldr	r3, [pc, #16]	; (4524 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4514:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4518:	bd10      	pop	{r4, pc}
    451a:	4803      	ldr	r0, [pc, #12]	; (4528 <nrf_cc3xx_platform_init_no_rng+0x34>)
    451c:	bd10      	pop	{r4, pc}
    451e:	bf00      	nop
    4520:	200009f0 	.word	0x200009f0
    4524:	00005884 	.word	0x00005884
    4528:	ffff8ffe 	.word	0xffff8ffe

0000452c <nrf_cc3xx_platform_abort>:
    452c:	f3bf 8f4f 	dsb	sy
    4530:	4905      	ldr	r1, [pc, #20]	; (4548 <nrf_cc3xx_platform_abort+0x1c>)
    4532:	4b06      	ldr	r3, [pc, #24]	; (454c <nrf_cc3xx_platform_abort+0x20>)
    4534:	68ca      	ldr	r2, [r1, #12]
    4536:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    453a:	4313      	orrs	r3, r2
    453c:	60cb      	str	r3, [r1, #12]
    453e:	f3bf 8f4f 	dsb	sy
    4542:	bf00      	nop
    4544:	e7fd      	b.n	4542 <nrf_cc3xx_platform_abort+0x16>
    4546:	bf00      	nop
    4548:	e000ed00 	.word	0xe000ed00
    454c:	05fa0004 	.word	0x05fa0004

00004550 <CC_PalAbort>:
    4550:	b410      	push	{r4}
    4552:	4b09      	ldr	r3, [pc, #36]	; (4578 <CC_PalAbort+0x28>)
    4554:	4909      	ldr	r1, [pc, #36]	; (457c <CC_PalAbort+0x2c>)
    4556:	4c0a      	ldr	r4, [pc, #40]	; (4580 <CC_PalAbort+0x30>)
    4558:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    455c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4560:	6849      	ldr	r1, [r1, #4]
    4562:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4566:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    456a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    456e:	2300      	movs	r3, #0
    4570:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    4574:	bc10      	pop	{r4}
    4576:	4708      	bx	r1
    4578:	5002b000 	.word	0x5002b000
    457c:	20000110 	.word	0x20000110
    4580:	5002a000 	.word	0x5002a000

00004584 <nrf_cc3xx_platform_set_abort>:
    4584:	e9d0 1200 	ldrd	r1, r2, [r0]
    4588:	4b01      	ldr	r3, [pc, #4]	; (4590 <nrf_cc3xx_platform_set_abort+0xc>)
    458a:	e9c3 1200 	strd	r1, r2, [r3]
    458e:	4770      	bx	lr
    4590:	20000110 	.word	0x20000110

00004594 <mutex_free>:
    4594:	b510      	push	{r4, lr}
    4596:	4604      	mov	r4, r0
    4598:	b130      	cbz	r0, 45a8 <mutex_free+0x14>
    459a:	6863      	ldr	r3, [r4, #4]
    459c:	06db      	lsls	r3, r3, #27
    459e:	d502      	bpl.n	45a6 <mutex_free+0x12>
    45a0:	2300      	movs	r3, #0
    45a2:	6023      	str	r3, [r4, #0]
    45a4:	6063      	str	r3, [r4, #4]
    45a6:	bd10      	pop	{r4, pc}
    45a8:	4b02      	ldr	r3, [pc, #8]	; (45b4 <mutex_free+0x20>)
    45aa:	4803      	ldr	r0, [pc, #12]	; (45b8 <mutex_free+0x24>)
    45ac:	685b      	ldr	r3, [r3, #4]
    45ae:	4798      	blx	r3
    45b0:	e7f3      	b.n	459a <mutex_free+0x6>
    45b2:	bf00      	nop
    45b4:	20000110 	.word	0x20000110
    45b8:	000058a0 	.word	0x000058a0

000045bc <mutex_lock>:
    45bc:	b1b0      	cbz	r0, 45ec <mutex_lock+0x30>
    45be:	6843      	ldr	r3, [r0, #4]
    45c0:	b193      	cbz	r3, 45e8 <mutex_lock+0x2c>
    45c2:	06db      	lsls	r3, r3, #27
    45c4:	d50e      	bpl.n	45e4 <mutex_lock+0x28>
    45c6:	2301      	movs	r3, #1
    45c8:	e850 2f00 	ldrex	r2, [r0]
    45cc:	4619      	mov	r1, r3
    45ce:	e840 1c00 	strex	ip, r1, [r0]
    45d2:	f09c 0f00 	teq	ip, #0
    45d6:	d1f7      	bne.n	45c8 <mutex_lock+0xc>
    45d8:	2a01      	cmp	r2, #1
    45da:	d0f5      	beq.n	45c8 <mutex_lock+0xc>
    45dc:	f3bf 8f5f 	dmb	sy
    45e0:	2000      	movs	r0, #0
    45e2:	4770      	bx	lr
    45e4:	4803      	ldr	r0, [pc, #12]	; (45f4 <mutex_lock+0x38>)
    45e6:	4770      	bx	lr
    45e8:	4803      	ldr	r0, [pc, #12]	; (45f8 <mutex_lock+0x3c>)
    45ea:	4770      	bx	lr
    45ec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    45f0:	4770      	bx	lr
    45f2:	bf00      	nop
    45f4:	ffff8fe9 	.word	0xffff8fe9
    45f8:	ffff8fea 	.word	0xffff8fea

000045fc <mutex_unlock>:
    45fc:	b168      	cbz	r0, 461a <mutex_unlock+0x1e>
    45fe:	6843      	ldr	r3, [r0, #4]
    4600:	b13b      	cbz	r3, 4612 <mutex_unlock+0x16>
    4602:	06db      	lsls	r3, r3, #27
    4604:	d507      	bpl.n	4616 <mutex_unlock+0x1a>
    4606:	f3bf 8f5f 	dmb	sy
    460a:	2300      	movs	r3, #0
    460c:	6003      	str	r3, [r0, #0]
    460e:	4618      	mov	r0, r3
    4610:	4770      	bx	lr
    4612:	4803      	ldr	r0, [pc, #12]	; (4620 <mutex_unlock+0x24>)
    4614:	4770      	bx	lr
    4616:	4803      	ldr	r0, [pc, #12]	; (4624 <mutex_unlock+0x28>)
    4618:	4770      	bx	lr
    461a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    461e:	4770      	bx	lr
    4620:	ffff8fea 	.word	0xffff8fea
    4624:	ffff8fe9 	.word	0xffff8fe9

00004628 <mutex_init>:
    4628:	b510      	push	{r4, lr}
    462a:	4604      	mov	r4, r0
    462c:	b120      	cbz	r0, 4638 <mutex_init+0x10>
    462e:	2200      	movs	r2, #0
    4630:	2311      	movs	r3, #17
    4632:	6022      	str	r2, [r4, #0]
    4634:	6063      	str	r3, [r4, #4]
    4636:	bd10      	pop	{r4, pc}
    4638:	4801      	ldr	r0, [pc, #4]	; (4640 <mutex_init+0x18>)
    463a:	f7ff ff89 	bl	4550 <CC_PalAbort>
    463e:	e7f6      	b.n	462e <mutex_init+0x6>
    4640:	000058c8 	.word	0x000058c8

00004644 <nrf_cc3xx_platform_set_mutexes>:
    4644:	b570      	push	{r4, r5, r6, lr}
    4646:	e9d0 2300 	ldrd	r2, r3, [r0]
    464a:	4c13      	ldr	r4, [pc, #76]	; (4698 <nrf_cc3xx_platform_set_mutexes+0x54>)
    464c:	4d13      	ldr	r5, [pc, #76]	; (469c <nrf_cc3xx_platform_set_mutexes+0x58>)
    464e:	6063      	str	r3, [r4, #4]
    4650:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    4654:	e9c4 3002 	strd	r3, r0, [r4, #8]
    4658:	6022      	str	r2, [r4, #0]
    465a:	4b11      	ldr	r3, [pc, #68]	; (46a0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    465c:	6808      	ldr	r0, [r1, #0]
    465e:	6018      	str	r0, [r3, #0]
    4660:	6848      	ldr	r0, [r1, #4]
    4662:	6058      	str	r0, [r3, #4]
    4664:	6888      	ldr	r0, [r1, #8]
    4666:	6098      	str	r0, [r3, #8]
    4668:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    466c:	60d8      	str	r0, [r3, #12]
    466e:	6119      	str	r1, [r3, #16]
    4670:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    4674:	06db      	lsls	r3, r3, #27
    4676:	d50d      	bpl.n	4694 <nrf_cc3xx_platform_set_mutexes+0x50>
    4678:	2300      	movs	r3, #0
    467a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    467e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    4682:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4686:	4790      	blx	r2
    4688:	6823      	ldr	r3, [r4, #0]
    468a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    468e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4692:	4718      	bx	r3
    4694:	bd70      	pop	{r4, r5, r6, pc}
    4696:	bf00      	nop
    4698:	20000120 	.word	0x20000120
    469c:	20000a08 	.word	0x20000a08
    46a0:	20000130 	.word	0x20000130

000046a4 <CC_LibInitNoRng>:
    46a4:	b538      	push	{r3, r4, r5, lr}
    46a6:	f000 f82f 	bl	4708 <CC_HalInit>
    46aa:	b120      	cbz	r0, 46b6 <CC_LibInitNoRng+0x12>
    46ac:	2403      	movs	r4, #3
    46ae:	f000 f863 	bl	4778 <CC_PalTerminate>
    46b2:	4620      	mov	r0, r4
    46b4:	bd38      	pop	{r3, r4, r5, pc}
    46b6:	f000 f831 	bl	471c <CC_PalInit>
    46ba:	b998      	cbnz	r0, 46e4 <CC_LibInitNoRng+0x40>
    46bc:	f000 f8ac 	bl	4818 <CC_PalPowerSaveModeSelect>
    46c0:	b998      	cbnz	r0, 46ea <CC_LibInitNoRng+0x46>
    46c2:	4d0f      	ldr	r5, [pc, #60]	; (4700 <CC_LibInitNoRng+0x5c>)
    46c4:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    46c8:	0e1b      	lsrs	r3, r3, #24
    46ca:	2bf0      	cmp	r3, #240	; 0xf0
    46cc:	d108      	bne.n	46e0 <CC_LibInitNoRng+0x3c>
    46ce:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    46d2:	4b0c      	ldr	r3, [pc, #48]	; (4704 <CC_LibInitNoRng+0x60>)
    46d4:	429a      	cmp	r2, r3
    46d6:	d00a      	beq.n	46ee <CC_LibInitNoRng+0x4a>
    46d8:	2407      	movs	r4, #7
    46da:	f000 f817 	bl	470c <CC_HalTerminate>
    46de:	e7e6      	b.n	46ae <CC_LibInitNoRng+0xa>
    46e0:	2406      	movs	r4, #6
    46e2:	e7fa      	b.n	46da <CC_LibInitNoRng+0x36>
    46e4:	2404      	movs	r4, #4
    46e6:	4620      	mov	r0, r4
    46e8:	bd38      	pop	{r3, r4, r5, pc}
    46ea:	2400      	movs	r4, #0
    46ec:	e7f5      	b.n	46da <CC_LibInitNoRng+0x36>
    46ee:	2001      	movs	r0, #1
    46f0:	f000 f892 	bl	4818 <CC_PalPowerSaveModeSelect>
    46f4:	4604      	mov	r4, r0
    46f6:	2800      	cmp	r0, #0
    46f8:	d1f7      	bne.n	46ea <CC_LibInitNoRng+0x46>
    46fa:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    46fe:	e7d8      	b.n	46b2 <CC_LibInitNoRng+0xe>
    4700:	5002b000 	.word	0x5002b000
    4704:	20e00000 	.word	0x20e00000

00004708 <CC_HalInit>:
    4708:	2000      	movs	r0, #0
    470a:	4770      	bx	lr

0000470c <CC_HalTerminate>:
    470c:	2000      	movs	r0, #0
    470e:	4770      	bx	lr

00004710 <CC_HalMaskInterrupt>:
    4710:	4b01      	ldr	r3, [pc, #4]	; (4718 <CC_HalMaskInterrupt+0x8>)
    4712:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    4716:	4770      	bx	lr
    4718:	5002b000 	.word	0x5002b000

0000471c <CC_PalInit>:
    471c:	b510      	push	{r4, lr}
    471e:	4811      	ldr	r0, [pc, #68]	; (4764 <CC_PalInit+0x48>)
    4720:	f000 f848 	bl	47b4 <CC_PalMutexCreate>
    4724:	b100      	cbz	r0, 4728 <CC_PalInit+0xc>
    4726:	bd10      	pop	{r4, pc}
    4728:	480f      	ldr	r0, [pc, #60]	; (4768 <CC_PalInit+0x4c>)
    472a:	f000 f843 	bl	47b4 <CC_PalMutexCreate>
    472e:	2800      	cmp	r0, #0
    4730:	d1f9      	bne.n	4726 <CC_PalInit+0xa>
    4732:	4c0e      	ldr	r4, [pc, #56]	; (476c <CC_PalInit+0x50>)
    4734:	4620      	mov	r0, r4
    4736:	f000 f83d 	bl	47b4 <CC_PalMutexCreate>
    473a:	2800      	cmp	r0, #0
    473c:	d1f3      	bne.n	4726 <CC_PalInit+0xa>
    473e:	4b0c      	ldr	r3, [pc, #48]	; (4770 <CC_PalInit+0x54>)
    4740:	480c      	ldr	r0, [pc, #48]	; (4774 <CC_PalInit+0x58>)
    4742:	601c      	str	r4, [r3, #0]
    4744:	f000 f836 	bl	47b4 <CC_PalMutexCreate>
    4748:	4601      	mov	r1, r0
    474a:	2800      	cmp	r0, #0
    474c:	d1eb      	bne.n	4726 <CC_PalInit+0xa>
    474e:	f000 f82d 	bl	47ac <CC_PalDmaInit>
    4752:	4604      	mov	r4, r0
    4754:	b108      	cbz	r0, 475a <CC_PalInit+0x3e>
    4756:	4620      	mov	r0, r4
    4758:	bd10      	pop	{r4, pc}
    475a:	f000 f83f 	bl	47dc <CC_PalPowerSaveModeInit>
    475e:	4620      	mov	r0, r4
    4760:	e7fa      	b.n	4758 <CC_PalInit+0x3c>
    4762:	bf00      	nop
    4764:	20000168 	.word	0x20000168
    4768:	2000015c 	.word	0x2000015c
    476c:	20000164 	.word	0x20000164
    4770:	2000016c 	.word	0x2000016c
    4774:	20000160 	.word	0x20000160

00004778 <CC_PalTerminate>:
    4778:	b508      	push	{r3, lr}
    477a:	4808      	ldr	r0, [pc, #32]	; (479c <CC_PalTerminate+0x24>)
    477c:	f000 f824 	bl	47c8 <CC_PalMutexDestroy>
    4780:	4807      	ldr	r0, [pc, #28]	; (47a0 <CC_PalTerminate+0x28>)
    4782:	f000 f821 	bl	47c8 <CC_PalMutexDestroy>
    4786:	4807      	ldr	r0, [pc, #28]	; (47a4 <CC_PalTerminate+0x2c>)
    4788:	f000 f81e 	bl	47c8 <CC_PalMutexDestroy>
    478c:	4806      	ldr	r0, [pc, #24]	; (47a8 <CC_PalTerminate+0x30>)
    478e:	f000 f81b 	bl	47c8 <CC_PalMutexDestroy>
    4792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4796:	f000 b80b 	b.w	47b0 <CC_PalDmaTerminate>
    479a:	bf00      	nop
    479c:	20000168 	.word	0x20000168
    47a0:	2000015c 	.word	0x2000015c
    47a4:	20000164 	.word	0x20000164
    47a8:	20000160 	.word	0x20000160

000047ac <CC_PalDmaInit>:
    47ac:	2000      	movs	r0, #0
    47ae:	4770      	bx	lr

000047b0 <CC_PalDmaTerminate>:
    47b0:	4770      	bx	lr
    47b2:	bf00      	nop

000047b4 <CC_PalMutexCreate>:
    47b4:	b508      	push	{r3, lr}
    47b6:	4b03      	ldr	r3, [pc, #12]	; (47c4 <CC_PalMutexCreate+0x10>)
    47b8:	6802      	ldr	r2, [r0, #0]
    47ba:	681b      	ldr	r3, [r3, #0]
    47bc:	6810      	ldr	r0, [r2, #0]
    47be:	4798      	blx	r3
    47c0:	2000      	movs	r0, #0
    47c2:	bd08      	pop	{r3, pc}
    47c4:	20000120 	.word	0x20000120

000047c8 <CC_PalMutexDestroy>:
    47c8:	b508      	push	{r3, lr}
    47ca:	4b03      	ldr	r3, [pc, #12]	; (47d8 <CC_PalMutexDestroy+0x10>)
    47cc:	6802      	ldr	r2, [r0, #0]
    47ce:	685b      	ldr	r3, [r3, #4]
    47d0:	6810      	ldr	r0, [r2, #0]
    47d2:	4798      	blx	r3
    47d4:	2000      	movs	r0, #0
    47d6:	bd08      	pop	{r3, pc}
    47d8:	20000120 	.word	0x20000120

000047dc <CC_PalPowerSaveModeInit>:
    47dc:	b570      	push	{r4, r5, r6, lr}
    47de:	4c09      	ldr	r4, [pc, #36]	; (4804 <CC_PalPowerSaveModeInit+0x28>)
    47e0:	4d09      	ldr	r5, [pc, #36]	; (4808 <CC_PalPowerSaveModeInit+0x2c>)
    47e2:	6920      	ldr	r0, [r4, #16]
    47e4:	68ab      	ldr	r3, [r5, #8]
    47e6:	4798      	blx	r3
    47e8:	b118      	cbz	r0, 47f2 <CC_PalPowerSaveModeInit+0x16>
    47ea:	4b08      	ldr	r3, [pc, #32]	; (480c <CC_PalPowerSaveModeInit+0x30>)
    47ec:	4808      	ldr	r0, [pc, #32]	; (4810 <CC_PalPowerSaveModeInit+0x34>)
    47ee:	685b      	ldr	r3, [r3, #4]
    47f0:	4798      	blx	r3
    47f2:	4a08      	ldr	r2, [pc, #32]	; (4814 <CC_PalPowerSaveModeInit+0x38>)
    47f4:	68eb      	ldr	r3, [r5, #12]
    47f6:	6920      	ldr	r0, [r4, #16]
    47f8:	2100      	movs	r1, #0
    47fa:	6011      	str	r1, [r2, #0]
    47fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4800:	4718      	bx	r3
    4802:	bf00      	nop
    4804:	20000130 	.word	0x20000130
    4808:	20000120 	.word	0x20000120
    480c:	20000110 	.word	0x20000110
    4810:	000058ec 	.word	0x000058ec
    4814:	20000a04 	.word	0x20000a04

00004818 <CC_PalPowerSaveModeSelect>:
    4818:	b570      	push	{r4, r5, r6, lr}
    481a:	4d1b      	ldr	r5, [pc, #108]	; (4888 <CC_PalPowerSaveModeSelect+0x70>)
    481c:	4e1b      	ldr	r6, [pc, #108]	; (488c <CC_PalPowerSaveModeSelect+0x74>)
    481e:	4604      	mov	r4, r0
    4820:	68b2      	ldr	r2, [r6, #8]
    4822:	6928      	ldr	r0, [r5, #16]
    4824:	4790      	blx	r2
    4826:	b9f8      	cbnz	r0, 4868 <CC_PalPowerSaveModeSelect+0x50>
    4828:	b15c      	cbz	r4, 4842 <CC_PalPowerSaveModeSelect+0x2a>
    482a:	4c19      	ldr	r4, [pc, #100]	; (4890 <CC_PalPowerSaveModeSelect+0x78>)
    482c:	6823      	ldr	r3, [r4, #0]
    482e:	b1b3      	cbz	r3, 485e <CC_PalPowerSaveModeSelect+0x46>
    4830:	2b01      	cmp	r3, #1
    4832:	d01b      	beq.n	486c <CC_PalPowerSaveModeSelect+0x54>
    4834:	3b01      	subs	r3, #1
    4836:	6023      	str	r3, [r4, #0]
    4838:	6928      	ldr	r0, [r5, #16]
    483a:	68f3      	ldr	r3, [r6, #12]
    483c:	4798      	blx	r3
    483e:	2000      	movs	r0, #0
    4840:	bd70      	pop	{r4, r5, r6, pc}
    4842:	4c13      	ldr	r4, [pc, #76]	; (4890 <CC_PalPowerSaveModeSelect+0x78>)
    4844:	6821      	ldr	r1, [r4, #0]
    4846:	b941      	cbnz	r1, 485a <CC_PalPowerSaveModeSelect+0x42>
    4848:	4b12      	ldr	r3, [pc, #72]	; (4894 <CC_PalPowerSaveModeSelect+0x7c>)
    484a:	2201      	movs	r2, #1
    484c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    4850:	4a11      	ldr	r2, [pc, #68]	; (4898 <CC_PalPowerSaveModeSelect+0x80>)
    4852:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    4856:	2b00      	cmp	r3, #0
    4858:	d1fb      	bne.n	4852 <CC_PalPowerSaveModeSelect+0x3a>
    485a:	3101      	adds	r1, #1
    485c:	6021      	str	r1, [r4, #0]
    485e:	68f3      	ldr	r3, [r6, #12]
    4860:	6928      	ldr	r0, [r5, #16]
    4862:	4798      	blx	r3
    4864:	2000      	movs	r0, #0
    4866:	bd70      	pop	{r4, r5, r6, pc}
    4868:	480c      	ldr	r0, [pc, #48]	; (489c <CC_PalPowerSaveModeSelect+0x84>)
    486a:	bd70      	pop	{r4, r5, r6, pc}
    486c:	4a0a      	ldr	r2, [pc, #40]	; (4898 <CC_PalPowerSaveModeSelect+0x80>)
    486e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    4872:	2b00      	cmp	r3, #0
    4874:	d1fb      	bne.n	486e <CC_PalPowerSaveModeSelect+0x56>
    4876:	4a07      	ldr	r2, [pc, #28]	; (4894 <CC_PalPowerSaveModeSelect+0x7c>)
    4878:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    487c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    4880:	f7ff ff46 	bl	4710 <CC_HalMaskInterrupt>
    4884:	6823      	ldr	r3, [r4, #0]
    4886:	e7d5      	b.n	4834 <CC_PalPowerSaveModeSelect+0x1c>
    4888:	20000130 	.word	0x20000130
    488c:	20000120 	.word	0x20000120
    4890:	20000a04 	.word	0x20000a04
    4894:	5002a000 	.word	0x5002a000
    4898:	5002b000 	.word	0x5002b000
    489c:	ffff8fe9 	.word	0xffff8fe9

000048a0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    48a0:	4770      	bx	lr

000048a2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    48a2:	4603      	mov	r3, r0
    48a4:	b158      	cbz	r0, 48be <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    48a6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    48a8:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    48ac:	2a01      	cmp	r2, #1
    48ae:	d003      	beq.n	48b8 <sys_notify_validate+0x16>
    48b0:	2a03      	cmp	r2, #3
    48b2:	d104      	bne.n	48be <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    48b4:	6802      	ldr	r2, [r0, #0]
    48b6:	b112      	cbz	r2, 48be <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    48b8:	2000      	movs	r0, #0
    48ba:	6098      	str	r0, [r3, #8]
    48bc:	4770      	bx	lr
		return -EINVAL;
    48be:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    48c2:	4770      	bx	lr

000048c4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    48c4:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    48c6:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    48c8:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    48cc:	2a03      	cmp	r2, #3
    48ce:	f04f 0200 	mov.w	r2, #0
{
    48d2:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    48d4:	bf0c      	ite	eq
    48d6:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    48d8:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    48da:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    48dc:	4770      	bx	lr

000048de <arch_printk_char_out>:
}
    48de:	2000      	movs	r0, #0
    48e0:	4770      	bx	lr

000048e2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    48e2:	b40f      	push	{r0, r1, r2, r3}
    48e4:	b507      	push	{r0, r1, r2, lr}
    48e6:	a904      	add	r1, sp, #16
    48e8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    48ec:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    48ee:	f7fb ff19 	bl	724 <vprintk>

	va_end(ap);
}
    48f2:	b003      	add	sp, #12
    48f4:	f85d eb04 	ldr.w	lr, [sp], #4
    48f8:	b004      	add	sp, #16
    48fa:	4770      	bx	lr

000048fc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    48fc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    48fe:	f013 0307 	ands.w	r3, r3, #7
    4902:	d105      	bne.n	4910 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4904:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    4906:	2b00      	cmp	r3, #0
    4908:	bf0c      	ite	eq
    490a:	2000      	moveq	r0, #0
    490c:	2003      	movne	r0, #3
    490e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4910:	2b02      	cmp	r3, #2
    4912:	d105      	bne.n	4920 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4914:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    4916:	2b00      	cmp	r3, #0
    4918:	bf14      	ite	ne
    491a:	2000      	movne	r0, #0
    491c:	2004      	moveq	r0, #4
    491e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    4920:	2b01      	cmp	r3, #1
    4922:	d105      	bne.n	4930 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4924:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    4926:	2b00      	cmp	r3, #0
    4928:	bf0c      	ite	eq
    492a:	2000      	moveq	r0, #0
    492c:	2005      	movne	r0, #5
    492e:	4770      	bx	lr
	int evt = EVT_NOP;
    4930:	2000      	movs	r0, #0
}
    4932:	4770      	bx	lr

00004934 <notify_one>:
{
    4934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4938:	460d      	mov	r5, r1
    493a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    493c:	4619      	mov	r1, r3
    493e:	1d28      	adds	r0, r5, #4
{
    4940:	4690      	mov	r8, r2
    4942:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4944:	f7ff ffbe 	bl	48c4 <sys_notify_finalize>
	if (cb) {
    4948:	4604      	mov	r4, r0
    494a:	b138      	cbz	r0, 495c <notify_one+0x28>
		cb(mgr, cli, state, res);
    494c:	4633      	mov	r3, r6
    494e:	4642      	mov	r2, r8
    4950:	4629      	mov	r1, r5
    4952:	4638      	mov	r0, r7
    4954:	46a4      	mov	ip, r4
}
    4956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    495a:	4760      	bx	ip
}
    495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004960 <transition_complete>:
{
    4960:	b410      	push	{r4}
	__asm__ volatile(
    4962:	f04f 0420 	mov.w	r4, #32
    4966:	f3ef 8211 	mrs	r2, BASEPRI
    496a:	f384 8812 	msr	BASEPRI_MAX, r4
    496e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4972:	6141      	str	r1, [r0, #20]
}
    4974:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4976:	2101      	movs	r1, #1
    4978:	f7fb bee2 	b.w	740 <process_event>

0000497c <validate_args>:
{
    497c:	b510      	push	{r4, lr}
    497e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4980:	b140      	cbz	r0, 4994 <validate_args+0x18>
    4982:	b139      	cbz	r1, 4994 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    4984:	1d08      	adds	r0, r1, #4
    4986:	f7ff ff8c 	bl	48a2 <sys_notify_validate>
	if ((rv == 0)
    498a:	b928      	cbnz	r0, 4998 <validate_args+0x1c>
	    && ((cli->notify.flags
    498c:	68a3      	ldr	r3, [r4, #8]
    498e:	f033 0303 	bics.w	r3, r3, #3
    4992:	d001      	beq.n	4998 <validate_args+0x1c>
		rv = -EINVAL;
    4994:	f06f 0015 	mvn.w	r0, #21
}
    4998:	bd10      	pop	{r4, pc}

0000499a <onoff_manager_init>:
{
    499a:	b538      	push	{r3, r4, r5, lr}
    499c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    499e:	4605      	mov	r5, r0
    49a0:	b158      	cbz	r0, 49ba <onoff_manager_init+0x20>
	    || (transitions == NULL)
    49a2:	b151      	cbz	r1, 49ba <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    49a4:	680b      	ldr	r3, [r1, #0]
    49a6:	b143      	cbz	r3, 49ba <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    49a8:	684b      	ldr	r3, [r1, #4]
    49aa:	b133      	cbz	r3, 49ba <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    49ac:	221c      	movs	r2, #28
    49ae:	2100      	movs	r1, #0
    49b0:	f000 f8f0 	bl	4b94 <memset>
    49b4:	612c      	str	r4, [r5, #16]
	return 0;
    49b6:	2000      	movs	r0, #0
}
    49b8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    49ba:	f06f 0015 	mvn.w	r0, #21
    49be:	e7fb      	b.n	49b8 <onoff_manager_init+0x1e>

000049c0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    49c0:	b570      	push	{r4, r5, r6, lr}
    49c2:	4604      	mov	r4, r0
    49c4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    49c6:	f7ff ffd9 	bl	497c <validate_args>

	if (rv < 0) {
    49ca:	1e05      	subs	r5, r0, #0
    49cc:	db31      	blt.n	4a32 <onoff_request+0x72>
    49ce:	f04f 0320 	mov.w	r3, #32
    49d2:	f3ef 8111 	mrs	r1, BASEPRI
    49d6:	f383 8812 	msr	BASEPRI_MAX, r3
    49da:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    49de:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    49e0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    49e2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    49e6:	42ab      	cmp	r3, r5
    49e8:	f000 0207 	and.w	r2, r0, #7
    49ec:	d02e      	beq.n	4a4c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    49ee:	2a02      	cmp	r2, #2
    49f0:	d10e      	bne.n	4a10 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    49f2:	3301      	adds	r3, #1
    49f4:	8363      	strh	r3, [r4, #26]
	rv = state;
    49f6:	4615      	mov	r5, r2
		notify = true;
    49f8:	2301      	movs	r3, #1
	__asm__ volatile(
    49fa:	f381 8811 	msr	BASEPRI, r1
    49fe:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4a02:	b1b3      	cbz	r3, 4a32 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    4a04:	2300      	movs	r3, #0
    4a06:	4631      	mov	r1, r6
    4a08:	4620      	mov	r0, r4
    4a0a:	f7ff ff93 	bl	4934 <notify_one>
    4a0e:	e010      	b.n	4a32 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    4a10:	0783      	lsls	r3, r0, #30
    4a12:	d001      	beq.n	4a18 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    4a14:	2a06      	cmp	r2, #6
    4a16:	d10e      	bne.n	4a36 <onoff_request+0x76>
	parent->next = child;
    4a18:	2300      	movs	r3, #0
    4a1a:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4a1c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4a1e:	b993      	cbnz	r3, 4a46 <onoff_request+0x86>
	list->head = node;
    4a20:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    4a24:	4615      	mov	r5, r2
    4a26:	b962      	cbnz	r2, 4a42 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    4a28:	460a      	mov	r2, r1
    4a2a:	4620      	mov	r0, r4
    4a2c:	2102      	movs	r1, #2
    4a2e:	f7fb fe87 	bl	740 <process_event>
		}
	}

	return rv;
}
    4a32:	4628      	mov	r0, r5
    4a34:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    4a36:	2a05      	cmp	r2, #5
    4a38:	bf0c      	ite	eq
    4a3a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    4a3e:	f06f 0504 	mvnne.w	r5, #4
    4a42:	2300      	movs	r3, #0
    4a44:	e7d9      	b.n	49fa <onoff_request+0x3a>
	parent->next = child;
    4a46:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4a48:	6066      	str	r6, [r4, #4]
}
    4a4a:	e7eb      	b.n	4a24 <onoff_request+0x64>
		rv = -EAGAIN;
    4a4c:	f06f 050a 	mvn.w	r5, #10
    4a50:	e7f7      	b.n	4a42 <onoff_request+0x82>

00004a52 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4a52:	4604      	mov	r4, r0
    4a54:	b508      	push	{r3, lr}
    4a56:	4608      	mov	r0, r1
    4a58:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4a5a:	461a      	mov	r2, r3
    4a5c:	47a0      	blx	r4
	return z_impl_z_current_get();
    4a5e:	f7ff fb93 	bl	4188 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4a62:	f7fd f803 	bl	1a6c <z_impl_k_thread_abort>

00004a66 <encode_uint>:
{
    4a66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a6a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    4a6c:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    4a6e:	2b6f      	cmp	r3, #111	; 0x6f
{
    4a70:	4680      	mov	r8, r0
    4a72:	460f      	mov	r7, r1
    4a74:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4a76:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    4a7a:	d029      	beq.n	4ad0 <encode_uint+0x6a>
    4a7c:	d824      	bhi.n	4ac8 <encode_uint+0x62>
		return 16;
    4a7e:	2b58      	cmp	r3, #88	; 0x58
    4a80:	bf14      	ite	ne
    4a82:	260a      	movne	r6, #10
    4a84:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    4a86:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    4a8a:	4632      	mov	r2, r6
    4a8c:	2300      	movs	r3, #0
    4a8e:	4640      	mov	r0, r8
    4a90:	4639      	mov	r1, r7
    4a92:	f7fb fb35 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4a96:	2a09      	cmp	r2, #9
    4a98:	b2d4      	uxtb	r4, r2
    4a9a:	d81e      	bhi.n	4ada <encode_uint+0x74>
    4a9c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    4a9e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4aa0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    4aa2:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4aa6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    4aaa:	d301      	bcc.n	4ab0 <encode_uint+0x4a>
    4aac:	45d1      	cmp	r9, sl
    4aae:	d811      	bhi.n	4ad4 <encode_uint+0x6e>
	if (conv->flag_hash) {
    4ab0:	782b      	ldrb	r3, [r5, #0]
    4ab2:	069b      	lsls	r3, r3, #26
    4ab4:	d505      	bpl.n	4ac2 <encode_uint+0x5c>
		if (radix == 8) {
    4ab6:	2e08      	cmp	r6, #8
    4ab8:	d115      	bne.n	4ae6 <encode_uint+0x80>
			conv->altform_0 = true;
    4aba:	78ab      	ldrb	r3, [r5, #2]
    4abc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    4ac0:	70ab      	strb	r3, [r5, #2]
}
    4ac2:	4648      	mov	r0, r9
    4ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4ac8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    4acc:	2b70      	cmp	r3, #112	; 0x70
    4ace:	e7d7      	b.n	4a80 <encode_uint+0x1a>
	switch (specifier) {
    4ad0:	2608      	movs	r6, #8
    4ad2:	e7d8      	b.n	4a86 <encode_uint+0x20>
		value /= radix;
    4ad4:	4680      	mov	r8, r0
    4ad6:	460f      	mov	r7, r1
    4ad8:	e7d7      	b.n	4a8a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4ada:	f1bb 0f19 	cmp.w	fp, #25
    4ade:	bf94      	ite	ls
    4ae0:	3437      	addls	r4, #55	; 0x37
    4ae2:	3457      	addhi	r4, #87	; 0x57
    4ae4:	e7db      	b.n	4a9e <encode_uint+0x38>
		} else if (radix == 16) {
    4ae6:	2e10      	cmp	r6, #16
    4ae8:	d1eb      	bne.n	4ac2 <encode_uint+0x5c>
			conv->altform_0c = true;
    4aea:	78ab      	ldrb	r3, [r5, #2]
    4aec:	f043 0310 	orr.w	r3, r3, #16
    4af0:	e7e6      	b.n	4ac0 <encode_uint+0x5a>

00004af2 <outs>:
{
    4af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4af6:	4607      	mov	r7, r0
    4af8:	4688      	mov	r8, r1
    4afa:	4615      	mov	r5, r2
    4afc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4afe:	4614      	mov	r4, r2
    4b00:	42b4      	cmp	r4, r6
    4b02:	eba4 0005 	sub.w	r0, r4, r5
    4b06:	d302      	bcc.n	4b0e <outs+0x1c>
    4b08:	b93e      	cbnz	r6, 4b1a <outs+0x28>
    4b0a:	7823      	ldrb	r3, [r4, #0]
    4b0c:	b12b      	cbz	r3, 4b1a <outs+0x28>
		int rc = out((int)*sp++, ctx);
    4b0e:	f814 0b01 	ldrb.w	r0, [r4], #1
    4b12:	4641      	mov	r1, r8
    4b14:	47b8      	blx	r7
		if (rc < 0) {
    4b16:	2800      	cmp	r0, #0
    4b18:	daf2      	bge.n	4b00 <outs+0xe>
}
    4b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004b1e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    4b1e:	4770      	bx	lr

00004b20 <abort_function>:
{
    4b20:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    4b22:	2000      	movs	r0, #0
    4b24:	f7fc faae 	bl	1084 <sys_reboot>

00004b28 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4b28:	f000 bb4a 	b.w	51c0 <z_fatal_error>

00004b2c <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4b2c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4b2e:	6800      	ldr	r0, [r0, #0]
    4b30:	f000 bb46 	b.w	51c0 <z_fatal_error>

00004b34 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4b34:	2100      	movs	r1, #0
    4b36:	2001      	movs	r0, #1
    4b38:	f7ff bff6 	b.w	4b28 <z_arm_fatal_error>

00004b3c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4b3c:	b508      	push	{r3, lr}
	handler();
    4b3e:	f7fc fd31 	bl	15a4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4b46:	f7fc be09 	b.w	175c <z_arm_exc_exit>

00004b4a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    4b4a:	3901      	subs	r1, #1
    4b4c:	4603      	mov	r3, r0
    4b4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4b52:	b90a      	cbnz	r2, 4b58 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    4b54:	701a      	strb	r2, [r3, #0]

	return dest;
}
    4b56:	4770      	bx	lr
		*d = *s;
    4b58:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4b5c:	e7f7      	b.n	4b4e <strcpy+0x4>

00004b5e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4b5e:	4603      	mov	r3, r0
	size_t n = 0;
    4b60:	2000      	movs	r0, #0

	while (*s != '\0') {
    4b62:	5c1a      	ldrb	r2, [r3, r0]
    4b64:	b902      	cbnz	r2, 4b68 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4b66:	4770      	bx	lr
		n++;
    4b68:	3001      	adds	r0, #1
    4b6a:	e7fa      	b.n	4b62 <strlen+0x4>

00004b6c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4b6c:	4603      	mov	r3, r0
	size_t n = 0;
    4b6e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4b70:	5c1a      	ldrb	r2, [r3, r0]
    4b72:	b10a      	cbz	r2, 4b78 <strnlen+0xc>
    4b74:	4288      	cmp	r0, r1
    4b76:	d100      	bne.n	4b7a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    4b78:	4770      	bx	lr
		n++;
    4b7a:	3001      	adds	r0, #1
    4b7c:	e7f8      	b.n	4b70 <strnlen+0x4>

00004b7e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    4b7e:	b510      	push	{r4, lr}
    4b80:	1e43      	subs	r3, r0, #1
    4b82:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    4b84:	4291      	cmp	r1, r2
    4b86:	d100      	bne.n	4b8a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4b88:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    4b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
    4b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4b92:	e7f7      	b.n	4b84 <memcpy+0x6>

00004b94 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    4b94:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    4b96:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    4b98:	4603      	mov	r3, r0
	while (n > 0) {
    4b9a:	4293      	cmp	r3, r2
    4b9c:	d100      	bne.n	4ba0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4b9e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    4ba0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4ba4:	e7f9      	b.n	4b9a <memset+0x6>

00004ba6 <_stdout_hook_default>:
}
    4ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4baa:	4770      	bx	lr

00004bac <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    4bac:	2806      	cmp	r0, #6
    4bae:	d108      	bne.n	4bc2 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    4bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4bb4:	2201      	movs	r2, #1
    4bb6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    4bba:	f3bf 8f4f 	dsb	sy
        __WFE();
    4bbe:	bf20      	wfe
    while (true)
    4bc0:	e7fd      	b.n	4bbe <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    4bc2:	4770      	bx	lr

00004bc4 <pm_state_exit_post_ops>:
    4bc4:	2300      	movs	r3, #0
    4bc6:	f383 8811 	msr	BASEPRI, r3
    4bca:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4bce:	4770      	bx	lr

00004bd0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4bd0:	6903      	ldr	r3, [r0, #16]
    4bd2:	b2c9      	uxtb	r1, r1
    4bd4:	220c      	movs	r2, #12
    4bd6:	fb01 3302 	mla	r3, r1, r2, r3
    4bda:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    4bdc:	f000 0007 	and.w	r0, r0, #7
    4be0:	4770      	bx	lr

00004be2 <set_on_state>:
	__asm__ volatile(
    4be2:	f04f 0320 	mov.w	r3, #32
    4be6:	f3ef 8211 	mrs	r2, BASEPRI
    4bea:	f383 8812 	msr	BASEPRI_MAX, r3
    4bee:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4bf2:	6803      	ldr	r3, [r0, #0]
    4bf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4bf8:	f043 0302 	orr.w	r3, r3, #2
    4bfc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4bfe:	f382 8811 	msr	BASEPRI, r2
    4c02:	f3bf 8f6f 	isb	sy
}
    4c06:	4770      	bx	lr

00004c08 <stop>:
{
    4c08:	4603      	mov	r3, r0
    4c0a:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    4c0c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    4c0e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4c10:	f04f 0420 	mov.w	r4, #32
    4c14:	f3ef 8611 	mrs	r6, BASEPRI
    4c18:	f384 8812 	msr	BASEPRI_MAX, r4
    4c1c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4c20:	250c      	movs	r5, #12
    4c22:	fb05 0401 	mla	r4, r5, r1, r0
    4c26:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4c28:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4c2c:	d001      	beq.n	4c32 <stop+0x2a>
    4c2e:	42a2      	cmp	r2, r4
    4c30:	d110      	bne.n	4c54 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4c32:	fb05 0001 	mla	r0, r5, r1, r0
    4c36:	2201      	movs	r2, #1
    4c38:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    4c3a:	2000      	movs	r0, #0
	__asm__ volatile(
    4c3c:	f386 8811 	msr	BASEPRI, r6
    4c40:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    4c44:	b928      	cbnz	r0, 4c52 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    4c46:	685b      	ldr	r3, [r3, #4]
    4c48:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    4c4c:	684b      	ldr	r3, [r1, #4]
    4c4e:	4798      	blx	r3
	return 0;
    4c50:	2000      	movs	r0, #0
}
    4c52:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    4c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4c58:	e7f0      	b.n	4c3c <stop+0x34>

00004c5a <api_stop>:
	return stop(dev, subsys, CTX_API);
    4c5a:	2280      	movs	r2, #128	; 0x80
    4c5c:	f7ff bfd4 	b.w	4c08 <stop>

00004c60 <async_start>:
{
    4c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c62:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4c64:	6904      	ldr	r4, [r0, #16]
{
    4c66:	4605      	mov	r5, r0
    4c68:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4c6a:	f04f 0020 	mov.w	r0, #32
    4c6e:	f3ef 8c11 	mrs	ip, BASEPRI
    4c72:	f380 8812 	msr	BASEPRI_MAX, r0
    4c76:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4c7a:	260c      	movs	r6, #12
    4c7c:	fb06 4601 	mla	r6, r6, r1, r4
    4c80:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4c82:	f000 0e07 	and.w	lr, r0, #7
    4c86:	f1be 0f01 	cmp.w	lr, #1
    4c8a:	d111      	bne.n	4cb0 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4c8c:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    4c8e:	2600      	movs	r6, #0
	__asm__ volatile(
    4c90:	f38c 8811 	msr	BASEPRI, ip
    4c94:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    4c98:	b946      	cbnz	r6, 4cac <async_start+0x4c>
	subdata->cb = cb;
    4c9a:	200c      	movs	r0, #12
    4c9c:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    4ca0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4ca4:	686b      	ldr	r3, [r5, #4]
    4ca6:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    4caa:	4798      	blx	r3
}
    4cac:	4630      	mov	r0, r6
    4cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4cb0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    4cb4:	4287      	cmp	r7, r0
    4cb6:	bf14      	ite	ne
    4cb8:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    4cbc:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    4cc0:	e7e6      	b.n	4c90 <async_start+0x30>

00004cc2 <api_start>:
{
    4cc2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    4cc4:	2480      	movs	r4, #128	; 0x80
    4cc6:	9400      	str	r4, [sp, #0]
    4cc8:	f7ff ffca 	bl	4c60 <async_start>
}
    4ccc:	b002      	add	sp, #8
    4cce:	bd10      	pop	{r4, pc}

00004cd0 <onoff_started_callback>:
	return &data->mgr[type];
    4cd0:	6900      	ldr	r0, [r0, #16]
{
    4cd2:	b410      	push	{r4}
	return &data->mgr[type];
    4cd4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4cd6:	241c      	movs	r4, #28
    4cd8:	fb03 0004 	mla	r0, r3, r4, r0
    4cdc:	2100      	movs	r1, #0
}
    4cde:	bc10      	pop	{r4}
	notify(mgr, 0);
    4ce0:	4710      	bx	r2

00004ce2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    4ce2:	2000      	movs	r0, #0
    4ce4:	f000 b9c5 	b.w	5072 <nrfx_clock_start>

00004ce8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4ce8:	2000      	movs	r0, #0
    4cea:	f000 b9ff 	b.w	50ec <nrfx_clock_stop>

00004cee <blocking_start_callback>:
{
    4cee:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4cf0:	f7fe bf10 	b.w	3b14 <z_impl_k_sem_give>

00004cf4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4cf4:	6843      	ldr	r3, [r0, #4]
    4cf6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4cf8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    4cfc:	600b      	str	r3, [r1, #0]
}
    4cfe:	2000      	movs	r0, #0
    4d00:	4770      	bx	lr

00004d02 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d02:	6843      	ldr	r3, [r0, #4]
    4d04:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    4d06:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    4d0a:	4042      	eors	r2, r0
    4d0c:	400a      	ands	r2, r1
    4d0e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    4d10:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    4d14:	2000      	movs	r0, #0
    4d16:	4770      	bx	lr

00004d18 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d18:	6843      	ldr	r3, [r0, #4]
    4d1a:	685b      	ldr	r3, [r3, #4]
}
    4d1c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    4d1e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    4d22:	4770      	bx	lr

00004d24 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d24:	6843      	ldr	r3, [r0, #4]
    4d26:	685b      	ldr	r3, [r3, #4]
}
    4d28:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4d2a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    4d2e:	4770      	bx	lr

00004d30 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4d30:	6843      	ldr	r3, [r0, #4]
    4d32:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4d34:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    4d38:	404b      	eors	r3, r1
    p_reg->OUT = value;
    4d3a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    4d3e:	2000      	movs	r0, #0
    4d40:	4770      	bx	lr

00004d42 <gpio_nrfx_manage_callback>:
	return port->data;
    4d42:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4d44:	6858      	ldr	r0, [r3, #4]
{
    4d46:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    4d48:	b158      	cbz	r0, 4d62 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4d4a:	2400      	movs	r4, #0
    4d4c:	4281      	cmp	r1, r0
    4d4e:	d112      	bne.n	4d76 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    4d50:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    4d52:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    4d54:	b954      	cbnz	r4, 4d6c <gpio_nrfx_manage_callback+0x2a>
    4d56:	428d      	cmp	r5, r1
	list->head = node;
    4d58:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4d5a:	d100      	bne.n	4d5e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    4d5c:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4d5e:	2000      	movs	r0, #0
    4d60:	6008      	str	r0, [r1, #0]
	if (set) {
    4d62:	b96a      	cbnz	r2, 4d80 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    4d64:	2000      	movs	r0, #0
}
    4d66:	bd30      	pop	{r4, r5, pc}
    4d68:	4628      	mov	r0, r5
    4d6a:	e7ef      	b.n	4d4c <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    4d6c:	428d      	cmp	r5, r1
	parent->next = child;
    4d6e:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4d70:	bf08      	it	eq
    4d72:	609c      	streq	r4, [r3, #8]
}
    4d74:	e7f3      	b.n	4d5e <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    4d76:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4d78:	4604      	mov	r4, r0
    4d7a:	2d00      	cmp	r5, #0
    4d7c:	d1f4      	bne.n	4d68 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    4d7e:	b13a      	cbz	r2, 4d90 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    4d80:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    4d82:	685a      	ldr	r2, [r3, #4]
    4d84:	600a      	str	r2, [r1, #0]
	list->head = node;
    4d86:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4d88:	2800      	cmp	r0, #0
    4d8a:	d1eb      	bne.n	4d64 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    4d8c:	6099      	str	r1, [r3, #8]
}
    4d8e:	e7ea      	b.n	4d66 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    4d90:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4d94:	e7e7      	b.n	4d66 <gpio_nrfx_manage_callback+0x24>

00004d96 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    4d96:	6902      	ldr	r2, [r0, #16]
{
    4d98:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    4d9a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4d9e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4da2:	2000      	movs	r0, #0
    4da4:	4770      	bx	lr

00004da6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4da6:	6843      	ldr	r3, [r0, #4]
    4da8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4daa:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4dae:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4db2:	4770      	bx	lr

00004db4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4db4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    4db6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    4db8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4dbe:	b148      	cbz	r0, 4dd4 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    4dc0:	7c52      	ldrb	r2, [r2, #17]
    4dc2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4dc4:	2000      	movs	r0, #0
    4dc6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4dca:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4dce:	2201      	movs	r2, #1
    4dd0:	601a      	str	r2, [r3, #0]
	return 0;
    4dd2:	4770      	bx	lr
		return -1;
    4dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4dd8:	4770      	bx	lr

00004dda <is_tx_ready.isra.0>:
	return config->uarte_regs;
    4dda:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    4ddc:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dde:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4de2:	b940      	cbnz	r0, 4df6 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    4de4:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4de6:	079b      	lsls	r3, r3, #30
    4de8:	d406      	bmi.n	4df8 <is_tx_ready.isra.0+0x1e>
    4dea:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    4dee:	3800      	subs	r0, #0
    4df0:	bf18      	it	ne
    4df2:	2001      	movne	r0, #1
    4df4:	4770      	bx	lr
    4df6:	2001      	movs	r0, #1
}
    4df8:	4770      	bx	lr

00004dfa <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    4dfa:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    4dfc:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4dfe:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4e02:	05c9      	lsls	r1, r1, #23
    4e04:	d518      	bpl.n	4e38 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e06:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    4e0a:	b1a9      	cbz	r1, 4e38 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4e0c:	f04f 0020 	mov.w	r0, #32
    4e10:	f3ef 8111 	mrs	r1, BASEPRI
    4e14:	f380 8812 	msr	BASEPRI_MAX, r0
    4e18:	f3bf 8f6f 	isb	sy
    4e1c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4e20:	b130      	cbz	r0, 4e30 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e22:	2000      	movs	r0, #0
    4e24:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    4e28:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e2c:	2001      	movs	r0, #1
    4e2e:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    4e30:	f381 8811 	msr	BASEPRI, r1
    4e34:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4e38:	6852      	ldr	r2, [r2, #4]
    4e3a:	06d2      	lsls	r2, r2, #27
    4e3c:	d515      	bpl.n	4e6a <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    4e3e:	f04f 0120 	mov.w	r1, #32
    4e42:	f3ef 8211 	mrs	r2, BASEPRI
    4e46:	f381 8812 	msr	BASEPRI_MAX, r1
    4e4a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e4e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4e52:	b111      	cbz	r1, 4e5a <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4e54:	2100      	movs	r1, #0
    4e56:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    4e5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4e5e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    4e62:	f382 8811 	msr	BASEPRI, r2
    4e66:	f3bf 8f6f 	isb	sy
}
    4e6a:	4770      	bx	lr

00004e6c <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    4e6c:	b510      	push	{r4, lr}
    4e6e:	2200      	movs	r2, #0
    4e70:	4604      	mov	r4, r0
    4e72:	2101      	movs	r1, #1
    4e74:	2028      	movs	r0, #40	; 0x28
    4e76:	f7fc fb7d 	bl	1574 <z_arm_irq_priority_set>
    4e7a:	2028      	movs	r0, #40	; 0x28
    4e7c:	f7fc fb5c 	bl	1538 <arch_irq_enable>
    4e80:	4620      	mov	r0, r4
    4e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e86:	f7fd bac5 	b.w	2414 <uarte_instance_init.constprop.0>

00004e8a <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    4e8a:	b510      	push	{r4, lr}
    4e8c:	2200      	movs	r2, #0
    4e8e:	4604      	mov	r4, r0
    4e90:	2101      	movs	r1, #1
    4e92:	2002      	movs	r0, #2
    4e94:	f7fc fb6e 	bl	1574 <z_arm_irq_priority_set>
    4e98:	2002      	movs	r0, #2
    4e9a:	f7fc fb4d 	bl	1538 <arch_irq_enable>
    4e9e:	4620      	mov	r0, r4
    4ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ea4:	f7fd bab6 	b.w	2414 <uarte_instance_init.constprop.0>

00004ea8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4ea8:	4770      	bx	lr

00004eaa <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    4eaa:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    4eac:	6843      	ldr	r3, [r0, #4]
    4eae:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    4eb0:	7a03      	ldrb	r3, [r0, #8]
    4eb2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    4eb6:	3b01      	subs	r3, #1
    4eb8:	00db      	lsls	r3, r3, #3
    4eba:	6845      	ldr	r5, [r0, #4]
    4ebc:	6814      	ldr	r4, [r2, #0]
    4ebe:	441d      	add	r5, r3
    4ec0:	42ac      	cmp	r4, r5
    4ec2:	d902      	bls.n	4eca <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    4ec4:	f06f 0001 	mvn.w	r0, #1
}
    4ec8:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    4eca:	7965      	ldrb	r5, [r4, #5]
    4ecc:	428d      	cmp	r5, r1
    4ece:	d002      	beq.n	4ed6 <pinctrl_lookup_state+0x2c>
		(*state)++;
    4ed0:	3408      	adds	r4, #8
    4ed2:	6014      	str	r4, [r2, #0]
    4ed4:	e7f1      	b.n	4eba <pinctrl_lookup_state+0x10>
			return 0;
    4ed6:	2000      	movs	r0, #0
    4ed8:	e7f6      	b.n	4ec8 <pinctrl_lookup_state+0x1e>

00004eda <nrf_gpio_pin_write>:
    if (value == 0)
    4eda:	b909      	cbnz	r1, 4ee0 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    4edc:	f7fd bdbc 	b.w	2a58 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    4ee0:	f7fd bdec 	b.w	2abc <nrf_gpio_pin_set>

00004ee4 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4ee4:	b570      	push	{r4, r5, r6, lr}
    4ee6:	4615      	mov	r5, r2
    4ee8:	4604      	mov	r4, r0
    4eea:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4eee:	42a6      	cmp	r6, r4
    4ef0:	d101      	bne.n	4ef6 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    4ef2:	2000      	movs	r0, #0
}
    4ef4:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    4ef6:	6823      	ldr	r3, [r4, #0]
    4ef8:	0c1a      	lsrs	r2, r3, #16
    4efa:	2a22      	cmp	r2, #34	; 0x22
    4efc:	f200 808e 	bhi.w	501c <pinctrl_configure_pins+0x138>
    4f00:	e8df f002 	tbb	[pc, r2]
    4f04:	43241d12 	.word	0x43241d12
    4f08:	8c433929 	.word	0x8c433929
    4f0c:	488c8c8c 	.word	0x488c8c8c
    4f10:	8c8c8c4d 	.word	0x8c8c8c4d
    4f14:	8c8c8c8c 	.word	0x8c8c8c8c
    4f18:	5e528c8c 	.word	0x5e528c8c
    4f1c:	8c8c6863 	.word	0x8c8c6863
    4f20:	78736d8c 	.word	0x78736d8c
    4f24:	827d      	.short	0x827d
    4f26:	87          	.byte	0x87
    4f27:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    4f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f2c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    4f30:	6820      	ldr	r0, [r4, #0]
    4f32:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    4f36:	f7fd fdc1 	bl	2abc <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4f3a:	2201      	movs	r2, #1
    4f3c:	e015      	b.n	4f6a <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    4f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f42:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4f46:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4f48:	2100      	movs	r1, #0
    4f4a:	e00f      	b.n	4f6c <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    4f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f50:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    4f54:	e7ec      	b.n	4f30 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    4f56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f5a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    4f5e:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    4f60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    4f64:	f7fd fd78 	bl	2a58 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4f68:	2200      	movs	r2, #0
    4f6a:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4f6c:	6820      	ldr	r0, [r4, #0]
    4f6e:	f7fd fd83 	bl	2a78 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4f72:	3404      	adds	r4, #4
    4f74:	e7bb      	b.n	4eee <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    4f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f7a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    4f7e:	6820      	ldr	r0, [r4, #0]
    4f80:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    4f84:	f7fd fd68 	bl	2a58 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4f88:	e7d7      	b.n	4f3a <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    4f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f8e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4f92:	e7d8      	b.n	4f46 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    4f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4f98:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4f9c:	e7d3      	b.n	4f46 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    4f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4fa2:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    4fa6:	e7ce      	b.n	4f46 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    4fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4fac:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4fb0:	6820      	ldr	r0, [r4, #0]
    4fb2:	f3c0 3140 	ubfx	r1, r0, #13, #1
    4fb6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    4fba:	f7ff ff8e 	bl	4eda <nrf_gpio_pin_write>
    4fbe:	e7bc      	b.n	4f3a <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    4fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4fc4:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4fc8:	e7f2      	b.n	4fb0 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    4fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4fce:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4fd2:	e7ed      	b.n	4fb0 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    4fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4fd8:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    4fdc:	e7e8      	b.n	4fb0 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    4fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4fe2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4fe6:	2201      	movs	r2, #1
    4fe8:	e7ae      	b.n	4f48 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    4fea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4fee:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4ff2:	e7f8      	b.n	4fe6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    4ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4ff8:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4ffc:	e7f3      	b.n	4fe6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    4ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5002:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5006:	e7ee      	b.n	4fe6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    5008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    500c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5010:	e7e9      	b.n	4fe6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    5012:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5016:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    501a:	e7e4      	b.n	4fe6 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    501c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5020:	e768      	b.n	4ef4 <pinctrl_configure_pins+0x10>

00005022 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5022:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5024:	2000      	movs	r0, #0
    5026:	f7fc fe33 	bl	1c90 <sys_arch_reboot>

0000502a <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    502a:	f7ff ba63 	b.w	44f4 <nrf_cc3xx_platform_init_no_rng>

0000502e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    502e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5030:	f7fc f99a 	bl	1368 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5034:	f7fc fa4c 	bl	14d0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    5038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    503c:	f7ff ba5a 	b.w	44f4 <nrf_cc3xx_platform_init_no_rng>

00005040 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5040:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5044:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    5048:	f1a0 0308 	sub.w	r3, r0, #8
    504c:	4258      	negs	r0, r3
    504e:	4158      	adcs	r0, r3
    5050:	4770      	bx	lr

00005052 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    5052:	4700      	bx	r0

00005054 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    5054:	f000 ba19 	b.w	548a <z_impl_k_busy_wait>

00005058 <nrfx_clock_enable>:
{
    5058:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    505a:	2000      	movs	r0, #0
    505c:	f7fc fa7c 	bl	1558 <arch_irq_is_enabled>
    5060:	b908      	cbnz	r0, 5066 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5062:	f7fc fa69 	bl	1538 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    506a:	2200      	movs	r2, #0
    506c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    5070:	bd08      	pop	{r3, pc}

00005072 <nrfx_clock_start>:
{
    5072:	b508      	push	{r3, lr}
    switch (domain)
    5074:	b110      	cbz	r0, 507c <nrfx_clock_start+0xa>
    5076:	2801      	cmp	r0, #1
    5078:	d02d      	beq.n	50d6 <nrfx_clock_start+0x64>
}
    507a:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    507c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5080:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5084:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5088:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    508c:	d10b      	bne.n	50a6 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    508e:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    5092:	07c9      	lsls	r1, r1, #31
    5094:	d510      	bpl.n	50b8 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5096:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    509a:	079b      	lsls	r3, r3, #30
    509c:	d408      	bmi.n	50b0 <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    509e:	2302      	movs	r3, #2
    50a0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    50a4:	e7e9      	b.n	507a <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    50a6:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    50aa:	2b01      	cmp	r3, #1
    50ac:	d004      	beq.n	50b8 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    50ae:	b11b      	cbz	r3, 50b8 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    50b0:	2000      	movs	r0, #0
    50b2:	f7fd fe5f 	bl	2d74 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    50b6:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    50b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    50bc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50c0:	2300      	movs	r3, #0
    50c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    50c6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    50ca:	2302      	movs	r3, #2
    50cc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    50d0:	2301      	movs	r3, #1
    50d2:	6093      	str	r3, [r2, #8]
}
    50d4:	e7d1      	b.n	507a <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    50da:	2200      	movs	r2, #0
    50dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    50e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    50e4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    50e8:	6018      	str	r0, [r3, #0]
}
    50ea:	e7c6      	b.n	507a <nrfx_clock_start+0x8>

000050ec <nrfx_clock_stop>:
    clock_stop(domain);
    50ec:	f7fd be42 	b.w	2d74 <clock_stop>

000050f0 <nrf_gpio_reconfigure>:
{
    50f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    50f2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    50f4:	a801      	add	r0, sp, #4
{
    50f6:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    50fa:	4617      	mov	r7, r2
    50fc:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    50fe:	f7fd fed1 	bl	2ea4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5102:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5104:	2f00      	cmp	r7, #0
    5106:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    510a:	bf14      	ite	ne
    510c:	2302      	movne	r3, #2
    510e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5110:	2900      	cmp	r1, #0
    5112:	bf18      	it	ne
    5114:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5118:	2d00      	cmp	r5, #0
    511a:	bf14      	ite	ne
    511c:	f04f 0c0c 	movne.w	ip, #12
    5120:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5124:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5126:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    512a:	bf14      	ite	ne
    512c:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    5130:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    5134:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5136:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    513a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    513e:	bf14      	ite	ne
    5140:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    5144:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5148:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    514c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5150:	b101      	cbz	r1, 5154 <nrf_gpio_reconfigure+0x64>
    5152:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5154:	b10f      	cbz	r7, 515a <nrf_gpio_reconfigure+0x6a>
    5156:	783f      	ldrb	r7, [r7, #0]
    5158:	007f      	lsls	r7, r7, #1
    515a:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    515c:	b10d      	cbz	r5, 5162 <nrf_gpio_reconfigure+0x72>
    515e:	782d      	ldrb	r5, [r5, #0]
    5160:	00ad      	lsls	r5, r5, #2
    5162:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5164:	b10c      	cbz	r4, 516a <nrf_gpio_reconfigure+0x7a>
    5166:	7822      	ldrb	r2, [r4, #0]
    5168:	0214      	lsls	r4, r2, #8
    516a:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    516c:	b10e      	cbz	r6, 5172 <nrf_gpio_reconfigure+0x82>
    516e:	7836      	ldrb	r6, [r6, #0]
    5170:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5172:	432c      	orrs	r4, r5
    5174:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    5176:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    517a:	b003      	add	sp, #12
    517c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000517e <nrf_gpio_cfg_sense_set>:
{
    517e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    5180:	f10d 030f 	add.w	r3, sp, #15
    5184:	9301      	str	r3, [sp, #4]
    5186:	2300      	movs	r3, #0
{
    5188:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    518c:	9300      	str	r3, [sp, #0]
    518e:	461a      	mov	r2, r3
    5190:	4619      	mov	r1, r3
    5192:	f7ff ffad 	bl	50f0 <nrf_gpio_reconfigure>
}
    5196:	b005      	add	sp, #20
    5198:	f85d fb04 	ldr.w	pc, [sp], #4

0000519c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    519c:	f7fe b9e8 	b.w	3570 <_DoInit>

000051a0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    51a0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    51a2:	f7ff fffb 	bl	519c <SEGGER_RTT_Init>

	return 0;
}
    51a6:	2000      	movs	r0, #0
    51a8:	bd08      	pop	{r3, pc}

000051aa <z_device_state_init>:
}
    51aa:	4770      	bx	lr

000051ac <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    51ac:	b138      	cbz	r0, 51be <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    51ae:	68c3      	ldr	r3, [r0, #12]
    51b0:	8818      	ldrh	r0, [r3, #0]
    51b2:	f3c0 0008 	ubfx	r0, r0, #0, #9
    51b6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    51ba:	4258      	negs	r0, r3
    51bc:	4158      	adcs	r0, r3
}
    51be:	4770      	bx	lr

000051c0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    51c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51c2:	4605      	mov	r5, r0
    51c4:	460e      	mov	r6, r1
	__asm__ volatile(
    51c6:	f04f 0320 	mov.w	r3, #32
    51ca:	f3ef 8711 	mrs	r7, BASEPRI
    51ce:	f383 8812 	msr	BASEPRI_MAX, r3
    51d2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    51d6:	f7fe ffd7 	bl	4188 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    51da:	4631      	mov	r1, r6
    51dc:	4604      	mov	r4, r0
    51de:	4628      	mov	r0, r5
    51e0:	f7ff ff1f 	bl	5022 <k_sys_fatal_error_handler>
	__asm__ volatile(
    51e4:	f387 8811 	msr	BASEPRI, r7
    51e8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    51ec:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    51ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    51f2:	f7fc bc3b 	b.w	1a6c <z_impl_k_thread_abort>

000051f6 <z_early_memset>:
	(void) memset(dst, c, n);
    51f6:	f7ff bccd 	b.w	4b94 <memset>

000051fa <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    51fa:	f7ff bcc0 	b.w	4b7e <memcpy>

000051fe <k_mem_slab_init>:
{
    51fe:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    5200:	2400      	movs	r4, #0
    5202:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5204:	ea41 0402 	orr.w	r4, r1, r2
    5208:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    520c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    5210:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5212:	d10c      	bne.n	522e <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    5214:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5216:	42a3      	cmp	r3, r4
    5218:	d103      	bne.n	5222 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    521a:	e9c0 0000 	strd	r0, r0, [r0]
}
    521e:	2000      	movs	r0, #0
}
    5220:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    5222:	6945      	ldr	r5, [r0, #20]
    5224:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5226:	3401      	adds	r4, #1
		slab->free_list = p;
    5228:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    522a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    522c:	e7f3      	b.n	5216 <k_mem_slab_init+0x18>
		return -EINVAL;
    522e:	f06f 0015 	mvn.w	r0, #21
	return rc;
    5232:	e7f5      	b.n	5220 <k_mem_slab_init+0x22>

00005234 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5236:	4604      	mov	r4, r0
    5238:	460d      	mov	r5, r1
	__asm__ volatile(
    523a:	f04f 0320 	mov.w	r3, #32
    523e:	f3ef 8611 	mrs	r6, BASEPRI
    5242:	f383 8812 	msr	BASEPRI_MAX, r3
    5246:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    524a:	6947      	ldr	r7, [r0, #20]
    524c:	b977      	cbnz	r7, 526c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    524e:	f000 f8c0 	bl	53d2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    5252:	b158      	cbz	r0, 526c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5254:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5256:	6142      	str	r2, [r0, #20]
    5258:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    525a:	f000 f85e 	bl	531a <z_ready_thread>
			z_reschedule(&slab->lock, key);
    525e:	4631      	mov	r1, r6
    5260:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5264:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    5268:	f7fe bce2 	b.w	3c30 <z_reschedule>
	**(char ***) mem = slab->free_list;
    526c:	682b      	ldr	r3, [r5, #0]
    526e:	6962      	ldr	r2, [r4, #20]
    5270:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5272:	682b      	ldr	r3, [r5, #0]
    5274:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    5276:	69a3      	ldr	r3, [r4, #24]
    5278:	3b01      	subs	r3, #1
    527a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    527c:	f386 8811 	msr	BASEPRI, r6
    5280:	f3bf 8f6f 	isb	sy
}
    5284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005286 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5286:	f3ef 8005 	mrs	r0, IPSR
}
    528a:	3800      	subs	r0, #0
    528c:	bf18      	it	ne
    528e:	2001      	movne	r0, #1
    5290:	4770      	bx	lr

00005292 <z_pm_save_idle_exit>:
{
    5292:	b508      	push	{r3, lr}
	pm_system_resume();
    5294:	f7fb ff50 	bl	1138 <pm_system_resume>
}
    5298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    529c:	f7ff be04 	b.w	4ea8 <sys_clock_idle_exit>

000052a0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    52a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    52a4:	428b      	cmp	r3, r1
    52a6:	d001      	beq.n	52ac <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    52a8:	f7fe be2a 	b.w	3f00 <z_set_prio>
}
    52ac:	2000      	movs	r0, #0
    52ae:	4770      	bx	lr

000052b0 <z_impl_k_mutex_init>:
{
    52b0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    52b2:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    52b4:	e9c3 0002 	strd	r0, r0, [r3, #8]
    52b8:	e9c3 3300 	strd	r3, r3, [r3]
}
    52bc:	4770      	bx	lr

000052be <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    52be:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    52c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    52c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    52c6:	2300      	movs	r3, #0
	node->prev = NULL;
    52c8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    52cc:	4770      	bx	lr

000052ce <unpend_thread_no_timeout>:
{
    52ce:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    52d0:	f7ff fff5 	bl	52be <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    52d4:	7b43      	ldrb	r3, [r0, #13]
    52d6:	f023 0302 	bic.w	r3, r3, #2
    52da:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    52dc:	2300      	movs	r3, #0
    52de:	6083      	str	r3, [r0, #8]
}
    52e0:	bd08      	pop	{r3, pc}

000052e2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    52e2:	4603      	mov	r3, r0
    52e4:	b920      	cbnz	r0, 52f0 <z_reschedule_irqlock+0xe>
    52e6:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    52ea:	b90a      	cbnz	r2, 52f0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    52ec:	f7fc b97a 	b.w	15e4 <arch_swap>
    52f0:	f383 8811 	msr	BASEPRI, r3
    52f4:	f3bf 8f6f 	isb	sy
}
    52f8:	4770      	bx	lr

000052fa <z_reschedule_unlocked>:
	__asm__ volatile(
    52fa:	f04f 0320 	mov.w	r3, #32
    52fe:	f3ef 8011 	mrs	r0, BASEPRI
    5302:	f383 8812 	msr	BASEPRI_MAX, r3
    5306:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    530a:	f7ff bfea 	b.w	52e2 <z_reschedule_irqlock>

0000530e <z_priq_dumb_best>:
{
    530e:	4603      	mov	r3, r0
	return list->head == list;
    5310:	6800      	ldr	r0, [r0, #0]
}
    5312:	4283      	cmp	r3, r0
    5314:	bf08      	it	eq
    5316:	2000      	moveq	r0, #0
    5318:	4770      	bx	lr

0000531a <z_ready_thread>:
{
    531a:	b510      	push	{r4, lr}
    531c:	f04f 0320 	mov.w	r3, #32
    5320:	f3ef 8411 	mrs	r4, BASEPRI
    5324:	f383 8812 	msr	BASEPRI_MAX, r3
    5328:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    532c:	f7fe fd42 	bl	3db4 <ready_thread>
	__asm__ volatile(
    5330:	f384 8811 	msr	BASEPRI, r4
    5334:	f3bf 8f6f 	isb	sy
}
    5338:	bd10      	pop	{r4, pc}

0000533a <z_thread_timeout>:
{
    533a:	b510      	push	{r4, lr}
    533c:	4601      	mov	r1, r0
	__asm__ volatile(
    533e:	f04f 0320 	mov.w	r3, #32
    5342:	f3ef 8411 	mrs	r4, BASEPRI
    5346:	f383 8812 	msr	BASEPRI_MAX, r3
    534a:	f3bf 8f6f 	isb	sy
		if (!killed) {
    534e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    5352:	f013 0f28 	tst.w	r3, #40	; 0x28
    5356:	d10d      	bne.n	5374 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    5358:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    535c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    535e:	b10b      	cbz	r3, 5364 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    5360:	f7ff ffb5 	bl	52ce <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5364:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    5368:	f023 0314 	bic.w	r3, r3, #20
    536c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    5370:	f7fe fd20 	bl	3db4 <ready_thread>
	__asm__ volatile(
    5374:	f384 8811 	msr	BASEPRI, r4
    5378:	f3bf 8f6f 	isb	sy
}
    537c:	bd10      	pop	{r4, pc}

0000537e <add_to_waitq_locked>:
{
    537e:	b538      	push	{r3, r4, r5, lr}
    5380:	4604      	mov	r4, r0
    5382:	460d      	mov	r5, r1
	unready_thread(thread);
    5384:	f7fe fd6a 	bl	3e5c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5388:	7b63      	ldrb	r3, [r4, #13]
    538a:	f043 0302 	orr.w	r3, r3, #2
    538e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5390:	b195      	cbz	r5, 53b8 <add_to_waitq_locked+0x3a>
    5392:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    5394:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5396:	429d      	cmp	r5, r3
    5398:	d015      	beq.n	53c6 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    539a:	b1a3      	cbz	r3, 53c6 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    539c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    53a0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    53a4:	4291      	cmp	r1, r2
    53a6:	d008      	beq.n	53ba <add_to_waitq_locked+0x3c>
		return b2 - b1;
    53a8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    53aa:	2a00      	cmp	r2, #0
    53ac:	dd05      	ble.n	53ba <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    53ae:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    53b0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    53b4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    53b6:	605c      	str	r4, [r3, #4]
}
    53b8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    53ba:	686a      	ldr	r2, [r5, #4]
    53bc:	4293      	cmp	r3, r2
    53be:	d002      	beq.n	53c6 <add_to_waitq_locked+0x48>
    53c0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53c2:	2b00      	cmp	r3, #0
    53c4:	d1ec      	bne.n	53a0 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    53c6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    53c8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    53cc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    53ce:	606c      	str	r4, [r5, #4]
}
    53d0:	e7f2      	b.n	53b8 <add_to_waitq_locked+0x3a>

000053d2 <z_unpend_first_thread>:
{
    53d2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    53d4:	f04f 0320 	mov.w	r3, #32
    53d8:	f3ef 8511 	mrs	r5, BASEPRI
    53dc:	f383 8812 	msr	BASEPRI_MAX, r3
    53e0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    53e4:	f7ff ff93 	bl	530e <z_priq_dumb_best>
		if (thread != NULL) {
    53e8:	4604      	mov	r4, r0
    53ea:	b120      	cbz	r0, 53f6 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    53ec:	f7ff ff6f 	bl	52ce <unpend_thread_no_timeout>
    53f0:	3018      	adds	r0, #24
    53f2:	f000 f806 	bl	5402 <z_abort_timeout>
	__asm__ volatile(
    53f6:	f385 8811 	msr	BASEPRI, r5
    53fa:	f3bf 8f6f 	isb	sy
}
    53fe:	4620      	mov	r0, r4
    5400:	bd38      	pop	{r3, r4, r5, pc}

00005402 <z_abort_timeout>:
{
    5402:	b510      	push	{r4, lr}
	__asm__ volatile(
    5404:	f04f 0220 	mov.w	r2, #32
    5408:	f3ef 8411 	mrs	r4, BASEPRI
    540c:	f382 8812 	msr	BASEPRI_MAX, r2
    5410:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    5414:	6803      	ldr	r3, [r0, #0]
    5416:	b13b      	cbz	r3, 5428 <z_abort_timeout+0x26>
			remove_timeout(to);
    5418:	f7fe ff58 	bl	42cc <remove_timeout>
			ret = 0;
    541c:	2000      	movs	r0, #0
	__asm__ volatile(
    541e:	f384 8811 	msr	BASEPRI, r4
    5422:	f3bf 8f6f 	isb	sy
}
    5426:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    5428:	f06f 0015 	mvn.w	r0, #21
    542c:	e7f7      	b.n	541e <z_abort_timeout+0x1c>

0000542e <z_get_next_timeout_expiry>:
{
    542e:	b510      	push	{r4, lr}
	__asm__ volatile(
    5430:	f04f 0320 	mov.w	r3, #32
    5434:	f3ef 8411 	mrs	r4, BASEPRI
    5438:	f383 8812 	msr	BASEPRI_MAX, r3
    543c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    5440:	f7fe ff1e 	bl	4280 <next_timeout>
	__asm__ volatile(
    5444:	f384 8811 	msr	BASEPRI, r4
    5448:	f3bf 8f6f 	isb	sy
}
    544c:	bd10      	pop	{r4, pc}

0000544e <z_set_timeout_expiry>:
{
    544e:	b570      	push	{r4, r5, r6, lr}
    5450:	4604      	mov	r4, r0
    5452:	460d      	mov	r5, r1
	__asm__ volatile(
    5454:	f04f 0320 	mov.w	r3, #32
    5458:	f3ef 8611 	mrs	r6, BASEPRI
    545c:	f383 8812 	msr	BASEPRI_MAX, r3
    5460:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    5464:	f7fe ff0c 	bl	4280 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5468:	2801      	cmp	r0, #1
    546a:	dd05      	ble.n	5478 <z_set_timeout_expiry+0x2a>
    546c:	42a0      	cmp	r0, r4
    546e:	db03      	blt.n	5478 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    5470:	4629      	mov	r1, r5
    5472:	4620      	mov	r0, r4
    5474:	f7fd fab4 	bl	29e0 <sys_clock_set_timeout>
	__asm__ volatile(
    5478:	f386 8811 	msr	BASEPRI, r6
    547c:	f3bf 8f6f 	isb	sy
}
    5480:	bd70      	pop	{r4, r5, r6, pc}

00005482 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    5482:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    5484:	f7ff f812 	bl	44ac <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    5488:	bd08      	pop	{r3, pc}

0000548a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    548a:	b108      	cbz	r0, 5490 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    548c:	f7fc bc16 	b.w	1cbc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    5490:	4770      	bx	lr
	...

00005494 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    5494:	f7fd bb3c 	b.w	2b10 <SystemInit>
